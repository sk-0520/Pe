<#@ template debug="true" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Reflection" #>
<#@ assembly name="$(SolutionDir)../Output/$(Configuration)/$(Platform)/lib/SharedLibrary.dll" #>
<#@ assembly name="$(SolutionDir)../Output/$(Configuration)/$(Platform)/lib/PeData.dll" #>
<# /*assembly name="$(OutDir)lib\SharedLibrary.dll"*/ #>
<#@ assembly name="$(TargetPath)" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ import namespace="ContentTypeTextNet.Pe.PeMain" #>
<#@ output extension=".cs" #>
namespace ContentTypeTextNet.Pe.PeMain
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Text;
    using System.Threading.Tasks;
    using System.Windows.Media.Imaging;
    using ContentTypeTextNet.Library.SharedLibrary.CompatibleForms.Utility;
    using ContentTypeTextNet.Library.SharedLibrary.CompatibleWindows;
    using ContentTypeTextNet.Library.SharedLibrary.Define;
    using ContentTypeTextNet.Library.SharedLibrary.IF;
    using ContentTypeTextNet.Library.SharedLibrary.Logic;
    using ContentTypeTextNet.Library.SharedLibrary.Logic.Extension;
    using ContentTypeTextNet.Library.SharedLibrary.Model;
    using ContentTypeTextNet.Pe.PeMain.Logic;
    using ContentTypeTextNet.Pe.PeMain.Logic.Utility;

    partial class Constants
    {
<#
var type = typeof(Constants);
var fieldInfos = type.GetFields(BindingFlags.Static | BindingFlags.NonPublic | BindingFlags.Public);
var usingPropertyFieldInfos = fieldInfos
    .Select(fi => new { FieldInfo = fi, Attribute = fi.GetCustomAttribute(typeof(ConstantsPropertyAttribute), true) as ConstantsPropertyAttribute })
    .Where(fa => fa.Attribute != null)
    .ToArray()
;
var usingRangeFieldInfos = fieldInfos
    .Select(fi => new { FieldInfo = fi, Attribute = fi.GetCustomAttribute(typeof(ConstantsRangeAttribute), true) as ConstantsRangeAttribute })
    .Where(fa => fa.Attribute != null)
    .ToArray()
;

#>
        /*
        このソースは自動生成のため Constants-generator.tt を編集すること。

        生成元ConstantsPropertyフィールド数: <#= usingPropertyFieldInfos.Length #>
        生成元ConstantsRangeフィールド数: <#= usingRangeFieldInfos.Length #>
        */

        // ConstantsPropertyAttribute
<#
    foreach(var fa in usingPropertyFieldInfos) {
        var baseName = fa.FieldInfo.Name.ToUpper()[0] + fa.FieldInfo.Name.Substring(1);
        var fieldType = Generator.GetGenericType(fa.FieldInfo.FieldType);

#>
        #region <#= fa.FieldInfo.Name #>

        public static <#= fieldType #> <#= baseName #>
        {
            get
            {
                return <#= fa.FieldInfo.Name #>;
            }
        }

        #endregion
<#
    }
#>

        // ConstantsRangeAttribute
<#
    foreach(var fa in usingRangeFieldInfos) {
        var reg = new Regex(@"(?<NAME>\w.*)(?<UNIT>[A-Z]\w+)");
        var match = reg.Matches(fa.FieldInfo.Name)[0];
        var baseName = match.Groups["NAME"].Value.ToUpperInvariant()[0] + match.Groups["NAME"].Value.Substring(1);
        var unit = match.Groups["UNIT"].Value;
        var fieldType = Generator.GetGenericType(fa.FieldInfo.FieldType);
#>
        #region <#= fa.FieldInfo.Name #>
<#
        foreach(var kind in new[] { "minimum", "median", "maximum" }) {
            var methodKind = kind.ToUpperInvariant()[0] + kind.Substring(1);
#>

        /// <summary>
        /// Constants.<#= fa.FieldInfo.Name #>.<#= kind #>取得用プロパティ。
        /// <para>XAMLで使用することを想定</para>
        /// </summary>
        public static <#= fieldType #> <#= baseName #><#= methodKind #><#= unit #>
        {
            get
            {
                return <#= fa.FieldInfo.Name #>.<#= kind #>;
            }
        }
        
<#
        }
#>

        #endregion
<#
    }
#>

    }
}
<#+
internal static class Generator
{
    internal static string GetGenericType(Type type)
    {
        var builder = new StringBuilder();
        var name = type.Name;
        var index = name.IndexOf("`");
        if(index == -1) {
            return name;
        }
        //builder.AppendFormat("{0}.{1}", type.Namespace, name.Substring(0, index));
        //builder.Append('<');
        builder.Append(string.Join(",", type.GetGenericArguments().Select(arg => GetGenericType(arg))));
        //builder.Append('>');

        return builder.ToString();
    }
}
#>
