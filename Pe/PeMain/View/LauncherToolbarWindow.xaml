<AW:ViewModelCommonDataWindow
  x:Name="root"
  xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
  xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
  xmlns:sys="clr-namespace:System;assembly=mscorlib"
  xmlns:windows="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
  xmlns:i="http://schemas.microsoft.com/expression/2010/interactivity"
  xmlns:xctk="http://schemas.xceed.com/wpf/xaml/toolkit"
  xmlns:SC="clr-namespace:ContentTypeTextNet.Library.SharedLibrary.View.Converter;assembly=ContentTypeTextNet.SharedLibrary"
  xmlns:SA="clr-namespace:ContentTypeTextNet.Library.SharedLibrary.View.Attached;assembly=ContentTypeTextNet.SharedLibrary"
  xmlns:SL="clr-namespace:ContentTypeTextNet.Library.SharedLibrary.Logic;assembly=ContentTypeTextNet.SharedLibrary"
  xmlns:AM="clr-namespace:ContentTypeTextNet.Pe.PeMain"
  xmlns:AVM="clr-namespace:ContentTypeTextNet.Pe.PeMain.ViewModel"
  xmlns:AP="clr-namespace:ContentTypeTextNet.Pe.PeMain.View.Parts"
  xmlns:AW="clr-namespace:ContentTypeTextNet.Pe.PeMain.View.Parts.Window"
  xmlns:AC="clr-namespace:ContentTypeTextNet.Pe.PeMain.View.Parts.Converter"
  xmlns:ACC="clr-namespace:ContentTypeTextNet.Pe.PeMain.View.Parts.Control"
  xmlns:ADD="clr-namespace:ContentTypeTextNet.Pe.Library.PeData.Define;assembly=PeData"
  xmlns:SD="clr-namespace:ContentTypeTextNet.Library.SharedLibrary.Define;assembly=ContentTypeTextNet.SharedLibrary"
  x:Class="ContentTypeTextNet.Pe.PeMain.View.LauncherToolbarWindow"
  x:TypeArguments="AVM:LauncherToolbarViewModel"
  xmlns:AA="clr-namespace:ContentTypeTextNet.Pe.PeMain.View.Parts.Attached"
  AA:Language.Word="window/toolbar"
  Title="ToolbarWindow" 
  Left="{Binding WindowLeft, Mode=TwoWay}" 
  Top="{Binding WindowTop, Mode=TwoWay}"
  Width="{Binding WindowWidth, Mode=TwoWay}"
  Height="{Binding WindowHeight, Mode=TwoWay}" 
  ShowInTaskbar="False" 
  WindowStyle="None"
  ResizeMode="{Binding ResizeMode}"
  AllowsTransparency="True"
  WindowStartupLocation="Manual"
  Visibility="{Binding Visibility}" 
  Topmost="{Binding IsTopmost, Mode=OneWay}"
  BorderThickness="{Binding BorderThickness, Mode=OneWay}"
  BorderBrush="{Binding BorderBrush, Mode=OneWay}"
  MinWidth="{Binding MinSize.Width}"
  MinHeight="{Binding MinSize.Height}"
  
  SA:DragTarget.UsingDragTarget="True"
  SA:DragTarget.DragEnterCommand="{Binding DragOverCommand}"
  SA:DragTarget.DragOverCommand="{Binding DragOverCommand}"
  SA:DragTarget.DragDropCommand="{Binding DragDropCommand}"
  
  xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
  mc:Ignorable="d" 
  d:DesignWidth="300" 
  d:DesignHeight="200"
>
  <AW:CommonDataWindow.Resources>
    <ResourceDictionary>
      <ResourceDictionary.MergedDictionaries>
        <SL:CachedResourceDictionary Source="/View/Parts/Resource/ImageDictionary.xaml" />
        <SL:CachedResourceDictionary Source="/View/Parts/Resource/GripDictionary.xaml"/>
        <SL:CachedResourceDictionary Source="/View/Parts/Resource/PopupDictionary.xaml"/>
        <SL:CachedResourceDictionary Source="/View/Parts/Resource/LabelDictionary.xaml"/>
        <SL:CachedResourceDictionary Source="/View/Parts/Resource/TextBlockDictionary.xaml"/>
      </ResourceDictionary.MergedDictionaries>
      <xctk:InverseBoolConverter x:Key="InverseBoolConverter" />
      <SC:LogicalMultiEqualConverter x:Key="LogicalMultiEqualConverter" />
      <BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter" />
      <SC:BooleanFontWeightConverter x:Key="BooleanFontWeightConverter" />
      <SC:BooleanFontStyleConverter x:Key="BooleanFontStyleConverter" />
      <SC:ComplementaryColorConverter x:Key="ComplementaryColorConverter" />

      <AC:DisplayTextConverter x:Key="DisplayTextConverter" />
      <AC:HotTrackConverter x:Key="HotTrackConverter" />
      <AC:DockTypeMenuTuneConverter x:Key="DockTypeMenuTuneConverter" />
      <AC:ToolbarDockTypeImageConverter x:Key="ToolbarDockTypeImageConverter" />

      <Style x:Key="ToolbarImage" TargetType="{x:Type Image}">
        <Setter Property="Source" Value="{Binding ToolbarImage, Mode=OneTime}" />
        <Setter Property="Width" Value="{Binding DataContext.IconWidth, Mode=OneTime, Source={x:Reference root}}" />
        <Setter Property="Height" Value="{Binding DataContext.IconHeight, Mode=OneTime, Source={x:Reference root}}" />
        <Setter Property="Margin" Value="{Binding DataContext.IconMargin, Mode=OneTime, Source={x:Reference root}}" />
      </Style>
      <Style x:Key="ToolbarText" TargetType="TextBlock">
        <Setter Property="Text" Value="{Binding ToolbarText, Mode=OneTime}" />
        <Setter Property="TextTrimming" Value="CharacterEllipsis" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="Width" Value="{Binding DataContext.TextWidth, Mode=OneTime, Source={x:Reference root}}" />
        <!--<Setter Property="Width" Value="80" />-->
        <Setter Property="Visibility" Value="{Binding DataContext.TextVisible, Mode=OneWay, Source={x:Reference root}}" />
        <Setter Property="FontFamily" Value="{Binding DataContext.FontFamily, Mode=OneTime, Source={x:Reference root}}" />
        <Setter Property="FontWeight" Value="{Binding DataContext.FontBold, Converter={StaticResource BooleanFontWeightConverter}, Mode=OneTime, Source={x:Reference root}}" />
        <!--<Setter Property="FontWeight" Value="Bold" />-->
        <Setter Property="FontStyle" Value="{Binding DataContext.FontItalic, Converter={StaticResource BooleanFontStyleConverter}, Mode=OneTime, Source={x:Reference root}}" />
        <Setter Property="FontSize" Value="{Binding DataContext.FontSize, Mode=OneTime, Source={x:Reference root}}" />
        <!--<Setter Property="Foreground" Value="{Binding DataContext.ToolbarForeground, ElementName=root}" />
        <Setter Property="Effect" Value="{Binding DataContext.ToolbarTextEffect, ElementName=root}" />-->
        <Setter Property="Foreground" Value="White" />
        <Setter Property="Effect">
          <Setter.Value>
            <DropShadowEffect Color="Black" BlurRadius="2"  ShadowDepth="0" Opacity="0.9" />
          </Setter.Value>
        </Setter>
      </Style>

      <Style x:Key="ArrowParent" TargetType="Grid">
        <Setter Property="IsHitTestVisible" Value="False" />
        <Setter Property="Margin" Value="4,3,4,3" />
      </Style>
      <Style x:Key="ArrowContent" TargetType="Path">
        <Setter Property="Width" Value="7" />
        <Setter Property="Height" Value="4" />
        <Setter Property="Data" Value="M 0,1 C0,1 0,0 0,0 0,0 3,0 3,0 3,0 3,1 3,1 3,1 4,1 4,1 4,1 4,0 4,0 4,0 7,0 7,0 7,0 7,1 7,1 7,1 6,1 6,1 6,1 6,2 6,2 6,2 5,2 5,2 5,2 5,3 5,3 5,3 4,3 4,3 4,3 4,4 4,4 4,4 3,4 3,4 3,4 3,3 3,3 3,3 2,3 2,3 2,3 2,2 2,2 2,2 1,2 1,2 1,2 1,1 1,1 1,1 0,1 0,1 z" />
        <Setter Property="Fill" Value="#FF000000" />
      </Style>

      <Style x:Key="ToolbarTooltip" TargetType="ToolTip">
        <!--<Setter Property="Placement" Value="{Binding DataContext.DropDownPlacement, Mode=OneWay, ElementName=root}" />-->
        <Setter Property="Placement" Value="{Binding DataContext.DropDownPlacement, Mode=OneWay, Source={x:Reference root}}" />
      </Style>

      <Style x:Key="ToolbarToolTipImage" TargetType="Image" BasedOn="{StaticResource DefaultImage}">
        <Setter Property="Margin" Value="4" />
      </Style>
      <Style x:Key="ToolbarToolTipTitle" TargetType="TextBlock">
        <Setter Property="VerticalAlignment" Value="Center" />
      </Style>

      <Style x:Key="DropDownPopupMenu" TargetType="Popup" BasedOn="{StaticResource MenuPopup}">
        <Setter Property="Placement" Value="{Binding DataContext.DropDownPlacement, Mode=OneWay, ElementName=root}" />
      </Style>

      <Style x:Key="ParentElement" TargetType="Grid">
        <Setter Property="Background" Value="Transparent" />
      </Style>

      <Style x:Key="LauncherBaseButton">
        <Setter Property="Control.Margin" Value="0" />
        <Setter Property="Control.Padding" Value="{Binding DataContext.ButtonPadding, Mode=OneTime, Source={x:Reference root}}" />
        <Setter Property="Control.Width" Value="{Binding DataContext.ButtonWidth, Mode=OneWay, Source={x:Reference root}}" />
        <Setter Property="Control.Height" Value="{Binding DataContext.ButtonHeight, Mode=OneWay, Source={x:Reference root}}" />
      </Style>

      <Style x:Key="LauncherButtonFace" TargetType="Grid" BasedOn="{StaticResource ParentElement}">
        <Setter Property="Background">
          <Setter.Value>
            <LinearGradientBrush>
              <GradientStop Color="#ffffffff"/>
              <GradientStop Color="#88FFFFFF" Offset="0.1"/>
              <GradientStop Color="#11000000" Offset="1"/>
            </LinearGradientBrush>
          </Setter.Value>
        </Setter>
      </Style>

      <sys:Double x:Key="ButtonOver">0.2</sys:Double>
      <sys:Double x:Key="ButtonPressed">0.6</sys:Double>
      <sys:Double x:Key="ButtonCheckd">0.8</sys:Double>

      <ControlTemplate x:Key="LauncherContentButton" TargetType="ButtonBase">
        <Grid x:Name="ParentElement" Style="{StaticResource ParentElement}">
          <ContentPresenter  />
        </Grid>
        <ControlTemplate.Triggers>
          <Trigger Property="IsMouseOver" Value="True" >
            <Setter Property="Background" TargetName="ParentElement">
              <Setter.Value>
                <MultiBinding Converter="{StaticResource HotTrackConverter}">
                  <Binding Path="DataContext.VisualAlphaColor" ElementName="root"  Mode="OneTime" Converter="{StaticResource ComplementaryColorConverter}" />
                  <Binding Path="ToolbarHotTrack" Mode="OneTime" />
                  <Binding Path="DataContext.DockType" ElementName="root" Mode="OneTime" />
                  <Binding Source="{StaticResource ButtonOver}" />
                  <Binding Source="{x:Null}" />
                </MultiBinding>
              </Setter.Value>
            </Setter>
          </Trigger>
          <Trigger Property="ButtonBase.IsPressed" Value="True">
            <Setter Property="Background" TargetName="ParentElement">
              <Setter.Value>
                <MultiBinding Converter="{StaticResource HotTrackConverter}">
                  <Binding Path="DataContext.VisualAlphaColor" ElementName="root"  Mode="OneTime" Converter="{StaticResource ComplementaryColorConverter}" />
                  <Binding Path="ToolbarHotTrack" Mode="OneTime" />
                  <Binding Path="DataContext.DockType" ElementName="root" Mode="OneTime" />
                  <Binding Source="{StaticResource ButtonPressed}" />
                  <Binding Source="{x:Null}" />
                </MultiBinding>
              </Setter.Value>
            </Setter>
          </Trigger>
          <Trigger Property="ToggleButton.IsChecked" Value="True">
            <Setter Property="Background" TargetName="ParentElement">
              <Setter.Value>
                <MultiBinding Converter="{StaticResource HotTrackConverter}">
                  <Binding Path="DataContext.VisualAlphaColor" ElementName="root"  Mode="OneTime" Converter="{StaticResource ComplementaryColorConverter}" />
                  <Binding Path="ToolbarHotTrack" Mode="OneTime" />
                  <Binding Path="DataContext.DockType" ElementName="root" Mode="OneTime" />
                  <Binding Source="{StaticResource ButtonCheckd}" />
                  <Binding Source="{x:Null}" />
                </MultiBinding>
              </Setter.Value>
            </Setter>
          </Trigger>
        </ControlTemplate.Triggers>
      </ControlTemplate>

      <ControlTemplate x:Key="LauncherMenuButton"  TargetType="ToggleButton" >
        <Grid x:Name="ParentElement" Style="{StaticResource ParentElement}">
          <ContentPresenter />
        </Grid>
        <ControlTemplate.Triggers>
          <Trigger Property="IsMouseOver" Value="True" >
            <Setter Property="Background" TargetName="ParentElement">
              <Setter.Value>
                <MultiBinding Converter="{StaticResource HotTrackConverter}">
                  <Binding Path="DataContext.VisualAlphaColor" ElementName="root"  Mode="OneTime" Converter="{StaticResource ComplementaryColorConverter}" />
                  <Binding Path="ToolbarHotTrack" Mode="OneTime" />
                  <Binding Path="DataContext.DockType" ElementName="root" Converter="{StaticResource DockTypeMenuTuneConverter}" Mode="OneTime" />
                  <Binding Source="{StaticResource ButtonOver}" />
                  <Binding Path="DataContext.IsEnabledCorrection" ElementName="root" Mode="OneTime" />
                </MultiBinding>
              </Setter.Value>
            </Setter>
          </Trigger>
          <Trigger Property="ButtonBase.IsPressed" Value="True">
            <Setter Property="Background" TargetName="ParentElement">
              <Setter.Value>
                <MultiBinding Converter="{StaticResource HotTrackConverter}">
                  <Binding Path="DataContext.VisualAlphaColor" ElementName="root" Mode="OneTime" Converter="{StaticResource ComplementaryColorConverter}" />
                  <Binding Path="ToolbarHotTrack" Mode="OneTime" />
                  <Binding Path="DataContext.DockType" ElementName="root" Converter="{StaticResource DockTypeMenuTuneConverter}" Mode="OneTime" />
                  <Binding Source="{StaticResource ButtonPressed}" />
                  <Binding Path="DataContext.IsEnabledCorrection" ElementName="root" Mode="OneTime" />
                </MultiBinding>
              </Setter.Value>
            </Setter>
          </Trigger>
          <Trigger Property="ToggleButton.IsChecked" Value="True">
            <Setter Property="Background" TargetName="ParentElement">
              <Setter.Value>
                <MultiBinding Converter="{StaticResource HotTrackConverter}">
                  <Binding Path="DataContext.VisualAlphaColor" ElementName="root" Mode="OneTime" Converter="{StaticResource ComplementaryColorConverter}" />
                  <Binding Path="ToolbarHotTrack" Mode="OneTime" />
                  <Binding Path="DataContext.DockType" ElementName="root" Converter="{StaticResource DockTypeMenuTuneConverter}" Mode="OneTime" />
                  <Binding Source="{StaticResource ButtonCheckd}" />
                  <Binding Path="DataContext.IsEnabledCorrection" ElementName="root" Mode="OneTime" />
                </MultiBinding>
              </Setter.Value>
            </Setter>
          </Trigger>
        </ControlTemplate.Triggers>
      </ControlTemplate>

      <Style x:Key="LauncherDropDown" TargetType="xctk:DropDownButton" BasedOn="{StaticResource LauncherBaseButton}">
        <Setter Property="IsOpen" Value="{Binding IsMenuOpen, Mode=TwoWay}" />
        <Setter Property="Template">
          <Setter.Value>
            <ControlTemplate TargetType="{x:Type xctk:DropDownButton}">
              <Grid x:Name="MainGrid" SnapsToDevicePixels="True">
                <ToggleButton 
                  x:Name="PART_DropDownButton"
                  Grid.Column="{Binding DataContext.PositionContentButton, ElementName=root}"
                  IsTabStop="False"
                  Focusable="false"
                  IsChecked="{Binding IsOpen, RelativeSource={RelativeSource TemplatedParent}, Mode=TwoWay}"
                  IsHitTestVisible="{Binding IsOpen, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource InverseBoolConverter}}"
                  Template="{StaticResource LauncherContentButton}"
                >
                  <Grid Style="{StaticResource LauncherButtonFace}">
                    <Grid.ColumnDefinitions>
                      <ColumnDefinition Width="{Binding DataContext.FirstWidth, ElementName=root}" />
                      <ColumnDefinition Width="{Binding DataContext.SecondWidth, ElementName=root}" />
                    </Grid.ColumnDefinitions>
                    <ContentPresenter
                      Name="ActionButtonContent"
                      Margin="{TemplateBinding Padding}"
                      Content="{TemplateBinding Content}"
                      ContentTemplate="{TemplateBinding ContentTemplate}"
                      VerticalAlignment="Stretch"
                      HorizontalAlignment="Stretch"
                      RecognizesAccessKey="true"
                      Grid.Column="{Binding DataContext.PositionContentButton, ElementName=root}"
                    />
                    <Grid x:Name="arrowGlyph" Grid.Column="{Binding DataContext.PositionMenuButton, ElementName=root}" Style="{StaticResource ArrowParent}" Visibility="{Binding DataContext.IsVisibleMenu, ElementName=root, Mode=OneTime, Converter={StaticResource BooleanToVisibilityConverter}}">
                      <Path Style="{StaticResource ArrowContent}" />
                    </Grid>
                  </Grid>
                </ToggleButton>
                <!-- MENU -->
                <Popup 
                  x:Name="PART_Popup" 
                  Style="{StaticResource DropDownPopupMenu}"
                  IsOpen="{TemplateBinding IsOpen}"
                  Opened="PART_Popup_Opened"
                >
                  <Border Style="{StaticResource MenuPopupBorder}">
                    <ContentPresenter Content="{TemplateBinding DropDownContent}" />
                  </Border>
                </Popup>
              </Grid>
            </ControlTemplate>
          </Setter.Value>
        </Setter>
      </Style>

      <Style x:Key="LauncherSplit" TargetType="xctk:SplitButton" BasedOn="{StaticResource LauncherBaseButton}">
        <Setter Property="IsOpen" Value="{Binding IsMenuOpen, Mode=TwoWay}" />
        <Setter Property="Template">
          <Setter.Value>
            <ControlTemplate TargetType="{x:Type xctk:SplitButton}">
              <Grid x:Name="MainGrid" SnapsToDevicePixels="True">
                <Button
                  x:Name="PART_ActionButton"
                  Grid.Column="0"
                  IsTabStop="False"
                  Focusable="False"
                  Margin="{TemplateBinding Margin}"
                  HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                  VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                  Padding="{TemplateBinding Padding}"
                  IsHitTestVisible="{Binding IsOpen, RelativeSource={RelativeSource AncestorType=xctk:SplitButton}, Converter={StaticResource InverseBoolConverter}}"
                  Template="{StaticResource LauncherContentButton}"
                >
                  <Grid x:Name="ParentElement" Style="{StaticResource LauncherButtonFace}">
                    <Grid.ColumnDefinitions>
                      <ColumnDefinition Width="{Binding DataContext.FirstWidth, ElementName=root}" />
                      <ColumnDefinition Width="{Binding DataContext.SecondWidth, ElementName=root}" />
                    </Grid.ColumnDefinitions>
                    <ContentPresenter
                      Name="ActionButtonContent"
                      Grid.Column="{Binding DataContext.PositionContentButton, ElementName=root}"
                      Margin="{TemplateBinding Padding}"
                      Content="{TemplateBinding Content}"
                      ContentTemplate="{TemplateBinding ContentTemplate}"
                      VerticalAlignment="Stretch"
                      HorizontalAlignment="Stretch"
                      RecognizesAccessKey="true"
                    />
                    <ToggleButton 
                      x:Name="PART_ToggleButton"
                      Grid.Column="{Binding DataContext.PositionMenuButton, ElementName=root}"
                      IsTabStop="False"
                      Focusable="False"
                      IsChecked="{Binding IsOpen, RelativeSource={RelativeSource AncestorType=xctk:SplitButton}, Mode=TwoWay}"
                      IsHitTestVisible="{Binding IsOpen, RelativeSource={RelativeSource AncestorType=xctk:SplitButton}, Converter={StaticResource InverseBoolConverter}}"
                      Template="{StaticResource LauncherMenuButton}"
                      MouseDown="PART_ToggleButton_MouseDown"
                      Click="PART_ToggleButton_Click"
                      Visibility="{Binding DataContext.IsVisibleMenu, ElementName=root, Mode=OneTime, Converter={StaticResource BooleanToVisibilityConverter}}"
                    >
                      <Grid x:Name="arrowGlyph" Style="{StaticResource ArrowParent}">
                        <Path Style="{StaticResource ArrowContent}" />
                      </Grid>
                    </ToggleButton>
                  </Grid>
                </Button>
                <!-- MENU -->
                <Popup 
                  x:Name="PART_Popup"
                  Style="{StaticResource DropDownPopupMenu}"
                  IsOpen="{TemplateBinding IsOpen}"
                  Opened="PART_Popup_Opened"
                >
                  <Border Style="{StaticResource MenuPopupBorder}">
                    <ContentPresenter Content="{Binding DropDownContent,RelativeSource={RelativeSource AncestorType=xctk:SplitButton}}" />
                  </Border>
                </Popup>
              </Grid>
            </ControlTemplate>
          </Setter.Value>
        </Setter>
      </Style>


      <!--メニューを閉じる用-->
      <Style x:Key="PopupClose">
        <EventSetter  Event="Button.Click"   Handler="Element_Click" />
        <EventSetter  Event="MenuItem.Click" Handler="Element_Click" />
      </Style>

      <Style x:Key="PopupCloseMenu" TargetType="MenuItem" BasedOn="{StaticResource PopupClose}">
        <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
        <Setter Property="VerticalContentAlignment" Value="Stretch"/>
      </Style>

      <Image 
        x:Key="LauncherToolbarItemImage"
        x:Shared="false" 
        Width="16" 
        Height="16" 
        Source="{Binding MenuImage}" 
      >
        <Image.Style>
          <Style TargetType="Image" BasedOn="{StaticResource DefaultImage}">
            <Style.Triggers>
              <DataTrigger Binding="{Binding LauncherToolbarMenuItemType}" Value="GroupItem">
                <Setter Property="AA:MenuIcon.IsStrong" Value="{Binding IsChecked}" />
              </DataTrigger>
            </Style.Triggers>
          </Style>
        </Image.Style>
      </Image>

      <Style x:Key="LauncherMenuItem" TargetType="MenuItem" BasedOn="{StaticResource PopupCloseMenu}">
        <Style.Triggers>
          <DataTrigger Binding="{Binding LauncherToolbarMenuItemType}" Value="LauncherItem">
            <Setter Property="Grid.Column" Value="1" />
            <Setter Property="Command" Value="{Binding RunCommand}" />
          </DataTrigger>
          <DataTrigger Binding="{Binding LauncherToolbarMenuItemType}" Value="GroupItem">
            <Setter Property="Grid.Column" Value="0" />
            <Setter Property="Command" Value="{Binding DataContext.GroupChangeCommand, Source={x:Reference root}}" />
            <Setter Property="FontWeight" Value="{Binding IsChecked, Converter={StaticResource BooleanFontWeightConverter}}" />
          </DataTrigger>
        </Style.Triggers>
        <Setter Property="Grid.Row" Value="{Binding RowIndex}" />
        <Setter Property="Header" Value="{Binding DisplayText}" />
        <Setter Property="CommandParameter" Value="{Binding}" />
        <Setter Property="Icon" Value="{StaticResource LauncherToolbarItemImage}" />
      </Style>

      <CollectionViewSource x:Key="ContextGroupItems" Source="{Binding GroupItems}" />
      <CollectionViewSource x:Key="ContextHiddenItems" Source="{Binding HiddenLauncherItems}" />
      
    </ResourceDictionary>
  </AW:CommonDataWindow.Resources>

  <AW:CommonDataWindow.ContextMenu>
    <ContextMenu>
      <ContextMenu.ItemContainerStyle>
        <Style TargetType="MenuItem" BasedOn="{StaticResource LauncherMenuItem}" />
      </ContextMenu.ItemContainerStyle>
      <ContextMenu.ItemsPanel>
        <ItemsPanelTemplate>
          <Grid>
            <Grid.RowDefinitions>
            </Grid.RowDefinitions>
            <Grid.ColumnDefinitions>
              <ColumnDefinition />
              <ColumnDefinition />
            </Grid.ColumnDefinitions>
          </Grid>
        </ItemsPanelTemplate>
      </ContextMenu.ItemsPanel>
      <ContextMenu.ItemsSource>
        <CompositeCollection>
          <CollectionContainer Collection="{Binding Source={StaticResource ContextGroupItems}}" />
          <CollectionContainer Collection="{Binding Source={StaticResource ContextHiddenItems}}" />
        </CompositeCollection>
      </ContextMenu.ItemsSource>
    </ContextMenu>
  </AW:CommonDataWindow.ContextMenu>

  <DockPanel Visibility="{Binding ToolbarContentVisibility}">
    <Rectangle
      DockPanel.Dock="{Binding GripDock}"
      AllowDrop="False"
      Width="{Binding CaptionWidth, Mode=OneWay}" 
      Height="{Binding CaptionHeight, Mode=OneWay}" 
      Visibility="{Binding CaptionVisibility}" 
      Style="{StaticResource DefaultGrip}"
    />

    <Grid HorizontalAlignment="{Binding ToolbarButtonHorizontalAlignment}" VerticalAlignment="{Binding ToolbarButtonVerticalAlignment}">
      <StackPanel Orientation="{Binding ToolbarButtonOrientation}">
        <!-- メインボタン -->
        <xctk:DropDownButton AllowDrop="False" Style="{StaticResource LauncherDropDown}">
          <xctk:DropDownButton.Content>
            <StackPanel Orientation="Horizontal">
              <Image Style="{StaticResource ToolbarImage}"/>
              <TextBlock Style="{StaticResource ToolbarText}" />
            </StackPanel>
          </xctk:DropDownButton.Content>
          <xctk:DropDownButton.DropDownContent>
            <StackPanel>
              <Label Content="toolbar pos" AA:Language.Word="toolbar/position" Style="{StaticResource TitleLabel}" />
              <Grid>
                <Grid.Resources>
                  <Style x:Key="PopupClose" TargetType="Button" BasedOn="{StaticResource PopupClose}">
                    <Setter Property="Command" Value="{Binding PositionChangeCommand}" />
                    <Setter Property="Margin" Value="2" />
                    <Setter Property="Content" Value="{Binding CommandParameter, RelativeSource={RelativeSource Self}, Converter={StaticResource ToolbarDockTypeImageConverter}}" />
                  </Style>
                </Grid.Resources>
                <Grid.ColumnDefinitions>
                  <ColumnDefinition />
                  <ColumnDefinition />
                  <ColumnDefinition />
                </Grid.ColumnDefinitions>
                <Grid.RowDefinitions>
                  <RowDefinition />
                  <RowDefinition />
                  <RowDefinition />
                </Grid.RowDefinitions>
                <Button Grid.Row="0" Grid.Column="1" CommandParameter="{x:Static SD:DockType.Top}"    Style="{StaticResource PopupClose}" />
                <Button Grid.Row="1" Grid.Column="0" CommandParameter="{x:Static SD:DockType.Left}"   Style="{StaticResource PopupClose}" />
                <Button Grid.Row="1" Grid.Column="1" CommandParameter="{x:Static SD:DockType.None}"   Style="{StaticResource PopupClose}" />
                <Button Grid.Row="1" Grid.Column="2" CommandParameter="{x:Static SD:DockType.Right}"  Style="{StaticResource PopupClose}" />
                <Button Grid.Row="2" Grid.Column="1" CommandParameter="{x:Static SD:DockType.Bottom}" Style="{StaticResource PopupClose}" />
              </Grid>
              <Separator />
              <MenuItem Header="topmost" AA:Language.Word="toolbar/topmost" Style="{StaticResource PopupCloseMenu}" IsChecked="{Binding IsTopmost}" Command="{Binding SwitchTopMostCommand}"  />
              <MenuItem Header="auto hide" AA:Language.Word="toolbar/autohide" Style="{StaticResource PopupCloseMenu}" IsChecked="{Binding AutoHide}" Command="{Binding SwitchAutoHideCommand}"/>
              <Separator />
              <MenuItem Header="hide" AA:Language.Word="toolbar/hide" Style="{StaticResource PopupCloseMenu}" Command="{Binding ChangeVisibleCommand}" >
                <MenuItem.CommandParameter>
                  <sys:Boolean>false</sys:Boolean>
                </MenuItem.CommandParameter>
              </MenuItem>
              <Separator />
              <ItemsControl ItemsSource="{Binding GroupItems, Mode=OneWay}">
                <ItemsControl.ItemTemplate>
                  <DataTemplate>
                    <MenuItem Style="{StaticResource LauncherMenuItem}" />
                  </DataTemplate>
                </ItemsControl.ItemTemplate>
              </ItemsControl>
            </StackPanel>
          </xctk:DropDownButton.DropDownContent>
          <xctk:DropDownButton.ToolTip>
            <ToolTip Style="{StaticResource ToolbarTooltip}">
              <StackPanel Orientation="Horizontal">
                <Image Source="{x:Static AM:AppResource.ApplicationIconNormal}" Style="{StaticResource ToolbarToolTipImage}" />
                <TextBlock Text="{Binding ToolTipTitle}" Style="{StaticResource ToolbarToolTipTitle}" />
              </StackPanel>
            </ToolTip>
          </xctk:DropDownButton.ToolTip>
        </xctk:DropDownButton>
        
        <!-- ランチャーアイテム一覧 -->
        <ItemsControl ItemsSource="{Binding LauncherItems, Mode=OneWay}" IsTabStop="False">
          <ItemsControl.ItemsPanel>
            <ItemsPanelTemplate>
              <StackPanel Orientation="{Binding ToolbarButtonOrientation, Mode=OneWay}" />
            </ItemsPanelTemplate>
          </ItemsControl.ItemsPanel>
          <ItemsControl.ItemTemplate>
            <DataTemplate>
              <ContentControl
                SA:DragTarget.UsingDragTarget="True"
                SA:DragTarget.DragEnterCommand="{Binding DragOverCommand}"
                SA:DragTarget.DragOverCommand="{Binding DragOverCommand}"
                SA:DragTarget.DragDropCommand="{Binding DragDropCommand}"
                MouseDown="LauncherButton_MouseDown"
                MouseUp="LauncherButton_MouseUp"
              >
                <ContentControl.ToolTip>
                  <ToolTip Style="{StaticResource ToolbarTooltip}">
                    <StackPanel>
                      <StackPanel Orientation="Horizontal">
                        <Image Source="{Binding ToolTipImage, Mode=OneTime}" Style="{StaticResource ToolbarToolTipImage}" />
                        <TextBlock Text="{Binding ToolTipTitle, Mode=OneTime}" Style="{StaticResource ToolbarToolTipTitle}" FontFamily="{DynamicResource {x:Static SystemFonts.CaptionFontFamilyKey}}" />
                      </StackPanel>
                      <StackPanel Orientation="Horizontal" Visibility="{Binding HasToolTipMessage, Converter={StaticResource BooleanToVisibilityConverter}}">
                        <TextBlock Text="{Binding ToolTipMessage, Mode=OneTime}" FontFamily="{DynamicResource {x:Static SystemFonts.SmallCaptionFontFamilyKey}}" />
                      </StackPanel>
                    </StackPanel>
                  </ToolTip>
                </ContentControl.ToolTip>
                <ContentControl.Style>
                  <Style TargetType="ContentControl">
                    <Style.Triggers>
                      <!-- ファイル -->
                      <DataTrigger Binding="{Binding LauncherKind, Mode=OneTime}" Value="{x:Static ADD:LauncherKind.File}">
                        <Setter Property="Content">
                          <Setter.Value>
                            <xctk:SplitButton Style="{StaticResource LauncherSplit}" Command="{Binding RunCommand, Mode=OneTime}">
                              <i:Interaction.Triggers>
                                <i:EventTrigger EventName="Opened">
                                  <i:InvokeCommandAction Command="{Binding OpenDropDownCommand, Mode=OneTime}" />
                                </i:EventTrigger>
                              </i:Interaction.Triggers>
                              <xctk:SplitButton.Content>
                                <StackPanel Orientation="Horizontal">
                                  <Image Style="{StaticResource ToolbarImage}"/>
                                  <TextBlock Style="{StaticResource ToolbarText}" />
                                </StackPanel>
                              </xctk:SplitButton.Content>
                              <xctk:SplitButton.DropDownContent>
                                <Grid>
                                  <Grid.RowDefinitions>
                                    <RowDefinition />
                                    <RowDefinition />

                                    <RowDefinition />

                                    <RowDefinition />
                                    <RowDefinition />

                                    <RowDefinition />

                                    <RowDefinition />
                                    <RowDefinition />

                                    <RowDefinition />

                                    <RowDefinition />
                                    <RowDefinition />
                                  </Grid.RowDefinitions>
                                  <Grid.ColumnDefinitions>
                                    <ColumnDefinition />
                                    <ColumnDefinition />
                                    <ColumnDefinition />
                                  </Grid.ColumnDefinitions>
                                  <Label Grid.Row="0" Grid.Column="0" Grid.ColumnSpan="3" Style="{StaticResource TitleLabel}">
                                    <StackPanel Orientation="Horizontal">
                                      <Image Source="{x:Static AM:AppResource.CommonRunImage}" Style="{StaticResource ItemImage}" />
                                      <TextBlock Style="{StaticResource ItemText}" Text="execute" AA:Language.Word="toolbar/execute" />
                                    </StackPanel>
                                  </Label>
                                  <Button Grid.Row="1" Grid.Column="0" Content="normal" AA:Language.Word="toolbar/execute/normal" IsEnabled="{Binding ExistsCommand}" Command="{Binding RunCommand, Mode=OneTime}" Style="{StaticResource PopupClose}" />
                                  <Button Grid.Row="1" Grid.Column="1" Content="extra"  AA:Language.Word="toolbar/execute/extra"  IsEnabled="{Binding ExistsCommand}" Command="{Binding RunExCommand, Mode=OneTime}" Style="{StaticResource PopupClose}" />

                                  <Separator Grid.Row="2" Grid.Column="0" Grid.ColumnSpan="3" />

                                  <Label Grid.Row="3" Grid.Column="0" Grid.ColumnSpan="2" Style="{StaticResource TitleLabel}">
                                    <StackPanel Orientation="Horizontal">
                                      <Image Source="{x:Static AM:AppResource.CommonFileImage}" Style="{StaticResource ItemImage}" />
                                      <TextBlock Style="{StaticResource ItemText}" Text="file" AA:Language.Word="toolbar/file" />
                                    </StackPanel>
                                  </Label>
                                  <Button Grid.Row="4" Grid.Column="0" Content="parent dir" AA:Language.Word="toolbar/file/parent-dir" IsEnabled="{Binding ExistsParentDirectory}" Command="{Binding OpenDirectoryCommand, Mode=OneTime}" CommandParameter="{x:Static ADD:LauncherCommandType.ParentDirectory}" Style="{StaticResource PopupClose}" />
                                  <Button Grid.Row="4" Grid.Column="1" Content="work dir"   AA:Language.Word="toolbar/file/work-dir"   IsEnabled="{Binding ExistsWorkDirectory}" Command="{Binding OpenDirectoryCommand, Mode=OneTime}" CommandParameter="{x:Static ADD:LauncherCommandType.WorkDirectory}" Style="{StaticResource PopupClose}" />

                                  <Separator Grid.Row="5" Grid.Column="0" Grid.ColumnSpan="3" />

                                  <Label Grid.Row="6" Grid.Column="0" Grid.ColumnSpan="3" Style="{StaticResource TitleLabel}">
                                    <StackPanel Orientation="Horizontal">
                                      <Image Source="{x:Static AM:AppResource.CommonCopyImage}" Style="{StaticResource ItemImage}" />
                                      <TextBlock Style="{StaticResource ItemText}" Text="clipboard" AA:Language.Word="toolbar/clipboard" />
                                    </StackPanel>
                                  </Label>
                                  <Button Grid.Row="7" Grid.Column="0" Content="command"    AA:Language.Word="toolbar/clipboard/command"    IsEnabled="{Binding HasDataCommand}" Command="{Binding CopyTextCommand, Mode=OneTime}" CommandParameter="{x:Static ADD:LauncherCommandType.Command}" Style="{StaticResource PopupClose}" />
                                  <Button Grid.Row="7" Grid.Column="1" Content="parent dir" AA:Language.Word="toolbar/clipboard/parent-dir" IsEnabled="{Binding HasDataParentDirectory}" Command="{Binding CopyTextCommand, Mode=OneTime}" CommandParameter="{x:Static ADD:LauncherCommandType.ParentDirectory}" Style="{StaticResource PopupClose}" />
                                  <Button Grid.Row="7" Grid.Column="2" Content="work dir"   AA:Language.Word="toolbar/clipboard/work-dir"   IsEnabled="{Binding HasDataWorkDirectory}" Command="{Binding CopyTextCommand, Mode=OneTime}" CommandParameter="{x:Static ADD:LauncherCommandType.WorkDirectory}" Style="{StaticResource PopupClose}" />

                                  <Separator Grid.Row="8" Grid.Column="0" Grid.ColumnSpan="3" />

                                  <Label Grid.Row="9" Grid.Column="0" Grid.ColumnSpan="3" Style="{StaticResource TitleLabel}">
                                    <StackPanel Orientation="Horizontal">
                                      <Image Source="{x:Static AM:AppResource.CommonOthersImage}" Style="{StaticResource ItemImage}" />
                                      <TextBlock Style="{StaticResource ItemText}" Text="others" AA:Language.Word="toolbar/others" />
                                    </StackPanel>
                                  </Label>
                                  <Button Grid.Row="10" Grid.Column="0" Content="customize" AA:Language.Word="toolbar/others/customize" Style="{StaticResource PopupClose}" Command="{Binding OpenCustomizeCommand, Mode=OneTime}" />
                                  <Button Grid.Row="10" Grid.Column="1" Content="property"  AA:Language.Word="toolbar/others/property"  IsEnabled="{Binding ExistsCommand}" Command="{Binding OpenPropertyCommand, Mode=OneTime}" Style="{StaticResource PopupClose}" />
                                  <ACC:LockedButton Grid.Row="10" Grid.Column="2" Content="remove" AA:Language.Word="toolbar/others/remove" Command="{Binding DataContext.RemoveItemCommand, Source={x:Reference root}}"  CommandParameter="{Binding}"  />
                                </Grid>
                              </xctk:SplitButton.DropDownContent>
                            </xctk:SplitButton>
                          </Setter.Value>
                        </Setter>
                      </DataTrigger>

                      <!-- コマンド -->
                      <DataTrigger Binding="{Binding LauncherKind, Mode=OneTime}" Value="{x:Static ADD:LauncherKind.Command}">
                        <Setter Property="Content">
                          <Setter.Value>
                            <xctk:SplitButton Visibility="{Binding VisibilityCommand, Mode=OneWay}" Style="{StaticResource LauncherSplit}"  Command="{Binding RunCommand, Mode=OneTime}" >
                              <i:Interaction.Triggers>
                                <i:EventTrigger EventName="Opened">
                                  <i:InvokeCommandAction Command="{Binding OpenDropDownCommand, Mode=OneTime}"></i:InvokeCommandAction>
                                </i:EventTrigger>
                              </i:Interaction.Triggers>
                              <xctk:SplitButton.Content>
                                <StackPanel Orientation="Horizontal">
                                  <Image Style="{StaticResource ToolbarImage}"/>
                                  <TextBlock Style="{StaticResource ToolbarText}" />
                                </StackPanel>
                              </xctk:SplitButton.Content>
                              <xctk:SplitButton.DropDownContent>
                                <Grid>
                                  <Grid.RowDefinitions>
                                    <RowDefinition />
                                    <RowDefinition />

                                    <RowDefinition />

                                    <RowDefinition />
                                    <RowDefinition />
                                    
                                    <RowDefinition />

                                    <RowDefinition />
                                    <RowDefinition />

                                    <RowDefinition />

                                    <RowDefinition />
                                    <RowDefinition />
                                  </Grid.RowDefinitions>
                                  <Grid.ColumnDefinitions>
                                    <ColumnDefinition />
                                    <ColumnDefinition />
                                  </Grid.ColumnDefinitions>

                                  <Label Grid.Row="0" Grid.Column="0" Grid.ColumnSpan="2" Style="{StaticResource TitleLabel}">
                                    <StackPanel Orientation="Horizontal">
                                      <Image Source="{x:Static AM:AppResource.CommonRunImage}" Style="{StaticResource ItemImage}" />
                                      <TextBlock Style="{StaticResource ItemText}" Text="execute" AA:Language.Word="toolbar/execute" />
                                    </StackPanel>
                                  </Label>
                                  <Button Grid.Row="1" Grid.Column="0" Content="normal" AA:Language.Word="toolbar/execute/normal" IsEnabled="{Binding HasDataCommand}" Command="{Binding RunCommand, Mode=OneTime}" Style="{StaticResource PopupClose}" />
                                  <Button Grid.Row="1" Grid.Column="1" Content="extra"  AA:Language.Word="toolbar/execute/extra"  IsEnabled="{Binding HasDataCommand}" Command="{Binding RunExCommand, Mode=OneTime}" Style="{StaticResource PopupClose}" />

                                  <Separator Grid.Row="2" Grid.ColumnSpan="2"/>

                                  <Label Grid.Row="3" Grid.Column="0" Grid.ColumnSpan="2" Style="{StaticResource TitleLabel}">
                                    <StackPanel Orientation="Horizontal">
                                      <Image Source="{x:Static AM:AppResource.CommonFileImage}" Style="{StaticResource ItemImage}" />
                                      <TextBlock Style="{StaticResource ItemText}" Text="file" AA:Language.Word="toolbar/file" />
                                    </StackPanel>
                                  </Label>
                                  <Button Grid.Row="4" Grid.Column="0" Content="work dir"   AA:Language.Word="toolbar/file/work-dir"   IsEnabled="{Binding ExistsWorkDirectory}" Command="{Binding OpenDirectoryCommand, Mode=OneTime}" CommandParameter="{x:Static ADD:LauncherCommandType.WorkDirectory}" Style="{StaticResource PopupClose}" />

                                  <Separator Grid.Row="5" Grid.ColumnSpan="2"/>

                                  <Label Grid.Row="6" Grid.Column="0" Grid.ColumnSpan="2" Style="{StaticResource TitleLabel}">
                                    <StackPanel Orientation="Horizontal">
                                      <Image Source="{x:Static AM:AppResource.CommonCopyImage}" Style="{StaticResource ItemImage}" />
                                      <TextBlock Style="{StaticResource ItemText}" Text="clipboard" AA:Language.Word="toolbar/clipboard" />
                                    </StackPanel>
                                  </Label>
                                  <Button Grid.Row="7" Grid.Column="0" Content="command" AA:Language.Word="toolbar/clipboard/command" IsEnabled="{Binding HasDataCommand}" Command="{Binding CopyTextCommand, Mode=OneTime}" CommandParameter="{x:Static ADD:LauncherCommandType.Command}" Style="{StaticResource PopupClose}" />
                                  <Button Grid.Row="7" Grid.Column="1" Content="work dir"   AA:Language.Word="toolbar/clipboard/work-dir"   IsEnabled="{Binding HasDataWorkDirectory}" Command="{Binding CopyTextCommand, Mode=OneTime}" CommandParameter="{x:Static ADD:LauncherCommandType.WorkDirectory}" Style="{StaticResource PopupClose}" />

                                  <Separator Grid.Row="8" Grid.ColumnSpan="2"/>

                                  <Label Grid.Row="9" Grid.Column="0" Grid.ColumnSpan="2" Style="{StaticResource TitleLabel}">
                                    <StackPanel Orientation="Horizontal">
                                      <Image Source="{x:Static AM:AppResource.CommonOthersImage}" Style="{StaticResource ItemImage}" />
                                      <TextBlock Style="{StaticResource ItemText}" Text="others" AA:Language.Word="toolbar/others" />
                                    </StackPanel>
                                  </Label>
                                  <Button Grid.Row="10" Grid.Column="0" Content="customize" AA:Language.Word="toolbar/others/customize" Style="{StaticResource PopupClose}" Command="{Binding OpenCustomizeCommand, Mode=OneTime}" />
                                  <ACC:LockedButton Grid.Row="10" Grid.Column="1" Content="remove" AA:Language.Word="toolbar/others/remove" Command="{Binding DataContext.RemoveItemCommand, Source={x:Reference root}}"  CommandParameter="{Binding}"  />
                                </Grid>
                              </xctk:SplitButton.DropDownContent>
                            </xctk:SplitButton>
                          </Setter.Value>
                        </Setter>
                      </DataTrigger>
                    </Style.Triggers>
                  </Style>
                </ContentControl.Style>
              </ContentControl>
            </DataTemplate>
          </ItemsControl.ItemTemplate>
        </ItemsControl>
      </StackPanel>
    </Grid>
  </DockPanel>


</AW:ViewModelCommonDataWindow>
