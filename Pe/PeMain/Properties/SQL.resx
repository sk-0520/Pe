<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="CheckTable" xml:space="preserve">
    <value>select
    count(*) NUM
from
    SQLITE_MASTER
where
    NAME = :table_name
    and
    TYPE = 'table'
</value>
  </data>
  <data name="CreateVersionMasterTable" xml:space="preserve">
    <value>create table M_VERSION
(
    NAME     text primary key,
    VERSION  integer not null
)
</value>
  </data>
  <data name="CreateNoteMasterTable" xml:space="preserve">
    <value>create table M_NOTE (
    NOTE_ID      integer  primary key,
    CMN_ENABLED  integer  not null,
    CMN_CREATE   text     not null,
    CMN_UPDATE   text     not null,
    NOTE_TITLE   text,
    NOTE_TYPE    integer  not null
)</value>
  </data>
  <data name="CreateNoteTransactionTable" xml:space="preserve">
    <value>create table T_NOTE (
    NOTE_ID      integer  primary key,
    CMN_CREATE   text     not null,
    CMN_UPDATE   text     not null,
    NOTE_BODY    text
)</value>
  </data>
  <data name="CreateNoteStyleTransactionTable" xml:space="preserve">
    <value>create table T_NOTE_STYLE (
    NOTE_ID         integer  primary key,
    CMN_CREATE      text     not null,
    CMN_UPDATE      text     not null,
    FONT_FAMILY     text     not null,
    FONT_SIZE       real     not null,
    FONT_ITALIC     integer  not null,
    FONT_BOLD       integer  not null,
    COLOR_FORE      text     not null,
    COLOR_BACK      text     not null,
    WINDOW_VISIBLED integer  not null,
    WINDOW_LOCKED   integer  not null,
    WINDOW_TOPMOST  integer  not null,
    WINDOW_COMPACT  integer  not null,
    WINDOW_POS_X    integer  not null,
    WINDOW_POS_Y    integer  not null,
    WINDOW_SIZE_W   integer  not null,
    WINDOW_SIZE_H   integer  not null
)
</value>
  </data>
  <data name="GetId" xml:space="preserve">
    <value>select
    coalesce(max({id_column_name}), 0) MAX_ID,
    coalesce(min({id_column_name}), 0) MIN_ID
from
    {table_name}
</value>
  </data>
  <data name="GetNoteItemList" xml:space="preserve">
    <value>select
	CMN_ENABLED,
	NOTE_ID,
	NOTE_TITLE,
	NOTE_TYPE,
	NOTE_BODY,
	WINDOW_VISIBLED,
	WINDOW_LOCKED,
	WINDOW_TOPMOST,
	WINDOW_COMPACT,
	WINDOW_POS_X,
	WINDOW_POS_Y,
	WINDOW_SIZE_W,
	WINDOW_SIZE_H,
	FONT_FAMILY,
	FONT_SIZE,
	FONT_ITALIC,
	FONT_BOLD,
	COLOR_FORE,
	COLOR_BACK
from
	M_NOTE
	inner join T_NOTE using(NOTE_ID)
	inner join T_NOTE_STYLE using(NOTE_ID)
order by
	M_NOTE.CMN_CREATE

</value>
  </data>
</root>