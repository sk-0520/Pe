<#@ template debug="true" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Reflection" #>
<#@ assembly name="$(TargetPath)" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="ContentTypeTextNet.Pe.PeMain" #>
<#@ output extension=".cs" #>
namespace ContentTypeTextNet.Pe.PeMain
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Text;
    using System.Threading.Tasks;
    using System.Windows.Media.Imaging;
    using ContentTypeTextNet.Library.SharedLibrary.CompatibleForms.Utility;
    using ContentTypeTextNet.Library.SharedLibrary.CompatibleWindows;
    using ContentTypeTextNet.Library.SharedLibrary.Define;
    using ContentTypeTextNet.Library.SharedLibrary.IF;
    using ContentTypeTextNet.Library.SharedLibrary.Logic;
    using ContentTypeTextNet.Library.SharedLibrary.Logic.Extension;
    using ContentTypeTextNet.Library.SharedLibrary.Model;
    using ContentTypeTextNet.Pe.PeMain.Logic;
    using ContentTypeTextNet.Pe.PeMain.Logic.Utility;

    partial class AppResource
    {
<#
var type = typeof(AppResource);
var fieldInfos = type.GetFields(BindingFlags.Static | BindingFlags.NonPublic | BindingFlags.Public);
var usingFieldInfos = fieldInfos
    .Select(fi => new { FieldInfo = fi, Attribute = fi.GetCustomAttribute(typeof(AppResourceAttribute), true) as AppResourceAttribute })
    .Where(fa => fa.Attribute != null)
    .ToArray()
;
#>
        /*
        このソースは自動生成のため AppResource-generator.tt を編集すること。

        生成元フィールド数: <#= usingFieldInfos.Length #>
        */
<#
foreach(var fa in usingFieldInfos) {
    var baseName = fa.FieldInfo.Name.ToUpperInvariant()[0] + fa.FieldInfo.Name.Substring(1);
    var pathName = baseName + "Path";
#>
        #region <#= fa.Attribute.AppResourceType #>: <#= baseName #>

        /// <summary>
        /// [<#= fa.Attribute.AppResourceType #>] <#= baseName #>のリソースパスを取得。
        /// <para><#= fa.FieldInfo.GetValue(null) #></para>
        /// </summary>
        public static string <#= pathName #>
        {
            get { return <#= fa.FieldInfo.Name #>; }
        }

<# 
    switch(fa.Attribute.AppResourceType) {
        case AppResourceType.Image:
#>
        /// <summary>
        /// [<#= fa.Attribute.AppResourceType #>] <#= baseName #>のイメージソースを取得。
        /// <para>初回のみ生成を行う。</para>
        /// <para><#= pathName #>: <#= fa.FieldInfo.GetValue(null) #></para>
        /// </summary>
        /// <returns>イメージソース。AppResourceで管理されるためユーザーコードで操作はしないこと。</returns>
        public static BitmapSource <#= baseName #>Image
        {
            get { return GetImage(<#= pathName #>); }
        }
<#
            break;
                
        case AppResourceType.Icon:
            var getIconMethodName = "Get" + baseName + "Icon";
#>
        /// <summary>
        /// [<#= fa.Attribute.AppResourceType #>] <#= baseName #>のイメージソースを取得。
        /// <para>初回のみ生成を行う。</para>
        /// <para><#= pathName #>: <#= fa.FieldInfo.GetValue(null) #></para>
        /// </summary>
        /// <param name="iconScale">アイコンサイズ</param>
        /// <param name="logger">ログ。不要であれば null を指定(するか引数を与えない)。</param>
        /// <returns>イメージソース。AppResourceで管理されるためユーザーコードで操作はしないこと。</returns>
        public static BitmapSource <#= getIconMethodName #>(IconScale iconScale, ILogger logger = null)
        {
            return GetIcon(<#= pathName #>, iconScale, logger);
        }

        #region IconScale

<#
            var iconScaleList = new [] { "Small", "Normal", "Big", "Large", };
            foreach(var iconScale in iconScaleList) {
#>
        /// <summary>
        /// [<#= fa.Attribute.AppResourceType #>] <#= baseName #>のイメージソース(IconScale.<#= iconScale #>)を取得。
        /// <para>内部的には<#= getIconMethodName #>(IconScale, ILogger)の呼び出しを行う。</para>
        /// <para><#= pathName #>: <#= fa.FieldInfo.GetValue(null) #></para>
        /// </summary>
        /// <returns>イメージソース。AppResourceで管理されるためユーザーコードで操作はしないこと。</returns>
        public static BitmapSource <#= baseName #>Icon<#= iconScale #>
        {
            get
            {
                return <#= getIconMethodName #>(IconScale.<#= iconScale #>);
            }
        }
<#
            }
#>

        #endregion IconScale

<#
            break;

        default:
            throw new NotImplementedException();
    }
#>
        #endregion <#= baseName #>
<#
}
#>
    }
}

