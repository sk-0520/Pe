<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ContentTypeTextNet.SharedLibrary</name>
    </assembly>
    <members>
        <member name="T:ContentTypeTextNet.Library.SharedLibrary.Attribute.IsDeepCloneAttribute">
            <summary>
            <see cref="T:ContentTypeTextNet.Library.SharedLibrary.Logic.Utility.DeepCloneUtility"/> で複製対象とするメンバ。
            </summary>
        </member>
        <member name="T:ContentTypeTextNet.Library.SharedLibrary.Attribute.EntityMappingAttribute">
            <summary>
            <see cref="T:ContentTypeTextNet.Library.SharedLibrary.Data.Database.DataTransferObject"/>, <see cref="T:ContentTypeTextNet.Library.SharedLibrary.Data.Database.DatabaseRow"/> で使用するカラム名。
            <para>行の場合はテーブル名まで指定する。</para>
            </summary>
        </member>
        <member name="M:ContentTypeTextNet.Library.SharedLibrary.Attribute.EntityMappingAttribute.#ctor(System.String,System.Boolean)">
            <summary>
            物理名及び主キーを指定。
            </summary>
            <param name="physicalName"></param>
            <param name="primaryKey"></param>
        </member>
        <member name="M:ContentTypeTextNet.Library.SharedLibrary.Attribute.EntityMappingAttribute.#ctor(System.String)">
            <summary>
            物理名を指定。
            <para>主キーはfalseとなる。</para>
            </summary>
            <param name="physicalName"></param>
        </member>
        <member name="P:ContentTypeTextNet.Library.SharedLibrary.Attribute.EntityMappingAttribute.PhysicalName">
            <summary>
            物理名。
            </summary>
        </member>
        <member name="P:ContentTypeTextNet.Library.SharedLibrary.Attribute.EntityMappingAttribute.PrimaryKey">
            <summary>
            主キー。
            </summary>
        </member>
        <member name="T:ContentTypeTextNet.Library.SharedLibrary.Attribute.PixelKindAttribute">
            <summary>
            ピクセル情報を指定。
            </summary>
        </member>
        <member name="M:ContentTypeTextNet.Library.SharedLibrary.Attribute.PixelKindAttribute.#ctor(ContentTypeTextNet.Library.SharedLibrary.Define.Px)">
            <summary>
            ピクセル情報を指定。
            </summary>
            <param name="px"></param>
        </member>
        <member name="P:ContentTypeTextNet.Library.SharedLibrary.Attribute.PixelKindAttribute.Px">
            <summary>
            ピクセル情報。
            </summary>
        </member>
        <member name="T:ContentTypeTextNet.Library.SharedLibrary.CompatibleForms.CompatibleFormWindow">
            <summary>
            FormsのFormをウィンドウとして扱う。
            <para>要はウィンドウハンドル欲しい。</para>
            </summary>
        </member>
        <member name="P:ContentTypeTextNet.Library.SharedLibrary.CompatibleForms.CompatibleFormWindow.Handle">
            <summary>
            ウィンドウハンドル。
            </summary>
        </member>
        <member name="T:ContentTypeTextNet.Library.SharedLibrary.CompatibleForms.FolderBrowserDialog">
            <summary>
            <see cref="T:System.Windows.Forms.FolderBrowserDialog"/>互換クラス。
            </summary>
        </member>
        <member name="P:ContentTypeTextNet.Library.SharedLibrary.CompatibleForms.FolderBrowserDialog.Container">
            <summary>
             <see cref="T:System.ComponentModel.Component"/> を格納している <see cref="T:System.ComponentModel.IContainer"/> を取得します。
            </summary>
        </member>
        <member name="P:ContentTypeTextNet.Library.SharedLibrary.CompatibleForms.FolderBrowserDialog.Description">
            <summary>
            ダイアログ ボックスのツリー ビュー コントロールの上部に表示する説明テキストを取得または設定します。
            </summary>
        </member>
        <member name="P:ContentTypeTextNet.Library.SharedLibrary.CompatibleForms.FolderBrowserDialog.RootFolder">
            <summary>
            参照の開始位置とするルート フォルダーを取得または設定します。
            </summary>
        </member>
        <member name="P:ContentTypeTextNet.Library.SharedLibrary.CompatibleForms.FolderBrowserDialog.SelectedPath">
            <summary>
            ユーザーが選択したパスを取得または設定します。
            </summary>
        </member>
        <member name="P:ContentTypeTextNet.Library.SharedLibrary.CompatibleForms.FolderBrowserDialog.ShowNewFolderButton">
            <summary>
            フォルダー参照ダイアログ ボックスに [新しいフォルダー] ボタンを表示するかどうかを示す値を取得または設定します。
            </summary>
        </member>
        <member name="P:ContentTypeTextNet.Library.SharedLibrary.CompatibleForms.FolderBrowserDialog.Site">
            <summary>
            <see cref="T:System.ComponentModel.Component"/> の <see cref="T:System.ComponentModel.ISite"/> を取得または設定します。
            </summary>
        </member>
        <member name="P:ContentTypeTextNet.Library.SharedLibrary.CompatibleForms.FolderBrowserDialog.Tag">
            <summary>
            コントロールに関するデータを格納するオブジェクトを取得または設定します。
            </summary>
        </member>
        <member name="T:ContentTypeTextNet.Library.SharedLibrary.CompatibleForms.Screen">
            <summary>
            <see cref="T:System.Windows.Forms.Screen"/> 互換クラス。
            </summary>
        </member>
        <member name="M:ContentTypeTextNet.Library.SharedLibrary.CompatibleForms.Screen.ConvertScreenModel(System.Windows.Forms.Screen)">
            <summary>
            <see cref="T:System.Windows.Forms.Screen"/> を <see cref="T:ContentTypeTextNet.Library.SharedLibrary.Model.ScreenModel"/> に変換。
            </summary>
            <param name="screen"></param>
            <returns></returns>
        </member>
        <member name="P:ContentTypeTextNet.Library.SharedLibrary.CompatibleForms.Screen.AllScreens">
            <summary>
            システム上のすべてのディスプレイの配列を取得します。
            </summary>
        </member>
        <member name="P:ContentTypeTextNet.Library.SharedLibrary.CompatibleForms.Screen.PrimaryScreen">
            <summary>
            プライマリ ディスプレイを取得します。
            </summary>
        </member>
        <member name="M:ContentTypeTextNet.Library.SharedLibrary.CompatibleForms.Screen.FromDevicePoint(System.Windows.Point)">
            <summary>
            指定したポイントを保持するディスプレイを表す <see cref="T:ContentTypeTextNet.Library.SharedLibrary.Model.ScreenModel"/> を取得します。
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:ContentTypeTextNet.Library.SharedLibrary.CompatibleForms.Screen.FromDeviceRectangle(System.Windows.Rect)">
            <summary>
            四角形の最大部分を保持する <see cref="T:ContentTypeTextNet.Library.SharedLibrary.Model.ScreenModel"/> を取得します。
            </summary>
            <param name="rect"></param>
            <returns></returns>
        </member>
        <member name="M:ContentTypeTextNet.Library.SharedLibrary.CompatibleForms.Screen.FromHandle(System.IntPtr)">
            <summary>
            指定したハンドルによって参照されているオブジェクトの最大領域を保持するディスプレイを表す <see cref="T:ContentTypeTextNet.Library.SharedLibrary.Model.ScreenModel"/> を取得します。
            </summary>
            <param name="hWnd"></param>
            <returns></returns>
        </member>
        <member name="T:ContentTypeTextNet.Library.SharedLibrary.CompatibleForms.SystemInformation">
            <summary>
            <see cref="T:System.Windows.Forms.SystemInformation" /> の互換ラッパー。
            </summary>
        </member>
        <member name="P:ContentTypeTextNet.Library.SharedLibrary.CompatibleForms.SystemInformation.DoubleClickTime">
            <summary>
            マウス操作がダブルクリックであると OS に認識されるための、1 回目のクリックと 2 回目のクリックの間の最大経過時間 (ミリ秒単位) を取得します。
            </summary>
        </member>
        <member name="T:ContentTypeTextNet.Library.SharedLibrary.CompatibleForms.Utility.DrawingUtility">
            <summary>
            <see cref="N:System.Drawing"/>名前空間の互換処理群。
            <para>...WPFでも<see cref="N:System.Drawing"/>は選択的に非推奨じゃないのね……。</para>
            </summary>
        </member>
        <member name="M:ContentTypeTextNet.Library.SharedLibrary.CompatibleForms.Utility.SendKeysUtility.Send(System.String)">
            <summary>
            なんだかなぁ。
            </summary>
            <param name="keys"></param>
        </member>
        <member name="T:ContentTypeTextNet.Library.SharedLibrary.CompatibleWindows.IconDialog">
            <summary>
            アイコン選択ダイアログ。
            </summary>
        </member>
        <member name="P:ContentTypeTextNet.Library.SharedLibrary.CompatibleWindows.IconDialog.Icon">
            <summary>
            アイコン情報。
            </summary>
        </member>
        <member name="T:ContentTypeTextNet.Library.SharedLibrary.CompatibleWindows.IconWrapper">
            <summary>
            <see cref="T:System.Drawing.Icon"/>のラッパー。
            </summary>
        </member>
        <member name="M:ContentTypeTextNet.Library.SharedLibrary.CompatibleWindows.Utility.HandleUtility.GetWindowHandle(System.Windows.Window)">
            <summary>
            ウィンドウハンドル取得。
            </summary>
            <param name="view"></param>
            <returns></returns>
        </member>
        <member name="M:ContentTypeTextNet.Library.SharedLibrary.CompatibleWindows.Utility.MouseUtility.GetDevicePosition">
            <summary>
            マウスカーソルの現在位置を物理座標で取得。
            </summary>
            <returns></returns>
        </member>
        <member name="T:ContentTypeTextNet.Library.SharedLibrary.CompatibleWindows.Utility.PodStructUtility">
            <summary>
            POD構造体用ユーティリティ。
            </summary>
        </member>
        <member name="T:ContentTypeTextNet.Library.SharedLibrary.Data.Database.DatabaseObjectBase">
            <summary>
            <see cref="T:ContentTypeTextNet.Library.SharedLibrary.Data.Database.DataTransferObject"/>, <see cref="T:ContentTypeTextNet.Library.SharedLibrary.Data.Database.DatabaseRow"/> の共通クラス。
            <para>特に何もしないが継承クラスでは<see cref="T:ContentTypeTextNet.Library.SharedLibrary.Attribute.EntityMappingAttribute"/>を当てて使用する。</para>
            </summary>
        </member>
        <member name="T:ContentTypeTextNet.Library.SharedLibrary.Data.Database.DataTransferObject">
            <summary>
            データ取得単位に対応。
            <para><see cref="T:ContentTypeTextNet.Library.SharedLibrary.Attribute.EntityMappingAttribute"/>を当てて使用する。</para>
            </summary>
        </member>
        <member name="T:ContentTypeTextNet.Library.SharedLibrary.Data.Database.DatabaseRow">
            <summary>
            テーブル行に対応。
            <para><see cref="T:ContentTypeTextNet.Library.SharedLibrary.Attribute.EntityMappingAttribute"/>を当てて使用する。</para>
            </summary>
        </member>
        <member name="T:ContentTypeTextNet.Library.SharedLibrary.Data.Database.EntityMappingInformation">
            <summary>
            物理名・プロパティ紐付。
            <para><see cref="T:ContentTypeTextNet.Library.SharedLibrary.Attribute.EntityMappingAttribute"/>に紐付く物理名とプロパティ情報。</para>
            </summary>
        </member>
        <member name="P:ContentTypeTextNet.Library.SharedLibrary.Data.Database.EntityMappingInformation.PropertyInfo">
            <summary>
            <see cref="T:ContentTypeTextNet.Library.SharedLibrary.Attribute.EntityMappingAttribute"/>で紐付くプロパティ。
            </summary>
        </member>
        <member name="T:ContentTypeTextNet.Library.SharedLibrary.Data.Database.EntityMappingSet">
            <summary>
            エンティティ一覧情報
            <para>エンティティとして必要な物理名とエンティティオブジェクトのプロパティ一覧。</para>
            </summary>
        </member>
        <member name="P:ContentTypeTextNet.Library.SharedLibrary.Data.Database.EntityMappingSet.TableName">
            <summary>
            テーブル名。
            </summary>
        </member>
        <member name="P:ContentTypeTextNet.Library.SharedLibrary.Data.Database.EntityMappingSet.TargetInfos">
            <summary>
            対象<see cref="T:ContentTypeTextNet.Library.SharedLibrary.Data.Database.EntityMappingInformation"/>の集合
            </summary>
        </member>
        <member name="T:ContentTypeTextNet.Library.SharedLibrary.Data.DialogFilterItem">
            <summary>
            ダイアログで使用するフィルタのアイテム。
            </summary>
        </member>
        <member name="M:ContentTypeTextNet.Library.SharedLibrary.Data.DialogFilterItem.#ctor(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            初期化。
            </summary>
            <param name="displayText">表示文字列。</param>
            <param name="wildcard">ワイルドカード一覧。</param>
        </member>
        <member name="M:ContentTypeTextNet.Library.SharedLibrary.Data.DialogFilterItem.#ctor(System.String,System.String[])">
            <summary>
            初期化。
            </summary>
            <param name="displayText">表示文字列。</param>
            <param name="wildcard">ワイルドカード一覧。</param>
        </member>
        <member name="P:ContentTypeTextNet.Library.SharedLibrary.Data.DialogFilterItem.Wildcard">
            <summary>
            フィルタリングに使用するワイルドカード一覧。
            </summary>
        </member>
        <member name="P:ContentTypeTextNet.Library.SharedLibrary.Data.DialogFilterItem.DisplayText">
            <summary>
            表示名
            </summary>
        </member>
        <member name="M:ContentTypeTextNet.Library.SharedLibrary.Data.DialogFilterItem.ToString">
            <summary>
            ダイアログフィルタとして使用する生値。
            </summary>
            <returns></returns>
        </member>
        <member name="T:ContentTypeTextNet.Library.SharedLibrary.Data.DialogFilterValueItem`1">
            <summary>
            ダイアログで使用するフィルタのアイテム。
            <para>値を保持する。</para>
            </summary>
        </member>
        <member name="P:ContentTypeTextNet.Library.SharedLibrary.Data.DialogFilterValueItem`1.Value">
            <summary>
            保持する値。
            </summary>
        </member>
        <member name="T:ContentTypeTextNet.Library.SharedLibrary.Data.DisplayData`1">
            <summary>
            表示文字列と値を持つデータ。
            </summary>
            <typeparam name="TValue">値の型。</typeparam>
        </member>
        <member name="M:ContentTypeTextNet.Library.SharedLibrary.Data.DisplayData`1.#ctor(System.String,`0)">
            <summary>
            初期化。
            </summary>
            <param name="displayText">表示名。</param>
            <param name="value">値。</param>
        </member>
        <member name="P:ContentTypeTextNet.Library.SharedLibrary.Data.DisplayData`1.Value">
            <summary>
            値。
            </summary>
        </member>
        <member name="P:ContentTypeTextNet.Library.SharedLibrary.Data.DisplayData`1.DisplayText">
            <summary>
            表示名。
            </summary>
        </member>
        <member name="T:ContentTypeTextNet.Library.SharedLibrary.Data.DisplayData">
            <summary>
            ヘルパ
            </summary>
        </member>
        <member name="T:ContentTypeTextNet.Library.SharedLibrary.Data.MVMPair`2">
            <summary>
            モデルとビューモデルのペア。
            </summary>
            <typeparam name="TModel">モデルの型。</typeparam>
            <typeparam name="TViewModel">モデルに対応するビューモデルの型。</typeparam>
        </member>
        <member name="P:ContentTypeTextNet.Library.SharedLibrary.Data.MVMPair`2.Model">
            <summary>
            モデル。
            </summary>
        </member>
        <member name="P:ContentTypeTextNet.Library.SharedLibrary.Data.MVMPair`2.ViewModel">
            <summary>
            ビューモデル。
            </summary>
        </member>
        <member name="T:ContentTypeTextNet.Library.SharedLibrary.Data.MVMPair">
            <summary>
            <see cref="T:ContentTypeTextNet.Library.SharedLibrary.Data.MVMPair`2"/>生成のヘルパ。
            </summary>
        </member>
        <member name="T:ContentTypeTextNet.Library.SharedLibrary.Define.PropertyCheck">
            <summary>
            プロパティチェック方法。
            </summary>
        </member>
        <member name="F:ContentTypeTextNet.Library.SharedLibrary.Define.PropertyCheck.None">
            <summary>
            なし。
            </summary>
        </member>
        <member name="F:ContentTypeTextNet.Library.SharedLibrary.Define.PropertyCheck.Before">
            <summary>
            前。
            </summary>
        </member>
        <member name="F:ContentTypeTextNet.Library.SharedLibrary.Define.PropertyCheck.After">
            <summary>
            後。
            </summary>
        </member>
        <member name="T:ContentTypeTextNet.Library.SharedLibrary.Define.SerializeFileType">
            <summary>
            (デ)シリアライズ方法。
            </summary>
        </member>
        <member name="F:ContentTypeTextNet.Library.SharedLibrary.Define.SerializeFileType.XmlSerialize">
            <summary>
            XML(Serializable)
            </summary>
        </member>
        <member name="F:ContentTypeTextNet.Library.SharedLibrary.Define.SerializeFileType.XmlData">
            <summary>
            XML(DataContract)
            </summary>
        </member>
        <member name="F:ContentTypeTextNet.Library.SharedLibrary.Define.SerializeFileType.Json">
            <summary>
            Json。
            </summary>
        </member>
        <member name="F:ContentTypeTextNet.Library.SharedLibrary.Define.SerializeFileType.Binary">
            <summary>
            バイナリ。
            </summary>
        </member>
        <member name="T:ContentTypeTextNet.Library.SharedLibrary.Define.QueryPattern">
            <summary>
            コマンドと条件式のどちらを使用するか。
            </summary>
        </member>
        <member name="F:ContentTypeTextNet.Library.SharedLibrary.Define.QueryPattern.Command">
            <summary>
            コマンドを使用する。
            </summary>
        </member>
        <member name="F:ContentTypeTextNet.Library.SharedLibrary.Define.QueryPattern.Expression">
            <summary>
            条件式を使用する。
            <para>入れ子で使用する。</para>
            </summary>
        </member>
        <member name="T:ContentTypeTextNet.Library.SharedLibrary.Define.IconScale">
            <summary>
            アイコンサイズ。
            </summary>
        </member>
        <member name="F:ContentTypeTextNet.Library.SharedLibrary.Define.IconScale.Small">
            <summary>
            16px
            </summary>
        </member>
        <member name="F:ContentTypeTextNet.Library.SharedLibrary.Define.IconScale.Normal">
            <summary>
            32px
            </summary>
        </member>
        <member name="F:ContentTypeTextNet.Library.SharedLibrary.Define.IconScale.Big">
            <summary>
            48px
            </summary>
        </member>
        <member name="F:ContentTypeTextNet.Library.SharedLibrary.Define.IconScale.Large">
            <summary>
            256px
            </summary>
        </member>
        <member name="T:ContentTypeTextNet.Library.SharedLibrary.Define.LogKind">
            <summary>
            ログ種別。
            </summary>
        </member>
        <member name="F:ContentTypeTextNet.Library.SharedLibrary.Define.LogKind.None">
            <summary>
            基本的に使用しない。
            </summary>
        </member>
        <member name="F:ContentTypeTextNet.Library.SharedLibrary.Define.LogKind.Debug">
            <summary>
            デバッグ情報。
            </summary>
        </member>
        <member name="F:ContentTypeTextNet.Library.SharedLibrary.Define.LogKind.Trace">
            <summary>
            トレース情報。
            </summary>
        </member>
        <member name="F:ContentTypeTextNet.Library.SharedLibrary.Define.LogKind.Information">
            <summary>
            操作情報。
            </summary>
        </member>
        <member name="F:ContentTypeTextNet.Library.SharedLibrary.Define.LogKind.Warning">
            <summary>
            注意。
            </summary>
        </member>
        <member name="F:ContentTypeTextNet.Library.SharedLibrary.Define.LogKind.Error">
            <summary>
            エラー。
            </summary>
        </member>
        <member name="F:ContentTypeTextNet.Library.SharedLibrary.Define.LogKind.Fatal">
            <summary>
            異常。
            </summary>
        </member>
        <member name="T:ContentTypeTextNet.Library.SharedLibrary.Define.OrderBy">
            <summary>
            並び順。
            </summary>
        </member>
        <member name="F:ContentTypeTextNet.Library.SharedLibrary.Define.OrderBy.Descending">
            <summary>
            降順(Z-&gt;A)
            </summary>
        </member>
        <member name="F:ContentTypeTextNet.Library.SharedLibrary.Define.OrderBy.Ascending">
            <summary>
            昇順(A-&gt;Z)
            </summary>
        </member>
        <member name="F:ContentTypeTextNet.Library.SharedLibrary.Define.OrderBy.Desc">
            <summary>
            降順
            </summary>
        </member>
        <member name="F:ContentTypeTextNet.Library.SharedLibrary.Define.OrderBy.Asc">
            <summary>
            昇順
            </summary>
        </member>
        <member name="T:ContentTypeTextNet.Library.SharedLibrary.Define.Px">
            <summary>
            ピクセル情報。
            </summary>
        </member>
        <member name="F:ContentTypeTextNet.Library.SharedLibrary.Define.Px.Unknown">
            <summary>
            知らん。
            </summary>
        </member>
        <member name="F:ContentTypeTextNet.Library.SharedLibrary.Define.Px.Logical">
            <summary>
            論理座標系。
            </summary>
        </member>
        <member name="F:ContentTypeTextNet.Library.SharedLibrary.Define.Px.Device">
            <summary>
            デバイス座標系。
            </summary>
        </member>
        <member name="T:ContentTypeTextNet.Library.SharedLibrary.Define.WarningLevel">
            <summary>
            警告レベル。
            </summary>
        </member>
        <member name="F:ContentTypeTextNet.Library.SharedLibrary.Define.WarningLevel.None">
            <summary>
            警告として出力しない。
            </summary>
        </member>
        <member name="F:ContentTypeTextNet.Library.SharedLibrary.Define.WarningLevel.Full">
            <summary>
            最大限の警告レベル。
            </summary>
        </member>
        <member name="T:ContentTypeTextNet.Library.SharedLibrary.IF.IIsEqual">
            <summary>
            EqualsとかGetHashCodeとかめんどいんすよ、等価だけやりたいんすよ、ようわからんのですよ。
            </summary>
        </member>
        <member name="P:ContentTypeTextNet.Library.SharedLibrary.IF.ILimitSize.LimitSize">
            <summary>
            データ長。
            </summary>
        </member>
        <member name="P:ContentTypeTextNet.Library.SharedLibrary.IF.WindowsViewExtend.IApplicationDesktopToolbarData.NowFullScreen">
            <summary>
            他ウィンドウがフルスクリーン表示。
            </summary>
        </member>
        <member name="P:ContentTypeTextNet.Library.SharedLibrary.IF.WindowsViewExtend.IApplicationDesktopToolbarData.IsDocking">
            <summary>
            ドッキング中か。
            </summary>
        </member>
        <member name="P:ContentTypeTextNet.Library.SharedLibrary.IF.WindowsViewExtend.IApplicationDesktopToolbarData.DockType">
            <summary>
            ドッキング種別。
            </summary>
        </member>
        <member name="P:ContentTypeTextNet.Library.SharedLibrary.IF.WindowsViewExtend.IApplicationDesktopToolbarData.AutoHide">
            <summary>
            自動的に隠す。
            </summary>
        </member>
        <member name="P:ContentTypeTextNet.Library.SharedLibrary.IF.WindowsViewExtend.IApplicationDesktopToolbarData.IsHidden">
            <summary>
            隠れているか。
            </summary>
        </member>
        <member name="P:ContentTypeTextNet.Library.SharedLibrary.IF.WindowsViewExtend.IApplicationDesktopToolbarData.Visibility">
            <summary>
            表示状態。
            </summary>
        </member>
        <member name="P:ContentTypeTextNet.Library.SharedLibrary.IF.WindowsViewExtend.IApplicationDesktopToolbarData.BarSize">
            <summary>
            バーの論理サイズ
            </summary>
        </member>
        <member name="P:ContentTypeTextNet.Library.SharedLibrary.IF.WindowsViewExtend.IApplicationDesktopToolbarData.ShowLogicalBarArea">
            <summary>
            表示中の論理バーサイズ。
            </summary>
        </member>
        <member name="P:ContentTypeTextNet.Library.SharedLibrary.IF.WindowsViewExtend.IApplicationDesktopToolbarData.HideWidth">
            <summary>
            隠れた状態のバー論理サイズ。
            </summary>
        </member>
        <member name="P:ContentTypeTextNet.Library.SharedLibrary.IF.WindowsViewExtend.IApplicationDesktopToolbarData.HideLogicalBarArea">
            <summary>
            表示中の隠れたバーの論理領域。
            </summary>
        </member>
        <member name="P:ContentTypeTextNet.Library.SharedLibrary.IF.WindowsViewExtend.IApplicationDesktopToolbarData.HideWaitTime">
            <summary>
            自動的に隠すまでの時間。
            </summary>
        </member>
        <member name="P:ContentTypeTextNet.Library.SharedLibrary.IF.WindowsViewExtend.IApplicationDesktopToolbarData.HideAnimateTime">
            <summary>
            自動的に隠す際のアニメーション時間。
            </summary>
        </member>
        <member name="P:ContentTypeTextNet.Library.SharedLibrary.IF.WindowsViewExtend.IApplicationDesktopToolbarData.DockScreen">
            <summary>
            ドッキングに使用するスクリーン。
            </summary>
        </member>
        <member name="M:ContentTypeTextNet.Library.SharedLibrary.IF.WindowsViewExtend.IApplicationDesktopToolbarData.ChangingWindowMode(ContentTypeTextNet.Library.SharedLibrary.Define.DockType)">
            <summary>
            指定位置に合わせてデータ書き換え
            </summary>
        </member>
        <member name="P:ContentTypeTextNet.Library.SharedLibrary.IF.WindowsViewExtend.IWindowHitTestData.UsingBorderHitTest">
            <summary>
            ボーダーに対するヒットテストを行うか
            </summary>
        </member>
        <member name="P:ContentTypeTextNet.Library.SharedLibrary.IF.WindowsViewExtend.IWindowHitTestData.UsingCaptionHitTest">
            <summary>
            タイトルバーに対するヒットテストを行うか
            </summary>
        </member>
        <member name="P:ContentTypeTextNet.Library.SharedLibrary.IF.WindowsViewExtend.IWindowHitTestData.CaptionArea">
            <summary>
            タイトルバーとして認識される領域。
            </summary>
        </member>
        <member name="P:ContentTypeTextNet.Library.SharedLibrary.IF.WindowsViewExtend.IWindowHitTestData.ResizeThickness">
            <summary>
            サイズ変更に使用する境界線。
            </summary>
        </member>
        <member name="P:ContentTypeTextNet.Library.SharedLibrary.IF.WindowsViewExtend.IWindowAreaCorrectionData.UsingMultipleResize">
            <summary>
            ウィンドウサイズの倍数制御を行うか。
            </summary>
        </member>
        <member name="P:ContentTypeTextNet.Library.SharedLibrary.IF.WindowsViewExtend.IWindowAreaCorrectionData.MultipleSize">
            <summary>
            ウィンドウサイズの倍数制御に使用する元となる論理サイズ。
            </summary>
        </member>
        <member name="P:ContentTypeTextNet.Library.SharedLibrary.IF.WindowsViewExtend.IWindowAreaCorrectionData.MultipleThickness">
            <summary>
            タイトルバーとかボーダーを含んだ領域。
            </summary>
        </member>
        <member name="P:ContentTypeTextNet.Library.SharedLibrary.IF.WindowsViewExtend.IWindowAreaCorrectionData.UsingMoveLimitArea">
            <summary>
            移動制限を行うか。
            </summary>
        </member>
        <member name="P:ContentTypeTextNet.Library.SharedLibrary.IF.WindowsViewExtend.IWindowAreaCorrectionData.MoveLimitArea">
            <summary>
            移動制限に使用する論理領域。
            </summary>
        </member>
        <member name="P:ContentTypeTextNet.Library.SharedLibrary.IF.WindowsViewExtend.IWindowAreaCorrectionData.UsingMaxMinSuppression">
            <summary>
            最大化・最小化を抑制するか。
            </summary>
        </member>
        <member name="T:ContentTypeTextNet.Library.SharedLibrary.IF.IDeepClone">
            <summary>
            ディープコピー。
            <para>ICloneableはシャローなのかディープなのかようわからん。</para>
            </summary>
        </member>
        <member name="M:ContentTypeTextNet.Library.SharedLibrary.IF.IDeepClone.DeepClone">
            <summary>
            全データを完全複製。
            <para>ほぼほぼDeepCloneToを呼び出すためだけに存在している。</para>
            </summary>
            <returns></returns>
        </member>
        <member name="T:ContentTypeTextNet.Library.SharedLibrary.IF.IDisplayText">
            <summary>
            困ったときの表示用文字列。
            </summary>
        </member>
        <member name="T:ContentTypeTextNet.Library.SharedLibrary.IF.INonProcess">
            <summary>
            各種操作なんかで持ち運びたい処理しない(ように見える)データ群。
            </summary>
        </member>
        <member name="P:ContentTypeTextNet.Library.SharedLibrary.IF.INonProcess.Logger">
            <summary>
            ログ取り。
            </summary>
        </member>
        <member name="P:ContentTypeTextNet.Library.SharedLibrary.IF.INonProcess.Language">
            <summary>
            言語。
            </summary>
        </member>
        <member name="T:ContentTypeTextNet.Library.SharedLibrary.IF.RangeModel`1">
            <summary>
            範囲持ちアイテム。
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:ContentTypeTextNet.Library.SharedLibrary.IF.RangeModel`1.Head">
            <summary>
            範囲の開始点。
            </summary>
        </member>
        <member name="P:ContentTypeTextNet.Library.SharedLibrary.IF.RangeModel`1.Tail">
            <summary>
            範囲の終了点。
            </summary>
        </member>
        <member name="T:ContentTypeTextNet.Library.SharedLibrary.IF.RangeModel">
            <summary>
            ヘルパ。
            </summary>
        </member>
        <member name="P:ContentTypeTextNet.Library.SharedLibrary.IF.IWindowsHandle.Handle">
            <summary>
            h。
            </summary>
        </member>
        <member name="P:ContentTypeTextNet.Library.SharedLibrary.IF.IHasView`1.HasView">
            <summary>
            Viewが存在するか。
            <para>View != null じゃなくて本メソッドでView存在確認を行う。</para>
            <para>テストの際にView が存在しない可能性がある。</para>
            </summary>
        </member>
        <member name="E:ContentTypeTextNet.Library.SharedLibrary.IF.IIsDisposed.Disposing">
            <summary>
            Dispose時に呼び出されるイベント。
            <para>本イベントが呼び出されるとき、IsDisposedはまだfalse。</para>
            </summary>
        </member>
        <member name="P:ContentTypeTextNet.Library.SharedLibrary.IF.IIsDisposed.IsDisposed">
            <summary>
            破棄されたか。
            </summary>
        </member>
        <member name="T:ContentTypeTextNet.Library.SharedLibrary.IF.ILogger">
            <summary>
            LogItemModelを用いたログ出力用IF。
            </summary>
        </member>
        <member name="M:ContentTypeTextNet.Library.SharedLibrary.IF.IModel.Correction">
            <summary>
            補正。
            </summary>
        </member>
        <member name="T:ContentTypeTextNet.Library.SharedLibrary.IF.IName">
            <summary>
            名前を持つ。
            </summary>
        </member>
        <member name="P:ContentTypeTextNet.Library.SharedLibrary.IF.IName.Name">
            <summary>
            名前。
            </summary>
        </member>
        <member name="P:ContentTypeTextNet.Library.SharedLibrary.IF.ITId`1.Id">
            <summary>
            ID。
            </summary>
        </member>
        <member name="M:ContentTypeTextNet.Library.SharedLibrary.IF.ITId`1.IsSafeId(`0)">
            <summary>
            IDが設定可能なものか。
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:ContentTypeTextNet.Library.SharedLibrary.IF.ITId`1.ToSafeId(`0)">
            <summary>
            IDを設定可能なものに変更。
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="T:ContentTypeTextNet.Library.SharedLibrary.IF.IUserClosableWindow">
            <summary>
            http://stackoverflow.com/questions/1866537/how-to-know-whether-window-was-closed-by-x-button?answertab=votes#tab-top
            </summary>
        </member>
        <member name="M:ContentTypeTextNet.Library.SharedLibrary.Logic.Extension.CommandExtension.TryExecute(System.Windows.Input.ICommand,System.Object)">
            <summary>
            コマンドを実行する。
            <para>コマンド実行が可能な場合に実行する。</para>
            </summary>
            <param name="command">コマンド。</param>
            <param name="parameter">パラメータ。</param>
            <returns>コマンド実行時に真、実行しなかった場合は偽を返す。</returns>
        </member>
        <member name="T:ContentTypeTextNet.Library.SharedLibrary.Logic.Extension.IconScaleExtension">
            <summary>
            <see cref="T:ContentTypeTextNet.Library.SharedLibrary.Define.IconScale"/>に対する拡張処理。
            </summary>
        </member>
        <member name="M:ContentTypeTextNet.Library.SharedLibrary.Logic.Extension.IconScaleExtension.ToWidth(ContentTypeTextNet.Library.SharedLibrary.Define.IconScale)">
            <summary>
            横幅を求める。
            </summary>
            <param name="iconScale"></param>
            <returns></returns>
        </member>
        <member name="M:ContentTypeTextNet.Library.SharedLibrary.Logic.Extension.IconScaleExtension.ToHeight(ContentTypeTextNet.Library.SharedLibrary.Define.IconScale)">
            <summary>
            高さを求める。
            </summary>
            <param name="iconScale"></param>
            <returns></returns>
        </member>
        <member name="M:ContentTypeTextNet.Library.SharedLibrary.Logic.Extension.IconScaleExtension.ToSize(ContentTypeTextNet.Library.SharedLibrary.Define.IconScale)">
            <summary>
            縦・横のサイズを求める。
            </summary>
            <param name="iconScale"></param>
            <returns></returns>
        </member>
        <member name="M:ContentTypeTextNet.Library.SharedLibrary.Logic.Extension.LinqExtension.If``1(System.Collections.Generic.IEnumerable{``0},System.Boolean,System.Func{System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0}})">
            <summary>
            シーケンスを真偽値により処理を分岐させる。
            </summary>
            <typeparam name="TSource"></typeparam>
            <param name="seq">入力シーケンス</param>
            <param name="cond">条件</param>
            <param name="t">真の場合に返すシーケンス</param>
            <returns></returns>
        </member>
        <member name="M:ContentTypeTextNet.Library.SharedLibrary.Logic.Extension.LinqExtension.IfElse``2(System.Collections.Generic.IEnumerable{``0},System.Boolean,System.Func{System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1}},System.Func{System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1}})">
            <summary>
            シーケンスを真偽値により処理を分岐させる
            </summary>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="seq">入力シーケンス</param>
            <param name="cond">条件</param>
            <param name="t">真の場合に返すシーケンス</param>
            <param name="f">偽の場合に返すシーケンス</param>
            <returns></returns>
        </member>
        <member name="M:ContentTypeTextNet.Library.SharedLibrary.Logic.Extension.LinqExtension.IfRevese``1(System.Collections.Generic.IEnumerable{``0},System.Boolean)">
            <summary>
            条件が真の場合にシーケンスを反転させる。
            </summary>
            <typeparam name="TSource"></typeparam>
            <param name="seq"></param>
            <param name="cond"></param>
            <returns></returns>
        </member>
        <member name="M:ContentTypeTextNet.Library.SharedLibrary.Logic.Extension.LinqExtension.FindIndex``1(System.Collections.Generic.IList{``0},System.Int32,System.Predicate{``0})">
            <summary>
            <para>http://stackoverflow.com/questions/13767451/ilistt-findindexint32-predicate-t?answertab=votes#tab-top</para>
            </summary>
            <typeparam name="TSource"></typeparam>
            <param name="source"></param>
            <param name="startIndex"></param>
            <param name="match"></param>
            <returns></returns>
        </member>
        <member name="M:ContentTypeTextNet.Library.SharedLibrary.Logic.Extension.TextExtension.ReplaceRange(System.String,System.String,System.String,System.Func{System.String,System.String})">
            <summary>
            指定範囲の値を指定処理で置き換える。
            </summary>
            <param name="src">対象。</param>
            <param name="head">置き換え開始文字列。</param>
            <param name="tail">置き換え終了文字列。</param>
            <param name="dg">処理。</param>
            <returns></returns>
        </member>
        <member name="M:ContentTypeTextNet.Library.SharedLibrary.Logic.Extension.TextExtension.ReplaceRangeFromDictionary(System.String,System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            指定範囲の値を指定のコレクションで置き換える。
            </summary>
            <param name="src">対象。</param>
            <param name="head">置き換え開始文字列。</param>
            <param name="tail">置き換え終了文字列。</param>
            <param name="map">置き換え対象文字列と置き換え後文字列のペアであるコレクション。</param>
            <returns></returns>
        </member>
        <member name="M:ContentTypeTextNet.Library.SharedLibrary.Logic.Extension.TextExtension.ReplaceFromDictionary(System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            文字列を連想配列のキーから値に変換する。
            </summary>
            <param name="src"></param>
            <param name="map"></param>
            <returns></returns>
        </member>
        <member name="M:ContentTypeTextNet.Library.SharedLibrary.Logic.Extension.TextExtension.SplitLines(System.String)">
            <summary>
            文字列を改行で区切る。
            </summary>
            <param name="lines">何らかの文字列</param>
            <returns>改行を含めない各行。</returns>
        </member>
        <member name="M:ContentTypeTextNet.Library.SharedLibrary.Logic.Extension.TextExtension.SetParentheses(System.String,System.Func{System.String,System.Boolean},System.String,System.String)">
            <summary>
            文字列が条件に該当すればくくる。
            </summary>
            <param name="s"></param>
            <param name="func"></param>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="T:ContentTypeTextNet.Library.SharedLibrary.Logic.Initializer">
            <summary>
            <see cref="T:System.ComponentModel.ISupportInitialize"/>の初期化から初期化終了までを using で実施できるようにする。
            </summary>
        </member>
        <member name="M:ContentTypeTextNet.Library.SharedLibrary.Logic.Initializer.BeginInitialize(System.ComponentModel.ISupportInitialize)">
            <summary>
            初期化用処理を簡略化。
            <para>多分こいつしか使わない。</para>
            </summary>
            <example>
            using(Initializer.BeginInitialize(obj)) {
                obj.Property = xxx;
            }
            </example>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="T:ContentTypeTextNet.Library.SharedLibrary.Logic.CachedResourceDictionary">
            <summary>
            <para>https://codeblitz.wordpress.com/2010/08/25/resourcedictionary-use-with-care/</para>
            </summary>
        </member>
        <member name="T:ContentTypeTextNet.Library.SharedLibrary.Logic.ConfigurationCacher">
            <summary>
            App.config データのキャッシュ。
            </summary>
        </member>
        <member name="M:ContentTypeTextNet.Library.SharedLibrary.Logic.ConfigurationCacher.Get``1(System.String,System.Func{System.String,``0})">
            <summary>
            指定キーからデータ変換して値を取得。
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="key"></param>
            <param name="parser"></param>
            <returns></returns>
        </member>
        <member name="M:ContentTypeTextNet.Library.SharedLibrary.Logic.ConfigurationCacher.Get(System.String)">
            <summary>
            指定キーから文字列を取得。
            <para><see cref="M:ContentTypeTextNet.Library.SharedLibrary.Logic.ConfigurationCacher.Get``1(System.String,System.Func{System.String,``0})"/>と文字列取得処理を合わせるためだけI/Fとして定義。</para>
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="P:ContentTypeTextNet.Library.SharedLibrary.Logic.Database.QueryParts.QueryPattern">
            <summary>
            条件が真の場合にコマンドと式のどちらを使用するか
            </summary>
        </member>
        <member name="P:ContentTypeTextNet.Library.SharedLibrary.Logic.Database.QueryParts.Command">
            <summary>
            条件が真の場合のコマンド
            </summary>
        </member>
        <member name="P:ContentTypeTextNet.Library.SharedLibrary.Logic.Database.QueryParts.Expression">
            <summary>
            条件が真の場合の式
            </summary>
        </member>
        <member name="T:ContentTypeTextNet.Library.SharedLibrary.Logic.Database.CommandExpression">
            <summary>
            条件式からコマンドの構築。
            <para><see cref="T:ContentTypeTextNet.Library.SharedLibrary.Logic.Database.DatabaseManager"/>に渡すコマンドに対してさらに実装側で条件分岐を行う。</para>
            </summary>
        </member>
        <member name="M:ContentTypeTextNet.Library.SharedLibrary.Logic.Database.CommandExpression.#ctor">
            <summary>
            条件式のデフォルト値生成。
            </summary>
        </member>
        <member name="M:ContentTypeTextNet.Library.SharedLibrary.Logic.Database.CommandExpression.#ctor(System.String)">
            <summary>
            条件を真とし、真の文字列コマンドを設定する。
            </summary>
            <param name="trueCommand">コマンド。</param>
        </member>
        <member name="M:ContentTypeTextNet.Library.SharedLibrary.Logic.Database.CommandExpression.#ctor(System.Boolean,System.String)">
            <summary>
            条件式を指定値で生成。
            <para>偽の場合は空文字列となる。</para>
            </summary>
            <param name="condition">条件。</param>
            <param name="trueCommand">真の場合のコマンド。</param>
        </member>
        <member name="M:ContentTypeTextNet.Library.SharedLibrary.Logic.Database.CommandExpression.#ctor(System.Boolean,System.String,System.String)">
            <summary>
            条件式を指定値で生成。
            </summary>
            <param name="condition">条件。</param>
            <param name="trueCommand">真の場合のコマンド。</param>
            <param name="falseCommand">偽の場合のコマンド。</param>
        </member>
        <member name="M:ContentTypeTextNet.Library.SharedLibrary.Logic.Database.CommandExpression.#ctor(System.Boolean,System.String,ContentTypeTextNet.Library.SharedLibrary.Logic.Database.CommandExpression)">
            <summary>
            条件式を指定値で生成。
            </summary>
            <param name="condition">条件。</param>
            <param name="trueCommand">真の場合のコマンド。</param>
            <param name="falseCommandExpression">偽の場合の条件式。</param>
        </member>
        <member name="M:ContentTypeTextNet.Library.SharedLibrary.Logic.Database.CommandExpression.#ctor(System.Boolean,ContentTypeTextNet.Library.SharedLibrary.Logic.Database.CommandExpression,ContentTypeTextNet.Library.SharedLibrary.Logic.Database.CommandExpression)">
            <summary>
            条件式を指定値で生成。
            </summary>
            <param name="condition">条件。</param>
            <param name="trueCommandExpression">真の場合の条件式。</param>
            <param name="falseCommandExpression">偽の場合の条件式。</param>
        </member>
        <member name="P:ContentTypeTextNet.Library.SharedLibrary.Logic.Database.CommandExpression.Condition">
            <summary>
            条件。
            </summary>
        </member>
        <member name="P:ContentTypeTextNet.Library.SharedLibrary.Logic.Database.CommandExpression.True">
            <summary>
            真の場合に使用するクエリ。
            </summary>
        </member>
        <member name="P:ContentTypeTextNet.Library.SharedLibrary.Logic.Database.CommandExpression.False">
            <summary>
            偽の場合に使用するクエリ。
            </summary>
        </member>
        <member name="M:ContentTypeTextNet.Library.SharedLibrary.Logic.Database.CommandExpression.ToCode">
            <summary>
            条件をコマンドに落とし込む。
            </summary>
            <returns></returns>
        </member>
        <member name="T:ContentTypeTextNet.Library.SharedLibrary.Logic.Database.DatabaseManager">
            <summary>
            DB接続・操作の一元化
            <para>すんごいとろくない限り処理速度は考えない。</para>
            </summary>
        </member>
        <member name="M:ContentTypeTextNet.Library.SharedLibrary.Logic.Database.DatabaseManager.#ctor(System.Data.Common.DbConnection,System.Boolean)">
            <summary>
            生成。
            </summary>
            <param name="connection">コネクション</param>
            <param name="isOpened">コネクションは開いているか。閉じている場合は開く。</param>
        </member>
        <member name="P:ContentTypeTextNet.Library.SharedLibrary.Logic.Database.DatabaseManager.Connection">
            <summary>
            DB接続。
            </summary>
        </member>
        <member name="M:ContentTypeTextNet.Library.SharedLibrary.Logic.Database.DatabaseManager.BeginTransaction">
            <summary>
            トランザクションの開始
            </summary>
            <returns></returns>
        </member>
        <member name="M:ContentTypeTextNet.Library.SharedLibrary.Logic.Database.DatabaseManager.CreateQuery">
            <summary>
            コマンド生成。
            <para>ユーザーコードでは多分出番ない、はず。</para>
            </summary>
            <returns></returns>
        </member>
        <member name="M:ContentTypeTextNet.Library.SharedLibrary.Logic.Database.DatabaseManager.To(System.Object,System.Type)">
            <summary>
            型変換。
            <para>キャストでなく実際の変換処理も担当する</para>
            <para>いろいろあってpublicだけどサブクラスみたいな拡張時に使用して、外部からは原則的に<see cref="M:ContentTypeTextNet.Library.SharedLibrary.Logic.Database.DatabaseManager.To``1(System.Object)"/>を使用する。</para>
            </summary>
            <param name="value"></param>
            <param name="toType"></param>
            <returns></returns>
        </member>
        <member name="M:ContentTypeTextNet.Library.SharedLibrary.Logic.Database.DatabaseManager.To``1(System.Object)">
            <summary>
            型変換。
            <para>実際の型変換には <see cref="M:ContentTypeTextNet.Library.SharedLibrary.Logic.Database.DatabaseManager.To(System.Object,System.Type)"/> を使用する。</para>
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ContentTypeTextNet.Library.SharedLibrary.Logic.Database.DatabaseManager.DbValueFromValue(System.Object,System.Type)">
            <summary>
            DBに合わせてデータ調整
            </summary>
            <param name="value"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:ContentTypeTextNet.Library.SharedLibrary.Logic.Database.DatabaseManager.DbTypeFromType(System.Type)">
            <summary>
            DBに合わせて型調整
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:ContentTypeTextNet.Library.SharedLibrary.Logic.Database.DatabaseManager.CreateSelectCommandCode(ContentTypeTextNet.Library.SharedLibrary.Data.Database.EntityMappingSet)">
            <summary>
            行取得用コードの生成。
            </summary>
            <param name="entitySet"></param>
            <returns></returns>
        </member>
        <member name="M:ContentTypeTextNet.Library.SharedLibrary.Logic.Database.DatabaseManager.CreateInsertCommandCode(ContentTypeTextNet.Library.SharedLibrary.Data.Database.EntityMappingSet)">
            <summary>
            行挿入用コードの生成。
            </summary>
            <param name="entitySet"></param>
            <returns></returns>
        </member>
        <member name="M:ContentTypeTextNet.Library.SharedLibrary.Logic.Database.DatabaseManager.CreateUpdateCommandCode(ContentTypeTextNet.Library.SharedLibrary.Data.Database.EntityMappingSet)">
            <summary>
            エンティティ更新用コードの生成。
            </summary>
            <param name="entitySet"></param>
            <returns></returns>
        </member>
        <member name="M:ContentTypeTextNet.Library.SharedLibrary.Logic.Database.DatabaseManager.CreateDeleteCommandCode(ContentTypeTextNet.Library.SharedLibrary.Data.Database.EntityMappingSet)">
            <summary>
            エンティティ削除用コードの生成。
            </summary>
            <param name="entitySet"></param>
            <returns></returns>
        </member>
        <member name="T:ContentTypeTextNet.Library.SharedLibrary.Logic.Database.DatabaseQuery">
            <summary>
            DBクエリ。
            </summary>
        </member>
        <member name="M:ContentTypeTextNet.Library.SharedLibrary.Logic.Database.DatabaseQuery.#ctor(ContentTypeTextNet.Library.SharedLibrary.Logic.Database.DatabaseManager)">
            <summary>
            生成。
            <para>基本的に<see cref="T:ContentTypeTextNet.Library.SharedLibrary.Logic.Database.DatabaseManager"/>から作成するのでユーザーコードでは使用しない。</para>
            </summary>
            <param name="dbManager"></param>
        </member>
        <member name="P:ContentTypeTextNet.Library.SharedLibrary.Logic.Database.DatabaseQuery.DBManager">
            <summary>
            生成元。
            </summary>
        </member>
        <member name="P:ContentTypeTextNet.Library.SharedLibrary.Logic.Database.DatabaseQuery.DbCommand">
            <summary>
            コマンド。
            </summary>
        </member>
        <member name="P:ContentTypeTextNet.Library.SharedLibrary.Logic.Database.DatabaseQuery.Parameter">
            <summary>
            パラメータ。
            </summary>
        </member>
        <member name="P:ContentTypeTextNet.Library.SharedLibrary.Logic.Database.DatabaseQuery.Expression">
            <summary>
            条件式。
            </summary>
        </member>
        <member name="P:ContentTypeTextNet.Library.SharedLibrary.Logic.Database.DatabaseQuery.CompiledPattern">
             <summary>
            
             </summary>
        </member>
        <member name="P:ContentTypeTextNet.Library.SharedLibrary.Logic.Database.DatabaseQuery.ConditionPattern">
            <summary>
            条件式パターン。
            </summary>
        </member>
        <member name="M:ContentTypeTextNet.Library.SharedLibrary.Logic.Database.DatabaseQuery.HasExpression(System.String)">
            <summary>
            条件式が存在するか。
            </summary>
            <param name="name">条件式名。</param>
            <returns></returns>
        </member>
        <member name="M:ContentTypeTextNet.Library.SharedLibrary.Logic.Database.DatabaseQuery.GetExpression(System.String)">
            <summary>
            条件式取得。
            </summary>
            <param name="exprName">条件式名。</param>
            <returns></returns>
        </member>
        <member name="M:ContentTypeTextNet.Library.SharedLibrary.Logic.Database.DatabaseQuery.SetExpression(System.String,ContentTypeTextNet.Library.SharedLibrary.Logic.Database.CommandExpression)">
            <summary>
            条件式の設定。
            </summary>
            <param name="exprName"></param>
            <param name="expr"></param>
            <returns></returns>
        </member>
        <member name="M:ContentTypeTextNet.Library.SharedLibrary.Logic.Database.DatabaseQuery.SetExpression(System.String,System.String)">
            <summary>
            コマンド条件式を真で設定。
            </summary>
            <param name="exprName"></param>
            <param name="trueCommand"></param>
            <returns></returns>
        </member>
        <member name="M:ContentTypeTextNet.Library.SharedLibrary.Logic.Database.DatabaseQuery.SetExpression(System.String,System.Boolean,System.String)">
             <summary>
             条件式を設定。
            
             偽の場合は空白となる。
             </summary>
             <param name="exprName"></param>
             <param name="condition"></param>
             <param name="trueCommand"></param>
             <returns></returns>
        </member>
        <member name="M:ContentTypeTextNet.Library.SharedLibrary.Logic.Database.DatabaseQuery.SetExpression(System.String,System.Boolean,System.String,System.String)">
            <summary>
            条件式を設定。
            </summary>
            <param name="exprName"></param>
            <param name="condition"></param>
            <param name="trueCommand"></param>
            <param name="falseCommand"></param>
            <returns></returns>
        </member>
        <member name="M:ContentTypeTextNet.Library.SharedLibrary.Logic.Database.DatabaseQuery.MakeParameter(System.Data.Common.DbCommand,System.String,System.Object)">
            <summary>
            パラメータの生成。
            </summary>
            <param name="command">コマンド</param>
            <param name="name">パラメータ名</param>
            <param name="value">パラメータ値</param>
            <returns>パラメータ</returns>
        </member>
        <member name="M:ContentTypeTextNet.Library.SharedLibrary.Logic.Database.DatabaseQuery.MakeParameterList(System.Data.Common.DbCommand)">
            <summary>
            現在設定されているパラメータの配列を作成
            </summary>
            <param name="command">コマンド</param>
            <returns>パラメータ一覧</returns>
        </member>
        <member name="M:ContentTypeTextNet.Library.SharedLibrary.Logic.Database.DatabaseQuery.SetParameter(System.Data.Common.DbCommand)">
            <summary>
            現在設定されているパラメータをコマンドに設定。
            </summary>
            <param name="command">コマンド</param>
            <returns>設定の有無</returns>
        </member>
        <member name="M:ContentTypeTextNet.Library.SharedLibrary.Logic.Database.DatabaseQuery.ExpressionReplace(System.String)">
            <summary>
            条件式をパターンから置き換え。
            </summary>
            <param name="code"></param>
            <returns></returns>
        </member>
        <member name="M:ContentTypeTextNet.Library.SharedLibrary.Logic.Database.DatabaseQuery.Executer``1(System.Func{System.Data.Common.DbCommand,``0},System.String)">
            <summary>
            現在の指定値からコマンド実行。
            </summary>
            <param name="func">実行を担当する処理</param>
            <param name="code">コマンド</param>
            <returns></returns>
        </member>
        <member name="M:ContentTypeTextNet.Library.SharedLibrary.Logic.Database.DatabaseQuery.ExecuteReader(System.String)">
            <summary>
            現在の指定値からコマンド実行。
            </summary>
            <param name="code"></param>
            <returns></returns>
        </member>
        <member name="M:ContentTypeTextNet.Library.SharedLibrary.Logic.Database.DatabaseQuery.ExecuteCommand(System.String)">
            <summary>
            現在の指定値からコマンド実行。
            </summary>
            <param name="code"></param>
            <returns>影響を受けた行数</returns>
        </member>
        <member name="M:ContentTypeTextNet.Library.SharedLibrary.Logic.Database.DatabaseQuery.GetTargetInfoList``1">
            <summary>
            対象<see cref="T:ContentTypeTextNet.Library.SharedLibrary.Data.Database.DataTransferObject"/>/<see cref="T:ContentTypeTextNet.Library.SharedLibrary.Data.Database.DatabaseRow"/>から物理名・プロパティ紐付一覧を取得。
            </summary>
            <returns></returns>
        </member>
        <member name="M:ContentTypeTextNet.Library.SharedLibrary.Logic.Database.DatabaseQuery.GetDtoListImpl``1(System.String)">
            <summary>
            指定値からコマンドを実行
            </summary>
            <param name="code"></param>
            <returns><typeparam name="TDto" />の集合</returns>
        </member>
        <member name="M:ContentTypeTextNet.Library.SharedLibrary.Logic.Database.DatabaseQuery.GetResultSingle``1(System.String)">
            <summary>
            指定値からコマンドを実行
            </summary>
            <param name="code"></param>
            <returns><typeparam name="TDto" />単体</returns>
        </member>
        <member name="M:ContentTypeTextNet.Library.SharedLibrary.Logic.Database.DatabaseQuery.GetResultList``1(System.String)">
            <summary>
            指定値からコマンドを実行
            </summary>
            <param name="code"></param>
            <returns><typeparam name="TDto" />集合</returns>
        </member>
        <member name="M:ContentTypeTextNet.Library.SharedLibrary.Logic.Database.DatabaseQuery.GetEntitySet``1">
            <summary>
            対象のエンティティからエンティティ一覧情報を取得
            </summary>
            <returns></returns>
        </member>
        <member name="M:ContentTypeTextNet.Library.SharedLibrary.Logic.Database.DatabaseQuery.ExecuteEntityCommand``1(System.Collections.Generic.IList{``0},System.Func{ContentTypeTextNet.Library.SharedLibrary.Data.Database.EntityMappingSet,System.String})">
            <summary>
            エンティティに対して処理を実行
            <para>呼び出し時にパラメータ・条件式はクリアされる。</para>
            </summary>
            <param name="rowList"></param>
            <param name="func">実行するコマンドを生成する処理</param>
        </member>
        <member name="M:ContentTypeTextNet.Library.SharedLibrary.Logic.Database.DatabaseQuery.ExecuteInsert``1(System.Collections.Generic.IList{``0})">
            <summary>
            <see cref="T:ContentTypeTextNet.Library.SharedLibrary.Data.Database.DatabaseRow"/>の挿入。
            </summary>
            <param name="rowList"></param>
        </member>
        <member name="M:ContentTypeTextNet.Library.SharedLibrary.Logic.Database.DatabaseQuery.ExecuteUpdate``1(System.Collections.Generic.IList{``0})">
            <summary>
            <see cref="T:ContentTypeTextNet.Library.SharedLibrary.Data.Database.DatabaseRow"/>の更新。
            </summary>
            <param name="rowList"></param>
        </member>
        <member name="M:ContentTypeTextNet.Library.SharedLibrary.Logic.Database.DatabaseQuery.ExecuteDelete``1(System.Collections.Generic.IList{``0})">
            <summary>
            <see cref="T:ContentTypeTextNet.Library.SharedLibrary.Data.Database.DatabaseRow"/>の削除。
            </summary>
            <param name="rowList"></param>
        </member>
        <member name="M:ContentTypeTextNet.Library.SharedLibrary.Logic.Database.DatabaseQuery.GetRow``1(``0)">
            <summary>
            指定行から一致するエンティティを取得する。
            </summary>
            <param name="row"></param>
            <returns>対象のデータが設定された行。見つからない場合は null。</returns>
        </member>
        <member name="M:ContentTypeTextNet.Library.SharedLibrary.Logic.Database.DatabaseQuery.CreateKeyRow``1(``0)">
            <summary>
            指定行から主キー(将来的には非重複キー)のみのデータを持つ行を作成。
            </summary>
            <param name="src"></param>
            <returns></returns>
        </member>
        <member name="T:ContentTypeTextNet.Library.SharedLibrary.Logic.NaturalStringComparer">
            <summary>
            <para>http://stackoverflow.com/questions/248603/natural-sort-order-in-c-sharp</para>
            </summary>
        </member>
        <member name="T:ContentTypeTextNet.Library.SharedLibrary.Logic.NaturalFileInfoNameComparer">
            <summary>
            <para>http://stackoverflow.com/questions/248603/natural-sort-order-in-c-sharp</para>
            </summary>
        </member>
        <member name="T:ContentTypeTextNet.Library.SharedLibrary.Logic.NotifyPropertyChangedObject">
            <summary>
            なんかをとりあえず通知する。
            </summary>
        </member>
        <member name="M:ContentTypeTextNet.Library.SharedLibrary.Logic.NotifyPropertyChangedObject.SetVariableValue``1(``0@,``0,System.String,ContentTypeTextNet.Library.SharedLibrary.Define.PropertyCheck)">
            <summary>
            変数変更用ヘルパ。
            </summary>
            <typeparam name="TValue"></typeparam>
            <param name="variable">格納する変数。</param>
            <param name="value">変更データ。</param>
            <param name="notifyPropertyName">通知用プロパティ名。</param>
            <param name="propertyCheck">[インフラ] チェック方法。</param>
            <returns>変更があった場合は真を返す。</returns>
        </member>
        <member name="M:ContentTypeTextNet.Library.SharedLibrary.Logic.NotifyPropertyChangedObject.SetPropertyValue``1(System.Object,``0,System.String,System.String,ContentTypeTextNet.Library.SharedLibrary.Define.PropertyCheck)">
            <summary>
            プロパティ変更用ヘルパ。
            TODO: キャッシュする。
            </summary>
            <typeparam name="TValue"></typeparam>
            <param name="obj">対象オブジェクト。</param>
            <param name="value">変更データ。</param>
            <param name="targetMemberName">対象オブジェクトのメンバ名。</param>
            <param name="notifyPropertyName">通知用プロパティ名。</param>
            <param name="propertyCheck"></param>
            <returns>変更があった場合は真を返す。</returns>
        </member>
        <member name="M:ContentTypeTextNet.Library.SharedLibrary.Logic.NotifyPropertyChangedObject.CallOnPropertyChange(System.String,System.String[])">
            <summary>
            指定メンバが変更された通知する。
            </summary>
            <param name="propertyName">メンバ1。</param>
            <param name="propertyNames">メンバn。</param>
        </member>
        <member name="E:ContentTypeTextNet.Library.SharedLibrary.Logic.NotifyPropertyChangedObject.PropertyChanged">
            <summary>
            プロパティが変更された際に発生。
            </summary>
        </member>
        <member name="M:ContentTypeTextNet.Library.SharedLibrary.Logic.NotifyPropertyChangedObject.OnPropertyChanged(System.String)">
            <summary>
            PropertyChanged呼び出し。
            </summary>
            <param name="propertyName"></param>
        </member>
        <member name="T:ContentTypeTextNet.Library.SharedLibrary.Logic.Utility.CovertUtility">
            <summary>
            それっぽい変換屋さん。
            </summary>
        </member>
        <member name="M:ContentTypeTextNet.Library.SharedLibrary.Logic.Utility.CovertUtility.ToByteArray(System.Object)">
            <summary>
            オブジェクトをバイナリに変換する。
            </summary>
            <param name="obj">http://stackoverflow.com/questions/4865104/convert-any-object-to-a-byte?answertab=votes#tab-top</param>
            <returns></returns>
        </member>
        <member name="T:ContentTypeTextNet.Library.SharedLibrary.Logic.Utility.DeepCloneUtility">
            <summary>
            ディープコピー用ユーティリティ。
            </summary>
        </member>
        <member name="M:ContentTypeTextNet.Library.SharedLibrary.Logic.Utility.DeepCloneUtility.Copy``1(``0)">
            <summary>
            ディープコピー実施。
            </summary>
            <typeparam name="TDeepClone"></typeparam>
            <param name="src">元データ。</param>
            <returns>コピーされたデータ。</returns>
        </member>
        <member name="T:ContentTypeTextNet.Library.SharedLibrary.Logic.Utility.RestrictUtility">
            <summary>
            コーディング制限。
            </summary>
        </member>
        <member name="M:ContentTypeTextNet.Library.SharedLibrary.Logic.Utility.RestrictUtility.Block``1(System.Func{``0})">
            <summary>
            ブロックを強制的に作る。
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="func"></param>
            <returns></returns>
        </member>
        <member name="M:ContentTypeTextNet.Library.SharedLibrary.Logic.Utility.RestrictUtility.Is``1(System.Boolean,System.Func{``0},System.Func{``0})">
            <summary>
            真偽で処理実行。
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="cond"></param>
            <param name="trueFunc"></param>
            <param name="falseFunc"></param>
            <returns></returns>
        </member>
        <member name="M:ContentTypeTextNet.Library.SharedLibrary.Logic.Utility.RestrictUtility.Is``1(System.Boolean,System.Func{``0})">
            <summary>
            真で処理実行。
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="cond"></param>
            <param name="trueFunc"></param>
            <returns></returns>
        </member>
        <member name="M:ContentTypeTextNet.Library.SharedLibrary.Logic.Utility.RestrictUtility.Is(System.Boolean,System.Action,System.Action)">
            <summary>
            真偽で処理実行。
            </summary>
            <param name="cond"></param>
            <param name="trueAction"></param>
            <param name="falseAction"></param>
        </member>
        <member name="M:ContentTypeTextNet.Library.SharedLibrary.Logic.Utility.RestrictUtility.Is``1(System.Boolean,System.Action)">
            <summary>
            真で処理実行。
            </summary>
            <typeparam name="TValue"></typeparam>
            <param name="cond"></param>
            <param name="action"></param>
        </member>
        <member name="M:ContentTypeTextNet.Library.SharedLibrary.Logic.Utility.RestrictUtility.IsNull``2(``0,System.Func{``1},System.Func{``0,``1})">
            <summary>
            指定オブジェクトが null の場合に処理実行。
            </summary>
            <typeparam name="TValue"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="value"></param>
            <param name="trueFunc"></param>
            <param name="falseFunc"></param>
            <returns></returns>
        </member>
        <member name="M:ContentTypeTextNet.Library.SharedLibrary.Logic.Utility.RestrictUtility.IsNull``2(``0,System.Func{``1})">
            <summary>
            指定オブジェクトが null の場合に処理実行。
            </summary>
            <typeparam name="TValue"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="value"></param>
            <param name="trueFunc"></param>
            <returns>偽の場合はTResultの初期値を返す。</returns>
        </member>
        <member name="M:ContentTypeTextNet.Library.SharedLibrary.Logic.Utility.RestrictUtility.IsNull``1(``0,System.Action,System.Action{``0})">
            <summary>
            指定オブジェクトが null の場合に処理実行。
            </summary>
            <typeparam name="TValue"></typeparam>
            <param name="value"></param>
            <param name="trueAction"></param>
            <param name="falseAction"></param>
        </member>
        <member name="M:ContentTypeTextNet.Library.SharedLibrary.Logic.Utility.RestrictUtility.IsNull``1(``0,System.Action)">
            <summary>
            指定オブジェクトが null の場合に処理実行。
            </summary>
            <typeparam name="TValue"></typeparam>
            <param name="value"></param>
            <param name="action"></param>
        </member>
        <member name="M:ContentTypeTextNet.Library.SharedLibrary.Logic.Utility.RestrictUtility.IsNotNull``2(``0,System.Func{``0,``1},System.Func{``1})">
            <summary>
            指定オブジェクトが非 null の場合に処理実行。
            </summary>
            <typeparam name="TValue"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="value"></param>
            <param name="trueFunc"></param>
            <param name="falseFunc"></param>
            <returns></returns>
        </member>
        <member name="M:ContentTypeTextNet.Library.SharedLibrary.Logic.Utility.RestrictUtility.IsNotNull``2(``0,System.Func{``0,``1})">
            <summary>
            指定オブジェクトが非 null の場合に処理実行。
            </summary>
            <typeparam name="TValue"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="value"></param>
            <param name="trueFunc"></param>
            <returns>偽の場合はTResultの初期値を返す。</returns>
        </member>
        <member name="M:ContentTypeTextNet.Library.SharedLibrary.Logic.Utility.UI.WebBrowserUtility.SetSilent(System.Windows.Controls.WebBrowser,System.Boolean)">
            <summary>
            <para>http://stackoverflow.com/questions/6138199/wpf-webbrowser-control-how-to-supress-script-errors?answertab=votes#tab-top</para>
            </summary>
            <param name="browser"></param>
            <param name="silent"></param>
        </member>
        <member name="M:ContentTypeTextNet.Library.SharedLibrary.Logic.Utility.UI.UIUtility.FindVisualChildren``1(System.Windows.DependencyObject)">
            <summary>
            <para>http://stackoverflow.com/questions/974598/find-all-controls-in-wpf-window-by-type</para>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="depObj"></param>
            <returns></returns>
        </member>
        <member name="M:ContentTypeTextNet.Library.SharedLibrary.Logic.Utility.UI.UIUtility.GetVisualParent(System.Windows.DependencyObject)">
            <summary>
            指定要素の表示要素から親要素を取得する。
            </summary>
            <param name="depObj"></param>
            <returns></returns>
        </member>
        <member name="M:ContentTypeTextNet.Library.SharedLibrary.Logic.Utility.UI.UIUtility.GetVisualClosest``1(System.Windows.DependencyObject)">
            <summary>
            指定要素の表示要素から指定した祖先要素を取得する。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="depObj"></param>
            <returns></returns>
        </member>
        <member name="M:ContentTypeTextNet.Library.SharedLibrary.Logic.Utility.UI.UIUtility.GetDpiScale(System.Windows.Media.Visual)">
            <summary>
            http://grabacr.net/archives/1105
            </summary>
            <param name="visual"></param>
            <returns></returns>
        </member>
        <member name="M:ContentTypeTextNet.Library.SharedLibrary.Logic.Utility.CastUtility.AsAction``1(System.Object,System.Action{``0})">
            <summary>
            オブジェクトがキャスト出来た場合に処理を行う。
            </summary>
            <typeparam name="TCast"></typeparam>
            <param name="arg"></param>
            <param name="action"></param>
        </member>
        <member name="M:ContentTypeTextNet.Library.SharedLibrary.Logic.Utility.CastUtility.AsFunc``2(System.Object,System.Func{``0,``1},``1)">
            <summary>
            オブジェクトがキャスト出来た場合に処理を行い、結果を返す。
            </summary>
            <typeparam name="TCast"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="arg"></param>
            <param name="func"></param>
            <param name="castErrorResult">キャスト失敗時の戻り値。</param>
            <returns></returns>
        </member>
        <member name="M:ContentTypeTextNet.Library.SharedLibrary.Logic.Utility.CastUtility.AsFunc``2(System.Object,System.Func{``0,``1})">
            <summary>
            オブジェクトがキャスト出来た場合に処理を行い、結果を返す。
            </summary>
            <typeparam name="TCast"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="arg"></param>
            <param name="func"></param>
            <returns>キャスト失敗時はTResultの初期値。</returns>
        </member>
        <member name="M:ContentTypeTextNet.Library.SharedLibrary.Logic.Utility.CastUtility.GetCastValue``1(System.Object,``0,ContentTypeTextNet.Library.SharedLibrary.IF.ILogger)">
            <summary>
            キャスト値をキャストに成功・失敗に関わらず取得する。
            </summary>
            <typeparam name="TResult">キャストする型。</typeparam>
            <param name="value">対象の値。</param>
            <param name="failReturnValue">キャスト失敗時に使用する値。</param>
            <param name="logger"></param>
            <returns>valueをTにキャストした値。失敗時はfailReturnValueが返される。</returns>
        </member>
        <member name="M:ContentTypeTextNet.Library.SharedLibrary.Logic.Utility.FontUtility.MakeFontFamily(System.String,System.Windows.Media.FontFamily)">
            <summary>
            指定フォントファミリ名からFontFamily作成。
            </summary>
            <param name="fontFamily">フォントファミリ名</param>
            <param name="defaultFontFamily">指定名から生成できなかった場合に代替として使用されるFontFamily。</param>
            <returns></returns>
        </member>
        <member name="M:ContentTypeTextNet.Library.SharedLibrary.Logic.Utility.FontUtility.GetOriginalFontFamilyName(System.Windows.Media.FontFamily)">
            <summary>
            <para>TODO: この環境で再現できないのでスタブのみ作成</para>
            </summary>
            <param name="fontFamily"></param>
            <returns></returns>
        </member>
        <member name="M:ContentTypeTextNet.Library.SharedLibrary.Logic.Utility.FreezableUtility.SafeFreeze(System.Windows.Freezable)">
            <summary>
            安全に<see cref="M:System.Windows.Freezable.Freeze"/>する。
            <para>どんな時にできないのかは知らん。</para>
            </summary>
            <param name="freezable"></param>
            <returns></returns>
        </member>
        <member name="T:ContentTypeTextNet.Library.SharedLibrary.Logic.Utility.EnumUtility">
            <summary>
            enumのしょうもない処理ユーティリティ。
            </summary>
        </member>
        <member name="M:ContentTypeTextNet.Library.SharedLibrary.Logic.Utility.EnumUtility.GetMembers``1(System.Type)">
            <summary>
            メンバ一覧を取得。
            </summary>
            <typeparam name="TEnum"></typeparam>
            <param name="enumType"></param>
            <returns></returns>
        </member>
        <member name="M:ContentTypeTextNet.Library.SharedLibrary.Logic.Utility.EnumUtility.GetMembers``1">
            <summary>
            型からメンバ一覧を取得。
            </summary>
            <typeparam name="TEnum"></typeparam>
            <returns></returns>
        </member>
        <member name="M:ContentTypeTextNet.Library.SharedLibrary.Logic.Utility.EnumUtility.GetNormalization``1(System.Object,``0)">
            <summary>
            指定値を正規化された enum の値に変換する。
            </summary>
            <typeparam name="TEnum"></typeparam>
            <param name="value"></param>
            <param name="defaultValue"></param>
            <returns>指定値がEnumに存在すれば指定値、存在しなければ<paramref name="defaultValue"/>を返す。</returns>
        </member>
        <member name="M:ContentTypeTextNet.Library.SharedLibrary.Logic.Utility.EnumUtility.Parse``1(System.String,System.Boolean)">
             <summary>
            列挙体メンバのパース。
            <para><see cref="M:System.Enum.Parse(System.Type,System.String)"/>のキャスト周りを簡略化した版。</para>
             </summary>
             <typeparam name="TEnum"></typeparam>
             <param name="value">変換する名前または値が含まれている文字列。</param>
             <param name="ignoreCase">大文字と小文字を区別しない場合は true。大文字と小文字を区別する場合は false。</param>
             <returns></returns>
        </member>
        <member name="M:ContentTypeTextNet.Library.SharedLibrary.Logic.Utility.MediaUtility.ConvertRawColorFromColor(System.Windows.Media.Color)">
            <summary>
            色を生値に変換。
            </summary>
            <param name="color"></param>
            <returns></returns>
        </member>
        <member name="M:ContentTypeTextNet.Library.SharedLibrary.Logic.Utility.MediaUtility.ConvertColorFromRawColor(System.UInt32)">
            <summary>
            生値を色に変換。
            </summary>
            <param name="rawColor"></param>
            <returns></returns>
        </member>
        <member name="M:ContentTypeTextNet.Library.SharedLibrary.Logic.Utility.MediaUtility.GetNegativeColor(System.Windows.Media.Color)">
            <summary>
            色反転。
            <para>透明度は保ったまま。</para>
            </summary>
            <param name="color"></param>
            <returns></returns>
        </member>
        <member name="M:ContentTypeTextNet.Library.SharedLibrary.Logic.Utility.MediaUtility.GetComplementaryColor(System.Windows.Media.Color)">
            <summary>
            補色。
            <para>透明度は保ったまま。</para>
            </summary>
            <param name="color"></param>
            <returns></returns>
        </member>
        <member name="M:ContentTypeTextNet.Library.SharedLibrary.Logic.Utility.MediaUtility.GetBrightness(System.Windows.Media.Color)">
            <summary>
            明るさを算出。
            </summary>
            http://www.kanzaki.com/docs/html/color-check
            <param name="color"></param>
            <returns></returns>
        </member>
        <member name="M:ContentTypeTextNet.Library.SharedLibrary.Logic.Utility.MediaUtility.GetAutoColor(System.Windows.Media.Color)">
            <summary>
            指定色から自動的に見やすそうな色を算出。
            </summary>
            <param name="color"></param>
            <returns></returns>
        </member>
        <member name="M:ContentTypeTextNet.Library.SharedLibrary.Logic.Utility.MediaUtility.GetNonTransparentColor(System.Windows.Media.Color)">
            <summary>
            指定色を非透明にする。
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ContentTypeTextNet.Library.SharedLibrary.Logic.Utility.MediaUtility.GetPixels(System.Windows.Media.Imaging.BitmapSource)">
            <summary>
            指定ビットマップソースから全ピクセル情報を取得。
            </summary>
            <param name="bitmapSource"></param>
            <returns></returns>
        </member>
        <member name="M:ContentTypeTextNet.Library.SharedLibrary.Logic.Utility.MediaUtility.GetColors(System.Byte[])">
            <summary>
            ピクセル情報から色へ変換。
            </summary>
            <param name="pixels">[B][G][R][A]... となっていることを期待。</param>
            <returns></returns>
        </member>
        <member name="M:ContentTypeTextNet.Library.SharedLibrary.Logic.Utility.MediaUtility.GetPredominantColorFromBitmapSource(System.Windows.Media.Imaging.BitmapSource,System.Byte)">
            <summary>
            画像の中から一番多そうな色を取得する。
            </summary>
            <param name="bitmapSource"></param>
            <param name="baseAlpha">指定した透明度以上のピクセル情報を算出に使用する。</param>
            <returns></returns>
        </member>
        <member name="M:ContentTypeTextNet.Library.SharedLibrary.Logic.Utility.MediaUtility.GetPredominantColor(System.Collections.Generic.IEnumerable{System.Windows.Media.Color},System.Byte)">
            <summary>
            渡された色の中から一番多そうな色を取得する。
            </summary>
            <param name="colors"></param>
            <param name="baseAlpha">指定した透明度以上のピクセル情報を算出に使用する。</param>
            <returns></returns>
        </member>
        <member name="M:ContentTypeTextNet.Library.SharedLibrary.Logic.Utility.MediaUtility.ColoringImage(System.Windows.Media.Imaging.BitmapSource,System.Windows.Media.Color)">
            <summary>
            ビットマップに対して着色を行う。
            <para>黒が塗られる領域。</para>
            </summary>
            <param name="targetBitmap"></param>
            <param name="color"></param>
            <returns></returns>
        </member>
        <member name="M:ContentTypeTextNet.Library.SharedLibrary.Logic.Utility.MediaUtility.MakeBitmapSource(System.Windows.FrameworkElement,System.Windows.Point,System.Boolean)">
            <summary>
            指定要素をビットマップに落とし込む。
            </summary>
            <param name="element"></param>
            <param name="dpi"></param>
            <param name="useActual"></param>
            <returns></returns>
        </member>
        <member name="M:ContentTypeTextNet.Library.SharedLibrary.Logic.Utility.MediaUtility.MakeBitmapSourceDefualtDpi(System.Windows.FrameworkElement,System.Boolean)">
            <summary>
            指定要素をビットマップに落とし込む。
            <para>DPIは96を使用する。</para>
            </summary>
            <param name="element"></param>
            <param name="useActual"></param>
            <returns></returns>
        </member>
        <member name="M:ContentTypeTextNet.Library.SharedLibrary.Logic.Utility.RangeUtility.Between``1(``0,``0,``0)">
            <summary>
            min &lt;= value &lt;= max
            </summary>
            <typeparam name="TValue"></typeparam>
            <param name="value"></param>
            <param name="min"></param>
            <param name="max"></param>
            <returns></returns>
        </member>
        <member name="M:ContentTypeTextNet.Library.SharedLibrary.Logic.Utility.RangeUtility.Clamp``1(``0,``0,``0)">
            <summary>
            丸め。
            <para>valueがmin未満かmaxより多ければminかmaxの適応する方に丸める。</para>
            </summary>
            <typeparam name="TValue"></typeparam>
            <param name="value"></param>
            <param name="min"></param>
            <param name="max"></param>
            <returns></returns>
        </member>
        <member name="M:ContentTypeTextNet.Library.SharedLibrary.Logic.Utility.RangeUtility.Increment(System.Int32)">
            <summary>
            それっぽくインクリメント。
            </summary>
            <param name="value"></param>
            <returns>最大値であればそのまま返す。</returns>
        </member>
        <member name="M:ContentTypeTextNet.Library.SharedLibrary.Logic.Utility.RangeUtility.Increment(System.UInt32)">
            <summary>
            それっぽくインクリメント。
            </summary>
            <param name="value"></param>
            <returns>最大値であればそのまま返す。</returns>
        </member>
        <member name="M:ContentTypeTextNet.Library.SharedLibrary.Logic.Utility.RangeUtility.Increment(System.Int16)">
            <summary>
            それっぽくインクリメント。
            </summary>
            <param name="value"></param>
            <returns>最大値であればそのまま返す。</returns>
        </member>
        <member name="M:ContentTypeTextNet.Library.SharedLibrary.Logic.Utility.RangeUtility.Increment(System.UInt16)">
            <summary>
            それっぽくインクリメント。
            </summary>
            <param name="value"></param>
            <returns>最大値であればそのまま返す。</returns>
        </member>
        <member name="M:ContentTypeTextNet.Library.SharedLibrary.Logic.Utility.RangeUtility.Increment(System.Byte)">
            <summary>
            それっぽくインクリメント。
            </summary>
            <param name="value"></param>
            <returns>最大値であればそのまま返す。</returns>
        </member>
        <member name="T:ContentTypeTextNet.Library.SharedLibrary.Logic.Utility.ScreenUtility">
            <summary>
            スクリーン共通処理。
            </summary>
        </member>
        <member name="M:ContentTypeTextNet.Library.SharedLibrary.Logic.Utility.ScreenUtility.GetScreenName(ContentTypeTextNet.Library.SharedLibrary.Model.ScreenModel,ContentTypeTextNet.Library.SharedLibrary.IF.ILogger)">
            <summary>
            スクリーンの名前を取得。
            </summary>
            <param name="screen"></param>
            <param name = "logger"></param>
            <returns></returns>
        </member>
        <member name="M:ContentTypeTextNet.Library.SharedLibrary.Logic.Utility.ScreenUtility.MoveCenter(System.Windows.Window,ContentTypeTextNet.Library.SharedLibrary.Model.ScreenModel)">
            <summary>
            ウィンドウを指定スクリーンの中央に移動。
            </summary>
            <param name="window"></param>
            <param name="screen"></param>
        </member>
        <member name="T:ContentTypeTextNet.Library.SharedLibrary.Logic.Utility.IconUtility">
            <summary>
            アイコン取得共通処理。
            </summary>
        </member>
        <member name="M:ContentTypeTextNet.Library.SharedLibrary.Logic.Utility.IconUtility.GetThumbnailImage(System.String,ContentTypeTextNet.Library.SharedLibrary.Define.IconScale,ContentTypeTextNet.Library.SharedLibrary.IF.ILogger)">
            <summary>
            ファイルのサムネイルを取得。
            </summary>
            <param name="iconPath"></param>
            <param name="iconScale"></param>
            <param name="logger"></param>
            <returns></returns>
        </member>
        <member name="M:ContentTypeTextNet.Library.SharedLibrary.Logic.Utility.IconUtility.GetResourceBinaryData(System.IntPtr,System.IntPtr,ContentTypeTextNet.Library.PInvoke.Windows.ResType)">
            <summary>
            http://hp.vector.co.jp/authors/VA016117/rsrc2icon.html
            </summary>
            <param name="hModule"></param>
            <param name="name"></param>
            <param name="resType"></param>
            <returns></returns>
        </member>
        <member name="M:ContentTypeTextNet.Library.SharedLibrary.Logic.Utility.IconUtility.LoadIconResource(System.String)">
            <summary>
            https://github.com/TsudaKageyu/IconExtractor
            </summary>
            <param name="resourcePath"></param>
            <returns></returns>
        </member>
        <member name="M:ContentTypeTextNet.Library.SharedLibrary.Logic.Utility.IconUtility.LoadNormalIcon(System.String,ContentTypeTextNet.Library.SharedLibrary.Define.IconScale,System.Int32,System.Boolean,ContentTypeTextNet.Library.SharedLibrary.IF.ILogger)">
            <summary>
            16px, 32pxアイコン取得。
            </summary>
            <param name="iconPath"></param>
            <param name="iconScale"></param>
            <param name="iconIndex"></param>
            <param name="hasIcon"></param>
            <param name="logger"></param>
            <returns></returns>
        </member>
        <member name="M:ContentTypeTextNet.Library.SharedLibrary.Logic.Utility.IconUtility.LoadLargeIcon(System.String,ContentTypeTextNet.Library.SharedLibrary.Define.IconScale,System.Int32,System.Boolean,ContentTypeTextNet.Library.SharedLibrary.IF.ILogger)">
            <summary>
            48px以上のアイコン取得。
            </summary>
            <param name="iconPath"></param>
            <param name="iconScale"></param>
            <param name="iconIndex"></param>
            <param name="hasIcon"></param>
            <param name="logger"></param>
            <returns></returns>
        </member>
        <member name="M:ContentTypeTextNet.Library.SharedLibrary.Logic.Utility.IconUtility.Load(System.String,ContentTypeTextNet.Library.SharedLibrary.Define.IconScale,System.Int32,ContentTypeTextNet.Library.SharedLibrary.IF.ILogger)">
            <summary>
            アイコンを取得。
            </summary>
            <param name="iconPath">対象ファイルパス。</param>
            <param name="iconScale">アイコンサイズ。</param>
            <param name="iconIndex">アイコンインデックス。</param>
            <param name="logger"></param>
            <returns>取得したアイコン。呼び出し側で破棄が必要。</returns>
        </member>
        <member name="M:ContentTypeTextNet.Library.SharedLibrary.Logic.Utility.CheckUtility.Enforce``1(System.Boolean)">
            <summary>
            真を強制させる。
            </summary>
            <typeparam name="TException">失敗時に投げられる例外。</typeparam>
            <param name="test">テスト。</param>
            <exception>TException: テスト失敗時に投げられる。</exception>
        </member>
        <member name="M:ContentTypeTextNet.Library.SharedLibrary.Logic.Utility.CheckUtility.Enforce(System.Boolean)">
            <summary>
            真を強制させる。
            </summary>
            <param name="test">テスト。</param>
            <exception cref="T:System.Exception">テスト失敗時に投げられる。</exception>
        </member>
        <member name="M:ContentTypeTextNet.Library.SharedLibrary.Logic.Utility.CheckUtility.EnforceNotNull``1(``0)">
            <summary>
            非nullを強制。
            </summary>
            <typeparam name="TClass"></typeparam>
            <param name="obj"></param>
            <exception cref="T:System.ArgumentNullException">null。</exception>
        </member>
        <member name="M:ContentTypeTextNet.Library.SharedLibrary.Logic.Utility.CheckUtility.EnforceNotNull``1(System.Nullable{``0})">
            <summary>
            非nullを強制。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="nullable"></param>
        </member>
        <member name="M:ContentTypeTextNet.Library.SharedLibrary.Logic.Utility.CheckUtility.EnforceNotNullAndNotEmpty(System.String)">
            <summary>
            文字列が非nullで長さ0でないことを強制。
            </summary>
            <param name="s"></param>
        </member>
        <member name="M:ContentTypeTextNet.Library.SharedLibrary.Logic.Utility.CheckUtility.EnforceNotNullAndNotWhiteSpace(System.String)">
            <summary>
            文字列が非nullでホワイトスペースのみでないことを強制。
            </summary>
            <param name="s"></param>
        </member>
        <member name="M:ContentTypeTextNet.Library.SharedLibrary.Logic.Utility.DockTypeUtility.ToABE(ContentTypeTextNet.Library.SharedLibrary.Define.DockType)">
            <summary>
            ABEへ変換。
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:ContentTypeTextNet.Library.SharedLibrary.Logic.Utility.DockTypeUtility.ToDockType(ContentTypeTextNet.Library.PInvoke.Windows.ABE)">
            <summary>
            DesktopDockTypeへ変換。
            </summary>
            <param name="abe"></param>
            <returns></returns>
        </member>
        <member name="M:ContentTypeTextNet.Library.SharedLibrary.Logic.Utility.PathUtility.AppendExtension(System.String,System.String)">
            <summary>
            パスに拡張子を追加する。
            </summary>
            <param name="path"></param>
            <param name="ext"></param>
            <returns></returns>
        </member>
        <member name="M:ContentTypeTextNet.Library.SharedLibrary.Logic.Utility.PathUtility.ToSafeName(System.String,System.Func{System.Char,System.String})">
            <summary>
            ファイル名をそれとなく安全な名称に変更する。
            </summary>
            <param name="name"></param>
            <param name="fn"></param>
            <returns></returns>
        </member>
        <member name="M:ContentTypeTextNet.Library.SharedLibrary.Logic.Utility.PathUtility.ToSafeNameDefault(System.String)">
            <summary>
            ファイル名のシステムで使用できない文字を '_' に置き換える。
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:ContentTypeTextNet.Library.SharedLibrary.Logic.Utility.PathUtility.HasIconPath(System.String)">
            <summary>
            アイコンを持つパスか。
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:ContentTypeTextNet.Library.SharedLibrary.Logic.Utility.PathUtility.IsShortcut(System.String)">
            <summary>
            ショートカットか。
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:ContentTypeTextNet.Library.SharedLibrary.Logic.Utility.PathUtility.IsProgram(System.String)">
            <summary>
            実行形式か。
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:ContentTypeTextNet.Library.SharedLibrary.Logic.Utility.PathUtility.GetCurrentTimestampFileName">
            <summary>
            ファイル名に使用可能なタイムスタンプを取得。
            </summary>
            <returns></returns>
        </member>
        <member name="M:ContentTypeTextNet.Library.SharedLibrary.Logic.Utility.PathUtility.GetTemporaryExtension(System.String)">
            <summary>
            一時ファイル用拡張子の作成。
            <para>現在時間を用いる。</para>
            </summary>
            <returns></returns>
        </member>
        <member name="M:ContentTypeTextNet.Library.SharedLibrary.Logic.Utility.PathUtility.CreateFileNameCore(System.String,System.String,System.String)">
            <summary>
            一時ファイル用拡張子の作成。
            </summary>
            <param name="name">ファイル名。</param>
            <param name="role">役割。</param>
            <param name="extension">拡張子。</param>
            <returns></returns>
        </member>
        <member name="M:ContentTypeTextNet.Library.SharedLibrary.Logic.Utility.PathUtility.CreateFileName(System.String,System.String,System.String)">
            <summary>
            ファイル名を生成。
            </summary>
            <param name="name">ファイル名。</param>
            <param name="role">役割。</param>
            <param name="extension">拡張子。</param>
            <returns></returns>
        </member>
        <member name="M:ContentTypeTextNet.Library.SharedLibrary.Logic.Utility.PathUtility.CreateFileName(System.String,System.String)">
            <summary>
            ファイル名を生成。
            </summary>
            <param name="name">ファイル名。</param>
            <param name="extension">拡張子。</param>
            <returns></returns>
        </member>
        <member name="T:ContentTypeTextNet.Library.SharedLibrary.Logic.Utility.TextUtility">
            <summary>
            文字列処理共通。
            </summary>
        </member>
        <member name="M:ContentTypeTextNet.Library.SharedLibrary.Logic.Utility.TextUtility.ToUnique(System.String,System.Collections.Generic.IEnumerable{System.String},System.Func{System.String,System.Int32,System.String})">
            <summary>
            指定データを集合の中から単一である値に変換する。
            </summary>
            <param name="target"></param>
            <param name="list"></param>
            <param name="dg">nullの場合はデフォルト動作</param>
            <returns></returns>
        </member>
        <member name="M:ContentTypeTextNet.Library.SharedLibrary.Logic.Utility.TextUtility.ToUnique(System.String,System.Collections.Generic.IEnumerable{System.String},System.StringComparison,System.Func{System.String,System.Int32,System.String})">
            <summary>
            指定データを集合の中から単一である値に変換する。
            </summary>
            <param name="target"></param>
            <param name="list"></param>
            <param name="comparisonType">比較</param>
            <param name="dg">nullの場合はデフォルト動作</param>
            <returns></returns>
        </member>
        <member name="M:ContentTypeTextNet.Library.SharedLibrary.Logic.Utility.TextUtility.ToUniqueDefault(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            指定データを集合の中から単一である値に変換する。
            </summary>
            <param name="target"></param>
            <param name="list"></param>
            <returns>集合の中に同じものがなければtarget, 存在すればtarget(n)。</returns>
        </member>
        <member name="M:ContentTypeTextNet.Library.SharedLibrary.Logic.Utility.TextUtility.ToUniqueDefault(System.String,System.Collections.Generic.IEnumerable{System.String},System.StringComparison)">
            <summary>
            指定データを集合の中から単一である値に変換する。
            </summary>
            <param name="target"></param>
            <param name="list"></param>
            <param name="comparisonType"></param>
            <returns>集合の中に同じものがなければtarget, 存在すればtarget(n)。</returns>
        </member>
        <member name="M:ContentTypeTextNet.Library.SharedLibrary.Logic.Utility.TextUtility.ToStringCollection(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            指定文字列集合を<see cref="T:System.Collections.Specialized.StringCollection"/>に変換する。
            </summary>
            <param name="seq"></param>
            <returns></returns>
        </member>
        <member name="M:ContentTypeTextNet.Library.SharedLibrary.Logic.Utility.TextUtility.WhitespaceToQuotation(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            ホワイトスペースがあれば " で括る。
            </summary>
            <param name="seq"></param>
            <returns></returns>
        </member>
        <member name="T:ContentTypeTextNet.Library.SharedLibrary.Logic.Utility.FileUtility">
            <summary>
            ファイル関連の共通処理。
            </summary>
        </member>
        <member name="M:ContentTypeTextNet.Library.SharedLibrary.Logic.Utility.FileUtility.CreateBinaryReader(System.String)">
            <summary>
            バイナリファイル読み込み用ストリーム生成。
            <para>排他処理はしない。</para>
            </summary>
            <param name="filePath">読み込むファイルパス。</param>
            <returns>ストリーム。</returns>
        </member>
        <member name="M:ContentTypeTextNet.Library.SharedLibrary.Logic.Utility.FileUtility.ToBinary(System.String,System.Int32,System.Int32)">
            <summary>
            ファイルをバイナリとして読み込む。
            <para><see cref="M:System.IO.File.ReadAllBytes(System.String)"/> は開いているファイルを読めないのでこちらを使用する。</para>
            </summary>
            <param name="filePath">ファイルパス</param>
            <param name="startIndex">読み出し位置</param>
            <param name="readLength">読み出しサイズ</param>
            <returns></returns>
        </member>
        <member name="M:ContentTypeTextNet.Library.SharedLibrary.Logic.Utility.FileUtility.ToBinary(System.String)">
            <summary>
            ファイルをバイナリとして読み込む。
            </summary>
            <param name="filePath">ファイルパス</param>
            <returns></returns>
        </member>
        <member name="M:ContentTypeTextNet.Library.SharedLibrary.Logic.Utility.FileUtility.MakeFileParentDirectory(System.String)">
            <summary>
            ファイルパスを元にディレクトリを作成
            </summary>
            <param name="path">ファイルパス</param>
            <returns>ディレクトリパス</returns>
        </member>
        <member name="M:ContentTypeTextNet.Library.SharedLibrary.Logic.Utility.FileUtility.Exists(System.String)">
            <summary>
            ファイル・ディレクトリ問わずに存在するか
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:ContentTypeTextNet.Library.SharedLibrary.Logic.Utility.FileUtility.RotateFiles(System.String,System.String,ContentTypeTextNet.Library.SharedLibrary.Define.OrderBy,System.Int32,System.Func{System.Exception,System.Boolean})">
            <summary>
            指定条件で不要ファイルを削除。
            </summary>
            <param name="baseDirectoryPath">対象ファイル群のディレクトリ。</param>
            <param name="targetWildcard">対象ファイル群をワイルドカードで指定。</param>
            <param name="orderBy">リストアップしたファイル群のソート順。真で昇順。</param>
            <param name="enableCount">リストアップしたファイル群の上位から残すファイル数。</param>
            <param name="catchException">ファイル削除中に例外を受け取った場合の処理。trueを返すと継続、falseで処理終了。</param>
            <returns>削除ファイル数。baseDirPathが存在しない場合は -1。</returns>
        </member>
        <member name="M:ContentTypeTextNet.Library.SharedLibrary.Logic.Utility.FileUtility.GetName(System.String)">
            <summary>
            パスから名前取得。
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:ContentTypeTextNet.Library.SharedLibrary.Logic.Utility.ReflectionUtility.GetMembers(System.Object,System.Collections.Generic.IEnumerable{System.Reflection.PropertyInfo})">
            <summary>
            メンバ名とその値を取得する。
            </summary>
            <param name="obj"></param>
            <param name="propertyInfos"></param>
            <returns></returns>
        </member>
        <member name="M:ContentTypeTextNet.Library.SharedLibrary.Logic.Utility.ReflectionUtility.GetNameValueStrings(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            メンバ名と値を結合してそのリストを取得する。
            </summary>
            <param name="nameValues"></param>
            <returns></returns>
        </member>
        <member name="M:ContentTypeTextNet.Library.SharedLibrary.Logic.Utility.ReflectionUtility.JoinNameValueStrings(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            メンバ名と値を結合したリストを一つの文字列にする。
            </summary>
            <param name="nameValues"></param>
            <returns></returns>
        </member>
        <member name="M:ContentTypeTextNet.Library.SharedLibrary.Logic.Utility.ReflectionUtility.GetObjectString(System.Object)">
            <summary>
            メンバ名と値を保持するオブジェクトを文字列にする。
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="T:ContentTypeTextNet.Library.SharedLibrary.Logic.Utility.SerializeUtility">
            <summary>
            設定の入出力。
            </summary>
        </member>
        <member name="M:ContentTypeTextNet.Library.SharedLibrary.Logic.Utility.SerializeUtility.HasDataContract``1">
            <summary>
            <see cref="T:System.Runtime.Serialization.DataContractAttribute"/>属性を保持しているか。
            <para>http://stackoverflow.com/questions/221687/can-you-use-where-to-require-an-attribute-in-c</para>
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:ContentTypeTextNet.Library.SharedLibrary.Logic.Utility.SerializeUtility.HasSerializable``1">
            <summary>
            <see cref="T:System.SerializableAttribute"/>属性を保持しているか。
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:ContentTypeTextNet.Library.SharedLibrary.Logic.Utility.SerializeUtility.CreateReadFileStream(System.String)">
            <summary>
            ファイル入力用ストリームを作成。
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:ContentTypeTextNet.Library.SharedLibrary.Logic.Utility.SerializeUtility.CreateWriteFileStream(System.String)">
            <summary>
            ファイル出力用ストリームを作成。
            <para>親ディレクトリが必要なら勝手に作る。</para>
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:ContentTypeTextNet.Library.SharedLibrary.Logic.Utility.SerializeUtility.LoadXmlDataFromStream``1(System.IO.Stream)">
            <summary>
            XMLストリーム読み込み。
            <para><see cref="T:System.Runtime.Serialization.DataContractAttribute"/>を使用。</para>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="stream"></param>
            <returns></returns>
        </member>
        <member name="M:ContentTypeTextNet.Library.SharedLibrary.Logic.Utility.SerializeUtility.LoadXmlDataFromFile``1(System.String)">
            <summary>
            XMLファイル読み込み。
            <para><see cref="T:System.Runtime.Serialization.DataContractAttribute"/>を使用。</para>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="filePath"></param>
            <returns></returns>
        </member>
        <member name="M:ContentTypeTextNet.Library.SharedLibrary.Logic.Utility.SerializeUtility.LoadXmlSerializeFromStream``1(System.IO.Stream)">
            <summary>
            XMLストリーム読み込み。
            <para><see cref="T:System.SerializableAttribute"/>を使用。</para>
            <para>http://stackoverflow.com/questions/2209443/c-sharp-xmlserializer-bindingfailure</para>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="stream"></param>
            <returns></returns>
        </member>
        <member name="M:ContentTypeTextNet.Library.SharedLibrary.Logic.Utility.SerializeUtility.LoadXmlSerializeFromFile``1(System.String)">
            <summary>
            XMLファイル読み込み。
            <para><see cref="T:System.SerializableAttribute"/>を使用。</para>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="filePath"></param>
            <returns></returns>
        </member>
        <member name="M:ContentTypeTextNet.Library.SharedLibrary.Logic.Utility.SerializeUtility.SaveXmlDataToStream``1(System.IO.Stream,``0)">
            <summary>
            XMLストリーム書き出し。
            <para><see cref="T:System.Runtime.Serialization.DataContractAttribute"/>を使用。</para>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="stream"></param>
            <param name="model"></param>
        </member>
        <member name="M:ContentTypeTextNet.Library.SharedLibrary.Logic.Utility.SerializeUtility.SaveXmlDataToFile``1(System.String,``0)">
            <summary>
            XMLファイル書き出し。
            <para><see cref="T:System.Runtime.Serialization.DataContractAttribute"/>を使用。</para>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="filePath"></param>
            <param name="model"></param>
        </member>
        <member name="M:ContentTypeTextNet.Library.SharedLibrary.Logic.Utility.SerializeUtility.SaveXmlSerializeToStream``1(System.IO.Stream,``0)">
            <summary>
            XMLストリーム書き出し。
            <para><see cref="T:System.SerializableAttribute"/>を使用。</para>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="stream"></param>
            <param name="model"></param>
        </member>
        <member name="M:ContentTypeTextNet.Library.SharedLibrary.Logic.Utility.SerializeUtility.SaveXmlSerializeToFile``1(System.String,``0)">
            <summary>
            XMLファイル書き出し。
            <para><see cref="T:System.SerializableAttribute"/>を使用。</para>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="filePath"></param>
            <param name="model"></param>
        </member>
        <member name="M:ContentTypeTextNet.Library.SharedLibrary.Logic.Utility.SerializeUtility.LoadJsonDataFromStream``1(System.IO.Stream)">
            <summary>
            Jsonストリーム読み込み。
            <para><see cref="T:System.Runtime.Serialization.DataContractAttribute"/>を使用。</para>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="stream"></param>
            <returns></returns>
        </member>
        <member name="M:ContentTypeTextNet.Library.SharedLibrary.Logic.Utility.SerializeUtility.LoadJsonDataFromFile``1(System.String)">
            <summary>
            Jsonファイル読み込み。
            <para><see cref="T:System.Runtime.Serialization.DataContractAttribute"/>を使用。</para>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="filePath"></param>
            <returns></returns>
        </member>
        <member name="M:ContentTypeTextNet.Library.SharedLibrary.Logic.Utility.SerializeUtility.SaveJsonDataToStream``1(System.IO.Stream,``0)">
            <summary>
            Jsonストリーム書き出し。
            <para><see cref="T:System.Runtime.Serialization.DataContractAttribute"/>を使用。</para>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="stream"></param>
            <param name="model"></param>
        </member>
        <member name="M:ContentTypeTextNet.Library.SharedLibrary.Logic.Utility.SerializeUtility.SaveJsonDataToFile``1(System.String,``0)">
            <summary>
            Jsonファイル書き出し。
            <para><see cref="T:System.Runtime.Serialization.DataContractAttribute"/>を使用。</para>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="filePath"></param>
            <param name="model"></param>
        </member>
        <member name="M:ContentTypeTextNet.Library.SharedLibrary.Logic.Utility.SerializeUtility.SaveBinaryDataToStream``1(System.IO.Stream,``0)">
            <summary>
            バイナリストリーム書き出し。
            <para><see cref="T:System.Runtime.Serialization.DataContractAttribute"/>を使用。</para>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="stream"></param>
            <param name="model"></param>
        </member>
        <member name="M:ContentTypeTextNet.Library.SharedLibrary.Logic.Utility.SerializeUtility.SaveBinaryDataToFile``1(System.String,``0)">
            <summary>
            バイナリファイル書き出し。
            <para><see cref="T:System.Runtime.Serialization.DataContractAttribute"/>を使用。</para>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="filePath"></param>
            <param name="model"></param>
        </member>
        <member name="M:ContentTypeTextNet.Library.SharedLibrary.Logic.Utility.SerializeUtility.LoadBinaryDataFromFile``1(System.String)">
            <summary>
            バイナリファイル読み込み。
            <para><see cref="T:System.Runtime.Serialization.DataContractAttribute"/>を使用。</para>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="filePath"></param>
            <returns></returns>
        </member>
        <member name="M:ContentTypeTextNet.Library.SharedLibrary.Logic.Utility.SerializeUtility.LoadSetting``1(System.String,ContentTypeTextNet.Library.SharedLibrary.Define.SerializeFileType,ContentTypeTextNet.Library.SharedLibrary.IF.ILogger)">
            <summary>
            設定ファイルの読込。
            <para>設定ファイルが読み込めない場合、new Tを使用する。</para>
            </summary>
            <typeparam name="T">読み込むデータ型</typeparam>
            <param name="path">読み込むファイル</param>
            <param name="fileType">ファイル種別</param>
            <param name="logger">ログ出力</param>
            <returns>読み込んだデータ。読み込めなかった場合は new T を返す。</returns>
        </member>
        <member name="M:ContentTypeTextNet.Library.SharedLibrary.Logic.Utility.SerializeUtility.SaveSetting``1(System.String,``0,ContentTypeTextNet.Library.SharedLibrary.Define.SerializeFileType,System.Boolean,ContentTypeTextNet.Library.SharedLibrary.IF.ILogger)">
            <summary>
            設定ファイルの出力。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="path"></param>
            <param name="model"></param>
            <param name="fileType"></param>
            <param name="usingTemporary">一時出力を使用するか</param>
            <param name="logger"></param>
        </member>
        <member name="T:ContentTypeTextNet.Library.SharedLibrary.Logic.RetryBase`1">
            <summary>
            定型の再試行処理を行う。
            </summary>
        </member>
        <member name="P:ContentTypeTextNet.Library.SharedLibrary.Logic.RetryBase`1.WaitCurrentCount">
            <summary>
            待った回数。
            </summary>
        </member>
        <member name="P:ContentTypeTextNet.Library.SharedLibrary.Logic.RetryBase`1.WaitMaxCount">
            <summary>
            最大待ち回数。
            </summary>
        </member>
        <member name="P:ContentTypeTextNet.Library.SharedLibrary.Logic.RetryBase`1.WaitOver">
            <summary>
            待ち過ぎた。
            </summary>
        </member>
        <member name="T:ContentTypeTextNet.Library.SharedLibrary.Logic.MVMPairCollectionBase`2">
            <summary>
            ModelとViewModelの対となるコレクションを保持する。
            </summary>
            <typeparam name="TModel"></typeparam>
            <typeparam name="TViewModel"></typeparam>
        </member>
        <member name="M:ContentTypeTextNet.Library.SharedLibrary.Logic.MVMPairCollectionBase`2.CreateViewModel(`0,System.Object)">
            <summary>
            ViewModelを作成。
            </summary>
            <param name="model">元になるModel。</param>
            <param name="data">ViewModel生成に必要なModel以外のデータ。</param>
            <returns></returns>
        </member>
        <member name="T:ContentTypeTextNet.Library.SharedLibrary.Logic.Cacher`2">
            <summary>
            生成データを保持しておく。
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
        </member>
        <member name="M:ContentTypeTextNet.Library.SharedLibrary.Logic.Cacher`2.#ctor">
             <summary>
            非スレッドセーフでキャッシュ構築。
             </summary>
        </member>
        <member name="M:ContentTypeTextNet.Library.SharedLibrary.Logic.Cacher`2.#ctor(System.Boolean)">
            <summary>
            キャッシュ構築。
            </summary>
            <param name="isSynchronized">スレッドセーフにするか。</param>
        </member>
        <member name="P:ContentTypeTextNet.Library.SharedLibrary.Logic.Cacher`2.IsSynchronized">
            <summary>
            スレッドセーフか。
            </summary>
        </member>
        <member name="P:ContentTypeTextNet.Library.SharedLibrary.Logic.Cacher`2.Cache">
            <summary>
            キャッシュデータ。
            </summary>
        </member>
        <member name="M:ContentTypeTextNet.Library.SharedLibrary.Logic.Cacher`2.Get(`0,System.Func{`1})">
            <summary>
            指定キーからデータを取得する。
            <para>指定キーにデータがなければデータを生成してキャッシュに入れる。</para>
            </summary>
            <param name="key"></param>
            <param name="creator"></param>
            <returns></returns>
        </member>
        <member name="M:ContentTypeTextNet.Library.SharedLibrary.Logic.Cacher`2.ClearCache(`0)">
            <summary>
            指定キーのキャッシュをクリア。
            </summary>
            <param name="key"></param>
            <returns>クリア出来れば真。</returns>
        </member>
        <member name="M:ContentTypeTextNet.Library.SharedLibrary.Logic.Cacher`2.Clear">
            <summary>
            全キャッシュデータのクリア。
            </summary>
        </member>
        <member name="M:ContentTypeTextNet.Library.SharedLibrary.Logic.Caching`2.#ctor">
             <summary>
            非スレッドセーフでキャッシュ構築。
             </summary>
        </member>
        <member name="M:ContentTypeTextNet.Library.SharedLibrary.Logic.Caching`2.#ctor(System.Boolean)">
            <summary>
            キャッシュ構築。
            </summary>
            <param name="isSynchronized">スレッドセーフにするか。</param>
        </member>
        <member name="M:ContentTypeTextNet.Library.SharedLibrary.Logic.HitState.CalculateAndSetValue(System.Windows.Rect,System.Windows.Thickness,System.Windows.Point)">
            <summary>
            領域とパディング、カーソル位置から各種値の計算と設定。
            </summary>
            <param name="area">全体領域。</param>
            <param name="thickness">パディング領域。</param>
            <param name="point">判定座標。</param>
        </member>
        <member name="T:ContentTypeTextNet.Library.SharedLibrary.Logic.InformationCollection">
            <summary>
            各種情報を取得する。
            </summary>
        </member>
        <member name="M:ContentTypeTextNet.Library.SharedLibrary.Logic.InformationCollection.GetInfo(System.Management.ManagementClass,System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            
            </summary>
            <param name="managementClass"></param>
            <param name="groupName"></param>
            <param name="selectKeys">取り出すキー名を指定。nullで制限なし。</param>
            <returns></returns>
        </member>
        <member name="M:ContentTypeTextNet.Library.SharedLibrary.Logic.InformationCollection.GetCPU">
            <summary>
            </summary>
            <returns></returns>
        </member>
        <member name="M:ContentTypeTextNet.Library.SharedLibrary.Logic.InformationCollection.GetMemory">
            <summary>
            メモリ情報取得
            </summary>
            <returns></returns>
        </member>
        <member name="T:ContentTypeTextNet.Library.SharedLibrary.Logic.TimeLogger">
            <summary>
            開始と終了を記録するログ。
            </summary>
        </member>
        <member name="T:ContentTypeTextNet.Library.SharedLibrary.Logic.CommandLine">
            <summary>
            コマンドライン引数を分解したりなんやしたり。
            <para>想定しているのは /xx=xx みたいな キーと値がセパレータでくっついているデータ。</para>
            </summary>
        </member>
        <member name="M:ContentTypeTextNet.Library.SharedLibrary.Logic.CommandLine.ToCommandLineArguments(System.String)">
            <summary>
            文字列からコマンドラインパラメータを作成。
            <para>http://stackoverflow.com/questions/298830/split-string-containing-command-line-parameters-into-string-in-c-sharp</para>
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:ContentTypeTextNet.Library.SharedLibrary.Logic.CommandLine.Create(System.String)">
            <summary>
            文字列から<see cref="T:ContentTypeTextNet.Library.SharedLibrary.Logic.CommandLine"/>を作成。
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:ContentTypeTextNet.Library.SharedLibrary.Logic.CommandLine.#ctor">
            <summary>
            起動時のオプションから呼び出されることを想定
            </summary>
        </member>
        <member name="M:ContentTypeTextNet.Library.SharedLibrary.Logic.CommandLine.#ctor(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            スタートアップ関数から呼び出されることを想定
            </summary>
            <param name="args"></param>
        </member>
        <member name="P:ContentTypeTextNet.Library.SharedLibrary.Logic.CommandLine.KeyValueHeader">
            <summary>
            オプションヘッダ。
            </summary>
        </member>
        <member name="P:ContentTypeTextNet.Library.SharedLibrary.Logic.CommandLine.KeyValueSeparator">
            <summary>
            オプション分割文字。
            </summary>
        </member>
        <member name="P:ContentTypeTextNet.Library.SharedLibrary.Logic.CommandLine.Options">
            <summary>
            渡されたコマンドラインを統括。
            </summary>
        </member>
        <member name="P:ContentTypeTextNet.Library.SharedLibrary.Logic.CommandLine.Length">
            <summary>
            オプション数。
            </summary>
        </member>
        <member name="M:ContentTypeTextNet.Library.SharedLibrary.Logic.CommandLine.SplitKeyValue(System.String)">
            <summary>
            キー <see cref="P:ContentTypeTextNet.Library.SharedLibrary.Logic.CommandLine.KeyValueHeader"/> 値を分割。
            </summary>
            <param name="pair"></param>
            <returns></returns>
        </member>
        <member name="M:ContentTypeTextNet.Library.SharedLibrary.Logic.CommandLine.Find(System.String)">
            <summary>
            指定した<see cref="P:ContentTypeTextNet.Library.SharedLibrary.Logic.CommandLine.KeyValueHeader"/> + オプション 検索。
            </summary>
            <param name="keyOption"><see cref="P:ContentTypeTextNet.Library.SharedLibrary.Logic.CommandLine.KeyValueHeader"/>を含むキー名。</param>
            <returns></returns>
        </member>
        <member name="M:ContentTypeTextNet.Library.SharedLibrary.Logic.CommandLine.HasOption(System.String)">
            <summary>
            <see cref="P:ContentTypeTextNet.Library.SharedLibrary.Logic.CommandLine.KeyValueHeader"/> + option が存在するかを確認。
            <para>データが単独かペアかは問はない。</para>
            </summary>
            <param name="option"></param>
            <returns></returns>
        </member>
        <member name="M:ContentTypeTextNet.Library.SharedLibrary.Logic.CommandLine.HasValue(System.String)">
            <summary>
            値を持つ <see cref="P:ContentTypeTextNet.Library.SharedLibrary.Logic.CommandLine.KeyValueHeader"/> + <paramref name="option"/> が存在するかを確認。
            </summary>
            <param name="option"></param>
            <returns></returns>
        </member>
        <member name="M:ContentTypeTextNet.Library.SharedLibrary.Logic.CommandLine.HasValue(System.String,System.Int32)">
            <summary>
            値を持つ <see cref="P:ContentTypeTextNet.Library.SharedLibrary.Logic.CommandLine.KeyValueHeader"/> + <paramref name="option"/> が存在するかを確認。
            </summary>
            <param name="option">オプション。</param>
            <param name="index">指定オプション内で何番目(0ベース)を対象とするか。</param>
            <returns></returns>
        </member>
        <member name="M:ContentTypeTextNet.Library.SharedLibrary.Logic.CommandLine.CountOption(System.String)">
            <summary>
            オプション数取得。
            </summary>
            <param name="option"></param>
            <returns></returns>
        </member>
        <member name="M:ContentTypeTextNet.Library.SharedLibrary.Logic.CommandLine.GetValues(System.String)">
            <summary>
            値を列挙。
            </summary>
            <param name="option"></param>
            <returns></returns>
        </member>
        <member name="M:ContentTypeTextNet.Library.SharedLibrary.Logic.CommandLine.GetValue(System.String)">
            <summary>
            値を取得。
            </summary>
            <param name="option"></param>
            <returns></returns>
        </member>
        <member name="T:ContentTypeTextNet.Library.SharedLibrary.Logic.DelegateCommand">
            <summary>
            コマンド。
            </summary>
        </member>
        <member name="P:ContentTypeTextNet.Library.SharedLibrary.Logic.DelegateCommand.ExecuteCommand">
            <summary>
            コマンド。
            </summary>
        </member>
        <member name="P:ContentTypeTextNet.Library.SharedLibrary.Logic.DelegateCommand.CanExecuteCommand">
            <summary>
            実行可否。
            </summary>
        </member>
        <member name="T:ContentTypeTextNet.Library.SharedLibrary.Logic.DisposeFinalizeBase">
            <summary>
            <see cref="M:System.IDisposable.Dispose"/>をサポートする基底クラス。
            </summary>
        </member>
        <member name="M:ContentTypeTextNet.Library.SharedLibrary.Logic.DisposeFinalizeBase.ResetDispose">
            <summary>
            <see cref="P:ContentTypeTextNet.Library.SharedLibrary.Logic.DisposeFinalizeBase.IsDisposed"/>を再度無効にする場合に呼び出される。
            </summary>
        </member>
        <member name="E:ContentTypeTextNet.Library.SharedLibrary.Logic.DisposeFinalizeBase.Disposing">
            <summary>
            <see cref="M:System.IDisposable.Dispose"/>時に呼び出されるイベント。
            <para>呼び出し時点では<see cref="P:ContentTypeTextNet.Library.SharedLibrary.Logic.DisposeFinalizeBase.IsDisposed"/>は偽のまま。</para>
            </summary>
        </member>
        <member name="P:ContentTypeTextNet.Library.SharedLibrary.Logic.DisposeFinalizeBase.IsDisposed">
            <summary>
            <see cref="M:System.IDisposable.Dispose"/>されたか。
            </summary>
        </member>
        <member name="M:ContentTypeTextNet.Library.SharedLibrary.Logic.DisposeFinalizeBase.Dispose(System.Boolean)">
            <summary>
            <see cref="M:System.IDisposable.Dispose"/>の内部処理。
            <para>継承先クラスでは本メソッドを呼び出す必要がある。</para>
            </summary>
            <param name="disposing">CLRの管理下か。</param>
        </member>
        <member name="M:ContentTypeTextNet.Library.SharedLibrary.Logic.DisposeFinalizeBase.Dispose">
            <summary>
            解放。
            </summary>
        </member>
        <member name="T:ContentTypeTextNet.Library.SharedLibrary.Logic.Logger">
            <summary>
            最低限度の機能を保持したログ出力処理。
            </summary>
        </member>
        <member name="M:ContentTypeTextNet.Library.SharedLibrary.Logic.Logger.PutsCustom(ContentTypeTextNet.Library.SharedLibrary.Model.LogItemModel)">
            <summary>
            このクラスでは何もしない。
            <para>サブクラスで適当にどうぞ。</para>
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:ContentTypeTextNet.Library.SharedLibrary.Logic.Logger.AttachStream(System.IO.TextWriter,System.Boolean)">
             <summary>
            
             </summary>
             <param name="writer"></param>
             <param name="cedeManage">本クラスに所有権を譲るか</param>
        </member>
        <member name="M:ContentTypeTextNet.Library.SharedLibrary.Logic.LoggerBase.PutsStream(ContentTypeTextNet.Library.SharedLibrary.Model.LogItemModel)">
            <summary>
            ストリーム出力。
            <para>ストリームのフラッシュまでは面倒を見ない</para>
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:ContentTypeTextNet.Library.SharedLibrary.Logic.LoggerBase.PutsConsole(ContentTypeTextNet.Library.SharedLibrary.Model.LogItemModel)">
            <summary>
            コンソール出力。
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:ContentTypeTextNet.Library.SharedLibrary.Logic.LoggerBase.PutsDebug(ContentTypeTextNet.Library.SharedLibrary.Model.LogItemModel)">
            <summary>
            デバッグ出力。
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:ContentTypeTextNet.Library.SharedLibrary.Logic.LoggerBase.PutsCustom(ContentTypeTextNet.Library.SharedLibrary.Model.LogItemModel)">
            <summary>
            カスタム出力。
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:ContentTypeTextNet.Library.SharedLibrary.Logic.LoggerBase.Puts(ContentTypeTextNet.Library.SharedLibrary.Model.LogItemModel)">
            <summary>
            出力担当。
            </summary>
            <param name="item"></param>
        </member>
        <member name="T:ContentTypeTextNet.Library.SharedLibrary.Logic.ShortcutFile">
            <summary>
            ショートカットファイル処理。
            </summary>
        </member>
        <member name="M:ContentTypeTextNet.Library.SharedLibrary.Logic.ShortcutFile.#ctor">
            <summary>
            ショートカットを作成するためにオブジェクト生成。
            </summary>
        </member>
        <member name="M:ContentTypeTextNet.Library.SharedLibrary.Logic.ShortcutFile.#ctor(System.String)">
            <summary>
            ショートカットを読み込むためにオブジェクト生成。
            </summary>
            <param name="path">読み込むショートカットファイルパス。</param>
        </member>
        <member name="P:ContentTypeTextNet.Library.SharedLibrary.Logic.ShortcutFile.TargetPath">
            <summary>
            ショートカット先パス。
            </summary>
        </member>
        <member name="P:ContentTypeTextNet.Library.SharedLibrary.Logic.ShortcutFile.Arguments">
            <summary>
            引数。
            </summary>
        </member>
        <member name="P:ContentTypeTextNet.Library.SharedLibrary.Logic.ShortcutFile.Description">
            <summary>
            コメント。
            </summary>
        </member>
        <member name="P:ContentTypeTextNet.Library.SharedLibrary.Logic.ShortcutFile.WorkingDirectory">
            <summary>
            作業ディレクトリ。
            </summary>
        </member>
        <member name="P:ContentTypeTextNet.Library.SharedLibrary.Logic.ShortcutFile.ShowCommand">
            <summary>
            表示方法。
            </summary>
        </member>
        <member name="M:ContentTypeTextNet.Library.SharedLibrary.Logic.ShortcutFile.GetIcon">
            <summary>
            アイコン取得。
            </summary>
            <returns></returns>
        </member>
        <member name="M:ContentTypeTextNet.Library.SharedLibrary.Logic.ShortcutFile.SetIcon(ContentTypeTextNet.Library.SharedLibrary.Model.IconPathModel)">
            <summary>
            アイコン設定。
            </summary>
            <param name="iconPath"></param>
        </member>
        <member name="M:ContentTypeTextNet.Library.SharedLibrary.Logic.ShortcutFile.Load(System.String)">
            <summary>
            ショートカット読み込み。
            
            public だが Save との IF を合わせるためだけであり基本的には外から使用しない。
            使っても問題ないけど。
            </summary>
            <param name="path">読み込むショートカットパス。</param>
        </member>
        <member name="M:ContentTypeTextNet.Library.SharedLibrary.Logic.ShortcutFile.Save(System.String)">
            <summary>
            ショートカットを保存。
            </summary>
            <param name="path">保存先ショートカットパス。</param>
        </member>
        <member name="T:ContentTypeTextNet.Library.SharedLibrary.Logic.LanguageManager">
            <summary>
            独自言語設定の管理薬。
            </summary>
        </member>
        <member name="M:ContentTypeTextNet.Library.SharedLibrary.Logic.LanguageManager.#ctor(ContentTypeTextNet.Library.SharedLibrary.Model.LanguageCollectionModel,System.String)">
            <summary>
            生成。
            </summary>
            <param name="model"></param>
            <param name="languageFilePath"></param>
        </member>
        <member name="P:ContentTypeTextNet.Library.SharedLibrary.Logic.LanguageManager.LanguageFilePath">
            <summary>
            ファイルパス。
            </summary>
        </member>
        <member name="M:ContentTypeTextNet.Library.SharedLibrary.Logic.LanguageManager.GetPlainText(System.String)">
            <summary>
            キーからテキスト取得。
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:ContentTypeTextNet.Library.SharedLibrary.Logic.LanguageManager.GetSystemMap(System.DateTime)">
            <summary>
            システム用
            </summary>
            <param name="dateTime"></param>
            <returns></returns>
        </member>
        <member name="T:ContentTypeTextNet.Library.SharedLibrary.Model.CallerModel">
            <summary>
            呼び出し元データ。
            <para>一つずつ指定するのがだるい。</para>
            </summary>
        </member>
        <member name="P:ContentTypeTextNet.Library.SharedLibrary.Model.CallerModel.CallerFile">
            <summary>
            呼び出しファイル名。
            </summary>
        </member>
        <member name="P:ContentTypeTextNet.Library.SharedLibrary.Model.CallerModel.CallerLine">
            <summary>
            呼び出し行。
            </summary>
        </member>
        <member name="P:ContentTypeTextNet.Library.SharedLibrary.Model.CallerModel.CallerMember">
            <summary>
            呼び出しメンバ名。
            </summary>
        </member>
        <member name="T:ContentTypeTextNet.Library.SharedLibrary.Model.CollectionModel`1">
            <summary>
            コレクションデータ保持用モデル。
            <para><see cref="T:System.Collections.ObjectModel.ObservableCollection`1"/>の単純ラッパー。</para>
            </summary>
            <typeparam name="TValue"></typeparam>
        </member>
        <member name="M:ContentTypeTextNet.Library.SharedLibrary.Model.CollectionModel`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            <see cref="M:System.Collections.ObjectModel.Collection`1.Add(`0)"/> を内部的に繰り返すだけ。
            <para>速度的にどうとかじゃなくて毎度毎度foreachするのだりぃ。</para>
            </summary>
            <param name="items"></param>
        </member>
        <member name="M:ContentTypeTextNet.Library.SharedLibrary.Model.CollectionModel`1.InitializeRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            現在データを破棄して指定データを再設定。
            </summary>
            <param name="items"></param>
        </member>
        <member name="M:ContentTypeTextNet.Library.SharedLibrary.Model.CollectionModel`1.SwapIndex(System.Int32,System.Int32)">
            <summary>
            指定インデックスのデータを入れ替える。
            </summary>
            <param name="indexA"></param>
            <param name="indexB"></param>
        </member>
        <member name="M:ContentTypeTextNet.Library.SharedLibrary.Model.CollectionModel`1.SwapObject(`0,`0)">
            <summary>
            指定データを入れ替える。
            </summary>
            <param name="itemA"></param>
            <param name="itemB"></param>
        </member>
        <member name="T:ContentTypeTextNet.Library.SharedLibrary.Model.CollectionModel">
            <summary>
            <see cref="T:ContentTypeTextNet.Library.SharedLibrary.Model.CollectionModel`1"/>生成のヘルパ。
            </summary>
        </member>
        <member name="T:ContentTypeTextNet.Library.SharedLibrary.Model.FixedSizeCollectionModel`1">
            <summary>
            上限付きコレクション。
            <para>上限はほとんどおまけ。</para>
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:ContentTypeTextNet.Library.SharedLibrary.Model.FixedSizeCollectionModel`1.DefaultLimit">
            <summary>
            初期値は上限なしでいいや。
            </summary>
        </member>
        <member name="P:ContentTypeTextNet.Library.SharedLibrary.Model.FixedSizeCollectionModel`1.LimitSize">
            <summary>
            上限サイズ。
            <para>0の場合は上限指定なし。</para>
            </summary>
        </member>
        <member name="P:ContentTypeTextNet.Library.SharedLibrary.Model.FixedSizeCollectionModel`1.StockRemovedItem">
            <summary>
            上限を超えて押し出されるデータを保持リストへ回すか。
            <para>保持リストのデータは本クラスの管理外となる。</para>
            </summary>
        </member>
        <member name="P:ContentTypeTextNet.Library.SharedLibrary.Model.FixedSizeCollectionModel`1.UsingLimit">
            <summary>
            上限サイズが有効か。
            </summary>
        </member>
        <member name="P:ContentTypeTextNet.Library.SharedLibrary.Model.FixedSizeCollectionModel`1.IsFIFO">
            <summary>
            追加時に先頭要素から消えていくか。
            </summary>
        </member>
        <member name="T:ContentTypeTextNet.Library.SharedLibrary.Model.FontModel">
            <summary>
            フォント設定。
            </summary>
        </member>
        <member name="P:ContentTypeTextNet.Library.SharedLibrary.Model.FontModel.Family">
            <summary>
            フォント名。
            </summary>
        </member>
        <member name="P:ContentTypeTextNet.Library.SharedLibrary.Model.FontModel.Size">
            <summary>
            フォントサイズ。
            </summary>
        </member>
        <member name="P:ContentTypeTextNet.Library.SharedLibrary.Model.FontModel.Bold">
            <summary>
            フォントを太字にするか。
            </summary>
        </member>
        <member name="P:ContentTypeTextNet.Library.SharedLibrary.Model.FontModel.Italic">
            <summary>
            フォントを斜体にするか。
            </summary>
        </member>
        <member name="P:ContentTypeTextNet.Library.SharedLibrary.Model.HotKeyModel.ModifierKeys">
            <summary>
            修飾キー。
            </summary>
        </member>
        <member name="P:ContentTypeTextNet.Library.SharedLibrary.Model.HotKeyModel.Key">
            <summary>
            キー。
            </summary>
        </member>
        <member name="P:ContentTypeTextNet.Library.SharedLibrary.Model.HotKeyModel.IsRegistered">
            <summary>
            登録されているか
            </summary>
        </member>
        <member name="P:ContentTypeTextNet.Library.SharedLibrary.Model.HotKeyModel.IsEnabled">
            <summary>
            有効なキー設定か。
            </summary>
        </member>
        <member name="T:ContentTypeTextNet.Library.SharedLibrary.Model.TripleRange`1">
            <summary>
            最小値・中間値・最大値を保持するデータ。
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:ContentTypeTextNet.Library.SharedLibrary.Model.TripleRange">
            <summary>
            ラッパー。
            </summary>
        </member>
        <member name="M:ContentTypeTextNet.Library.SharedLibrary.Model.TripleRange.Parse``1(System.String)">
            <summary>
            パース処理。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:ContentTypeTextNet.Library.SharedLibrary.Model.Unmanaged.Gdi.IconHandleModel">
            <summary>
            アイコンハンドルを管理。
            </summary>
        </member>
        <member name="T:ContentTypeTextNet.Library.SharedLibrary.Model.Unmanaged.Gdi.BitmapHandleModel">
            <summary>
            ビットマップハンドルを管理。
            </summary>
        </member>
        <member name="T:ContentTypeTextNet.Library.SharedLibrary.Model.Unmanaged.Gdi.GdiObjectModelBase">
            <summary>
            アンマネージドなGDIオブジェクトを管理。
            </summary>
        </member>
        <member name="M:ContentTypeTextNet.Library.SharedLibrary.Model.Unmanaged.Gdi.GdiObjectModelBase.MakeBitmapSource">
            <summary>
            GDIオブジェクトから<see cref="T:System.Windows.Media.Imaging.BitmapSource"/>作成。
            </summary>
            <returns></returns>
            <exception cref="T:System.NotImplementedException">CanMakeImageSource</exception>
        </member>
        <member name="T:ContentTypeTextNet.Library.SharedLibrary.Model.Unmanaged.GlobalAllocModel">
            <summary>
            <see cref="M:System.Runtime.InteropServices.Marshal.AllocHGlobal(System.Int32)"/>のラッパー。
            </summary>
        </member>
        <member name="M:ContentTypeTextNet.Library.SharedLibrary.Model.Unmanaged.GlobalAllocModel.#ctor(System.Int32)">
            <summary>
            メモリ確保。
            </summary>
            <param name="cb">確保するサイズ。</param>
        </member>
        <member name="P:ContentTypeTextNet.Library.SharedLibrary.Model.Unmanaged.GlobalAllocModel.Buffer">
            <summary>
            確保領域のポインタ。
            </summary>
        </member>
        <member name="P:ContentTypeTextNet.Library.SharedLibrary.Model.Unmanaged.GlobalAllocModel.Size">
            <summary>
            確保サイズ。
            </summary>
        </member>
        <member name="T:ContentTypeTextNet.Library.SharedLibrary.Model.Unmanaged.Com.ComModel`1">
            <summary>
            何かしらのCOMを管理。
            </summary>
            <typeparam name="TCom"></typeparam>
        </member>
        <member name="P:ContentTypeTextNet.Library.SharedLibrary.Model.Unmanaged.Com.ComModel`1.Com">
            <summary>
            COM。
            </summary>
        </member>
        <member name="T:ContentTypeTextNet.Library.SharedLibrary.Model.Unmanaged.Com.ComModelBase">
            <summary>
            生のCOMを管理。
            </summary>
        </member>
        <member name="P:ContentTypeTextNet.Library.SharedLibrary.Model.Unmanaged.Com.ComModelBase.RawCom">
            <summary>
            COM生オブジェクト。
            </summary>
        </member>
        <member name="T:ContentTypeTextNet.Library.SharedLibrary.Model.Unmanaged.UnmanagedHandleModelBase">
            <summary>
            アンマネージドなOS提供ハンドルを管理。
            </summary>
        </member>
        <member name="P:ContentTypeTextNet.Library.SharedLibrary.Model.Unmanaged.UnmanagedHandleModelBase.Handle">
            <summary>
            ハンドル。
            </summary>
        </member>
        <member name="M:ContentTypeTextNet.Library.SharedLibrary.Model.Unmanaged.UnmanagedHandleModelBase.ReleaseHandle">
            <summary>
            解放処理。
            <para>ハンドルにより処理色々なんでオーバーライドしてごちゃごちゃする。</para>
            </summary>
        </member>
        <member name="T:ContentTypeTextNet.Library.SharedLibrary.Model.Unmanaged.UnmanagedModelBase">
            <summary>
            アンマネージドオブジェクトの管理。
            <para><see cref="M:System.IDisposable.Dispose"/>を実装するイメージ。</para>
            <para>.NETになんかまともなきちんとしたハンドル管理用があったと思うけど気にしないことにする。</para>
            </summary>
        </member>
        <member name="M:ContentTypeTextNet.Library.SharedLibrary.Model.DictionaryModel`2.GetSchema">
            <summary>
            http://qiita.com/rohinomiya/items/b88a5da3965a1c5bed0d
            </summary>
            <returns></returns>
        </member>
        <member name="T:ContentTypeTextNet.Library.SharedLibrary.Model.IconPathModel">
            <summary>
            アイコンのパスを保持。
            </summary>
        </member>
        <member name="P:ContentTypeTextNet.Library.SharedLibrary.Model.IconPathModel.Path">
            <summary>
            パス。
            </summary>
        </member>
        <member name="P:ContentTypeTextNet.Library.SharedLibrary.Model.IconPathModel.Index">
            <summary>
            アイコンインデックス。
            </summary>
        </member>
        <member name="T:ContentTypeTextNet.Library.SharedLibrary.Model.LanguageItemModel">
            <summary>
            言語データの最小データ。
            </summary>
        </member>
        <member name="P:ContentTypeTextNet.Library.SharedLibrary.Model.LanguageItemModel.Word">
            <summary>
            表示用文字列。
            </summary>
        </member>
        <member name="P:ContentTypeTextNet.Library.SharedLibrary.Model.LanguageItemModel.Id">
            <summary>
            キーとして使用される、
            </summary>
        </member>
        <member name="T:ContentTypeTextNet.Library.SharedLibrary.Model.LanguageCollectionModel">
            <summary>
            言語設定。
            </summary>
        </member>
        <member name="P:ContentTypeTextNet.Library.SharedLibrary.Model.LanguageCollectionModel.CultureCode">
            <summary>
            言語コード。
            </summary>
        </member>
        <member name="P:ContentTypeTextNet.Library.SharedLibrary.Model.LanguageCollectionModel.Define">
            <summary>
            共通定義部。
            </summary>
        </member>
        <member name="P:ContentTypeTextNet.Library.SharedLibrary.Model.LanguageCollectionModel.Words">
            <summary>
            言語データ。
            </summary>
        </member>
        <member name="P:ContentTypeTextNet.Library.SharedLibrary.Model.LanguageCollectionModel.Name">
            <summary>
            言語名。
            </summary>
        </member>
        <member name="T:ContentTypeTextNet.Library.SharedLibrary.Model.LoggerConfigModel">
            <summary>
            ILoggerで使用する設定。
            </summary>
        </member>
        <member name="P:ContentTypeTextNet.Library.SharedLibrary.Model.LoggerConfigModel.EnabledDebug">
            <summary>
            デバッグ情報をログ対象とするか。
            </summary>
        </member>
        <member name="P:ContentTypeTextNet.Library.SharedLibrary.Model.LoggerConfigModel.EnabledTrace">
            <summary>
            トレース情報をログ対象とするか。
            </summary>
        </member>
        <member name="P:ContentTypeTextNet.Library.SharedLibrary.Model.LoggerConfigModel.EnabledInformation">
            <summary>
            操作情報をログ対象とするか。
            </summary>
        </member>
        <member name="P:ContentTypeTextNet.Library.SharedLibrary.Model.LoggerConfigModel.EnabledWarning">
            <summary>
            注意をログ対象とするか。
            </summary>
        </member>
        <member name="P:ContentTypeTextNet.Library.SharedLibrary.Model.LoggerConfigModel.EnabledError">
            <summary>
            エラーをログ対象とするか。
            </summary>
        </member>
        <member name="P:ContentTypeTextNet.Library.SharedLibrary.Model.LoggerConfigModel.EnabledFatal">
            <summary>
            異常をログ対象とするか。
            </summary>
        </member>
        <member name="P:ContentTypeTextNet.Library.SharedLibrary.Model.LoggerConfigModel.EnabledAll">
            <summary>
            すべて。
            </summary>
        </member>
        <member name="P:ContentTypeTextNet.Library.SharedLibrary.Model.LoggerConfigModel.PutsStream">
            <summary>
            ストリーム出力を行うか。
            </summary>
        </member>
        <member name="P:ContentTypeTextNet.Library.SharedLibrary.Model.LoggerConfigModel.PutsConsole">
            <summary>
            コンソール出力を行うか。
            </summary>
        </member>
        <member name="P:ContentTypeTextNet.Library.SharedLibrary.Model.LoggerConfigModel.PutsDebug">
            <summary>
            デバッグ出力を行うか。
            </summary>
        </member>
        <member name="P:ContentTypeTextNet.Library.SharedLibrary.Model.LoggerConfigModel.PutsCustom">
            <summary>
            カスタム出力を行うか。
            </summary>
        </member>
        <member name="T:ContentTypeTextNet.Library.SharedLibrary.Model.LogItemModel">
            <summary>
            ログとして出力するデータ。
            </summary>
        </member>
        <member name="P:ContentTypeTextNet.Library.SharedLibrary.Model.LogItemModel.Timestamp">
            <summary>
            発生日。
            </summary>
        </member>
        <member name="P:ContentTypeTextNet.Library.SharedLibrary.Model.LogItemModel.LogKind">
            <summary>
            ログ種別。
            </summary>
        </member>
        <member name="P:ContentTypeTextNet.Library.SharedLibrary.Model.LogItemModel.Message">
            <summary>
            ログメッセージ。
            </summary>
        </member>
        <member name="P:ContentTypeTextNet.Library.SharedLibrary.Model.LogItemModel.Detail">
            <summary>
            詳細。
            <para>nullで何もなし。</para>
            <para>判定にはHasDetailを使用。</para>
            </summary>
        </member>
        <member name="P:ContentTypeTextNet.Library.SharedLibrary.Model.LogItemModel.HasDetail">
            <summary>
            詳細はあるか。
            </summary>
        </member>
        <member name="P:ContentTypeTextNet.Library.SharedLibrary.Model.LogItemModel.StackTrace">
            <summary>
            スタックトレース情報。
            </summary>
        </member>
        <member name="P:ContentTypeTextNet.Library.SharedLibrary.Model.LogItemModel.CallerFile">
            <summary>
            呼び出しファイルパス。
            </summary>
        </member>
        <member name="P:ContentTypeTextNet.Library.SharedLibrary.Model.LogItemModel.CallerLine">
            <summary>
            呼び出し行番号。
            </summary>
        </member>
        <member name="P:ContentTypeTextNet.Library.SharedLibrary.Model.LogItemModel.CallerMember">
            <summary>
            呼び出しメンバ。
            </summary>
        </member>
        <member name="P:ContentTypeTextNet.Library.SharedLibrary.Model.LogItemModel.CallerAssembly">
            <summary>
            呼び出しアセンブリ。
            </summary>
        </member>
        <member name="P:ContentTypeTextNet.Library.SharedLibrary.Model.LogItemModel.CallerThread">
            <summary>
            呼び出しスレッド。
            </summary>
        </member>
        <member name="T:ContentTypeTextNet.Library.SharedLibrary.Model.ScreenModel">
            <summary>
            使用データは全て物理ピクセル。
            </summary>
        </member>
        <member name="P:ContentTypeTextNet.Library.SharedLibrary.Model.ScreenModel.BitsPerPixel">
            <summary>
            1 ピクセルのデータに関連付けられているメモリのビット数を取得します。
            </summary>
        </member>
        <member name="P:ContentTypeTextNet.Library.SharedLibrary.Model.ScreenModel.DeviceBounds">
            <summary>
            ディスプレイの範囲を取得します。
            </summary>
        </member>
        <member name="P:ContentTypeTextNet.Library.SharedLibrary.Model.ScreenModel.DeviceName">
            <summary>
            ディスプレイに関連付けられているデバイス名を取得します。
            </summary>
        </member>
        <member name="P:ContentTypeTextNet.Library.SharedLibrary.Model.ScreenModel.Primary">
            <summary>
            特定のディスプレイがプライマリ デバイスかどうかを示す値を取得します。
            </summary>
        </member>
        <member name="P:ContentTypeTextNet.Library.SharedLibrary.Model.ScreenModel.DeviceWorkingArea">
            <summary>
            ディスプレイの作業領域を取得します。 作業領域とは、ディスプレイのデスクトップ領域からタスクバー、ドッキングされたウィンドウ、およびドッキングされたツール バーを除いた部分です。 
            </summary>
        </member>
        <member name="M:ContentTypeTextNet.Library.SharedLibrary.Model.TIdCollectionModel`2.Set(`1)">
            <summary>
            要素を設定する。
            <para>既に存在する場合は上書きされる。</para>
            </summary>
            <param name="value"></param>
            <exception cref="T:System.ArgumentNullException">valueがnull</exception>
        </member>
        <member name="M:ContentTypeTextNet.Library.SharedLibrary.Model.TIdCollectionModel`2.SwapId(`0,`0)">
            <summary>
            IDの入れ替え。
            <para>オブジェクトの入れ替えでないことに注意。</para>
            </summary>
            <param name="keyA"></param>
            <param name="keyB"></param>
        </member>
        <member name="M:ContentTypeTextNet.Library.SharedLibrary.Model.TIdCollectionModel`2.Add(`1)">
            <summary>
            要素を追加する。
            </summary>
            <param name="value"></param>
            <exception cref="T:System.ArgumentNullException">valueがnull</exception>
            <exception cref="T:System.ArgumentException">value.Idがすでに存在する</exception>
        </member>
        <member name="T:ContentTypeTextNet.Library.SharedLibrary.Model.DisposeFinalizeModelBase">
            <summary>
            <see cref="T:System.IDisposable"/>をサポートする基底モデル。
            </summary>
        </member>
        <member name="M:ContentTypeTextNet.Library.SharedLibrary.Model.DisposeFinalizeModelBase.ResetDispose">
            <summary>
            <see cref="P:ContentTypeTextNet.Library.SharedLibrary.Model.DisposeFinalizeModelBase.IsDisposed"/>を再度無効にする場合に呼び出される。
            </summary>
        </member>
        <member name="P:ContentTypeTextNet.Library.SharedLibrary.Model.DisposeFinalizeModelBase.IsDisposed">
            <summary>
            <see cref="M:System.IDisposable.Dispose"/>されたか。
            </summary>
        </member>
        <member name="M:ContentTypeTextNet.Library.SharedLibrary.Model.DisposeFinalizeModelBase.Dispose(System.Boolean)">
            <summary>
            <see cref="M:System.IDisposable.Dispose"/>の内部処理。
            <para>継承先クラスでは本メソッドを呼び出す必要がある。</para>
            </summary>
            <param name="disposing">CLRの管理下か。</param>
        </member>
        <member name="M:ContentTypeTextNet.Library.SharedLibrary.Model.DisposeFinalizeModelBase.Dispose">
            <summary>
            解放。
            </summary>
        </member>
        <member name="T:ContentTypeTextNet.Library.SharedLibrary.Model.ModelBase">
            <summary>
            モデルの基盤。
            <para>データ保持を生きがいにする。</para>
            </summary>
        </member>
        <member name="T:ContentTypeTextNet.Library.SharedLibrary.Event.TextTemplatingErrorEventArgs">
            <summary>
            T4変換時のエラー出力イベント。
            </summary>
        </member>
        <member name="P:ContentTypeTextNet.Library.SharedLibrary.Event.TextTemplatingErrorEventArgs.CompilerErrorCollection">
            <summary>
            エラー内容。
            </summary>
        </member>
        <member name="T:ContentTypeTextNet.Library.SharedLibrary.ViewModel.FewViewModel`1">
            <summary>
            単一のプロパティ値を保持する。
            <para>ViewModelが変数ごっちゃごちゃでわけわからん状態を抑える目的。</para>
            <para>劣化しまくったReactivePropertyみたいな。</para>
            </summary>
            <typeparam name="TValue"></typeparam>
        </member>
        <member name="M:ContentTypeTextNet.Library.SharedLibrary.ViewModel.FewViewModel`1.#ctor">
            <summary>
            <typeparamref name="TValue"/>のデフォルト値で生成。
            </summary>
        </member>
        <member name="M:ContentTypeTextNet.Library.SharedLibrary.ViewModel.FewViewModel`1.#ctor(`0)">
            <summary>
            初期値を指定して生成。
            </summary>
        </member>
        <member name="P:ContentTypeTextNet.Library.SharedLibrary.ViewModel.FewViewModel`1.InitialValue">
            <summary>
            初期値。
            </summary>
        </member>
        <member name="P:ContentTypeTextNet.Library.SharedLibrary.ViewModel.FewViewModel`1.ChangeAction">
            <summary>
            変更時の処理。
            <para><typeparamref name="TValue"/>は前回値。</para>
            </summary>
        </member>
        <member name="P:ContentTypeTextNet.Library.SharedLibrary.ViewModel.FewViewModel`1.Value">
            <summary>
            値。
            </summary>
        </member>
        <member name="M:ContentTypeTextNet.Library.SharedLibrary.ViewModel.FewViewModel`1.Notice">
            <summary>
            変更通知を強制。
            <para><see cref="T:ContentTypeTextNet.Library.SharedLibrary.ViewModel.ViewModelBase"/>と違って頻繁にあるかもなので外部化。</para>
            </summary>
        </member>
        <member name="T:ContentTypeTextNet.Library.SharedLibrary.ViewModel.ViewModelBase">
            <summary>
            ViewModelの基底。
            </summary>
        </member>
        <member name="P:ContentTypeTextNet.Library.SharedLibrary.ViewModel.ViewModelBase.IsChanged">
            <summary>
            変更があったか。
            <para>各変更通知時にフラグが設定される。</para>
            <para>フラグのリセットは<seealso cref="M:ContentTypeTextNet.Library.SharedLibrary.ViewModel.ViewModelBase.ResetChangeFlag"/>を用いる。</para>
            </summary>
        </member>
        <member name="P:ContentTypeTextNet.Library.SharedLibrary.ViewModel.ViewModelBase.Errors">
            <summary>
            エラー内容。
            </summary>
        </member>
        <member name="M:ContentTypeTextNet.Library.SharedLibrary.ViewModel.ViewModelBase.CreateCommand(System.Action{System.Object},System.String,System.Int32)">
            <summary>
            コマンド生成。
            <para>生成されたコマンドはキャッシュされる。</para>
            </summary>
            <param name="executeCommand">コマンド用処理。</param>
            <param name="callerMemberName">[自動入力]</param>
            <param name="callerLineNumber">[自動入力]</param>
            <returns></returns>
        </member>
        <member name="M:ContentTypeTextNet.Library.SharedLibrary.ViewModel.ViewModelBase.CreateCommand(System.Action{System.Object},System.Func{System.Object,System.Boolean},System.String,System.Int32)">
            <summary>
            コマンド生成。
            <para>生成されたコマンドはキャッシュされる。</para>
            </summary>
            <param name="executeCommand">コマンド用処理。</param>
            <param name="canExecuteCommand">コマンド実行可能判定用処理。</param>
            <param name="callerMemberName">[自動入力]</param>
            <param name="callerLineNumber">[自動入力]</param>
            <returns></returns>
        </member>
        <member name="M:ContentTypeTextNet.Library.SharedLibrary.ViewModel.ViewModelBase.ResetChangeFlag">
            <summary>
            変更状態をリセット。
            </summary>
        </member>
        <member name="M:ContentTypeTextNet.Library.SharedLibrary.ViewModel.ViewModelBase.CallOnPropertyChangeDisplayItem">
            <summary>
            表示要素の更新。
            <para>各要素は必要なクラスで適時実装すること。</para>
            </summary>
        </member>
        <member name="M:ContentTypeTextNet.Library.SharedLibrary.ViewModel.ViewModelBase.ValidateProperty(System.Object,System.String)">
            <summary>
            プロパティのエラー検知用処理。
            </summary>
            <param name="value"></param>
            <param name="callerMemberName"></param>
        </member>
        <member name="M:ContentTypeTextNet.Library.SharedLibrary.ViewModel.ViewModelBase.SetErrors(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            指定プロパティにエラー設定。
            </summary>
            <param name="propertyName"></param>
            <param name="errors"></param>
        </member>
        <member name="M:ContentTypeTextNet.Library.SharedLibrary.ViewModel.ViewModelBase.OnPropertyChanged(System.String)">
            <summary>
            PropertyChanged呼び出し。
            </summary>
            <param name="propertyName"></param>
        </member>
        <member name="T:ContentTypeTextNet.Library.SharedLibrary.ViewModel.SingleModelWrapperViewModelBase`1">
            <summary>
            単一モデルを取り込むVM。
            </summary>
            <typeparam name="TModel">モデル。</typeparam>
        </member>
        <member name="M:ContentTypeTextNet.Library.SharedLibrary.ViewModel.SingleModelWrapperViewModelBase`1.#ctor(`0)">
            <summary>
            モデルを取り込んで生成。
            </summary>
            <param name="model">取り込むモデル</param>
        </member>
        <member name="P:ContentTypeTextNet.Library.SharedLibrary.ViewModel.SingleModelWrapperViewModelBase`1.Model">
            <summary>
            モデル。
            </summary>
        </member>
        <member name="M:ContentTypeTextNet.Library.SharedLibrary.ViewModel.SingleModelWrapperViewModelBase`1.InitializeModel">
            <summary>
            モデル初期化。
            </summary>
        </member>
        <member name="M:ContentTypeTextNet.Library.SharedLibrary.ViewModel.SingleModelWrapperViewModelBase`1.SetModelValue``1(``0,System.String,System.String,ContentTypeTextNet.Library.SharedLibrary.Define.PropertyCheck)">
            <summary>
            モデル変更用ヘルパ。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value">変更データ。</param>
            <param name="targetMemberName">対象オブジェクトのメンバ名。</param>
            <param name="notifyPropertyName"></param>
            <param name="propertyCheck"></param>
            <returns>変更があった場合は真を返す。</returns>
        </member>
        <member name="T:ContentTypeTextNet.Library.SharedLibrary.View.Attached.BrushAnimation">
            <summary>
            <para>http://stackoverflow.com/questions/8096852/brush-to-brush-animation?answertab=votes#tab-top</para>
            </summary>
        </member>
        <member name="T:ContentTypeTextNet.Library.SharedLibrary.View.Attached.GridHelpers">
            <summary>
            https://rachel53461.wordpress.com/2011/09/17/wpf-grids-rowcolumn-count-properties/
            </summary>
        </member>
        <member name="F:ContentTypeTextNet.Library.SharedLibrary.View.Attached.GridHelpers.RowCountProperty">
            <summary>
            Adds the specified number of Rows to RowDefinitions.
            Default Height is Auto
            </summary>
        </member>
        <member name="F:ContentTypeTextNet.Library.SharedLibrary.View.Attached.GridHelpers.ColumnCountProperty">
            <summary>
            Adds the specified number of Columns to ColumnDefinitions.
            Default Width is Auto
            </summary>
        </member>
        <member name="F:ContentTypeTextNet.Library.SharedLibrary.View.Attached.GridHelpers.StarRowsProperty">
            <summary>
            Makes the specified Row's Height equal to Star.
            Can set on multiple Rows
            </summary>
        </member>
        <member name="F:ContentTypeTextNet.Library.SharedLibrary.View.Attached.GridHelpers.StarColumnsProperty">
            <summary>
            Makes the specified Column's Width equal to Star.
            Can set on multiple Columns
            </summary>
        </member>
        <member name="T:ContentTypeTextNet.Library.SharedLibrary.View.Attached.TextBoxHelper">
            <summary>
            <para>http://stackoverflow.com/questions/2245928/mvvm-and-the-textboxs-selectedtext-property</para>
            </summary>
        </member>
        <member name="T:ContentTypeTextNet.Library.SharedLibrary.View.Control.HotkeyControl">
            <summary>
            <para>http://stackoverflow.com/questions/2136431/how-do-i-read-custom-keyboard-shortcut-from-user-in-wpf?answertab=votes#tab-top</para>
            </summary>
        </member>
        <member name="P:ContentTypeTextNet.Library.SharedLibrary.View.Control.HotkeyControl.DisplayAddText">
            <summary>
            キー文字列の結合表記文字列。
            </summary>
            <returns></returns>
        </member>
        <member name="M:ContentTypeTextNet.Library.SharedLibrary.View.Control.HotkeyControl.GetDisplayModText(System.Windows.Input.ModifierKeys)">
            <summary>
            修飾キーを表記文字列に変換。
            </summary>
            <param name="mod">修飾キー。単一データで来る。</param>
            <returns></returns>
        </member>
        <member name="M:ContentTypeTextNet.Library.SharedLibrary.View.Control.HotkeyControl.GetDisplayKeyText(System.Windows.Input.Key)">
            <summary>
            キーを表記文字列に変換。
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="T:ContentTypeTextNet.Library.SharedLibrary.View.Control.TemplateBindingToolBar">
            <summary>
            http://stackoverflow.com/questions/1589034/how-to-get-a-wpf-toolbar-to-bind-to-a-collection-in-my-vm-without-using-expander?answertab=votes#tab-top
            </summary>
        </member>
        <member name="T:ContentTypeTextNet.Library.SharedLibrary.View.Converter.FontFamilyToNameConverter">
            <summary>
            <para>http://sourcechord.hatenablog.com/entry/2014/04/25/013631</para>
            </summary>
        </member>
        <member name="T:ContentTypeTextNet.Library.SharedLibrary.View.Converter.EnumToBooleanConverter">
            <summary>
            <para>http://stackoverflow.com/questions/397556/how-to-bind-radiobuttons-to-an-enum</para>
            </summary>
        </member>
        <member name="T:ContentTypeTextNet.Library.SharedLibrary.View.Converter.NotNullToVisibilityConverter">
            <summary>
            nullを表示、そうでなければ非表示するコンバーター。
            </summary>
        </member>
        <member name="T:ContentTypeTextNet.Library.SharedLibrary.View.Converter.NullToVisibilityConverter">
            <summary>
            nullを非表示、そうでなければ表示するコンバーター。
            </summary>
        </member>
        <member name="T:ContentTypeTextNet.Library.SharedLibrary.View.Converter.RatioConverter">
            <summary>
            値と比率(ConverterParameter)から掛け合わせた値を取得。
            </summary>
        </member>
        <member name="T:ContentTypeTextNet.Library.SharedLibrary.View.Converter.ReverseListConverterBase`1">
            <summary>
            <para>http://stackoverflow.com/questions/7405473/reversed-listbox-without-sorting?answertab=votes#tab-top</para>
            </summary>
        </member>
        <member name="T:ContentTypeTextNet.Library.SharedLibrary.View.ViewExtend.ApplicationDesktopToolbar">
            <summary>
            Windowにアプリケーションデスクトップツールバー機能を付与する。
            </summary>
        </member>
        <member name="E:ContentTypeTextNet.Library.SharedLibrary.View.ViewExtend.ApplicationDesktopToolbar.AppbarPosChanged">
            <summary>
            位置変更時に発生。
            </summary>
        </member>
        <member name="E:ContentTypeTextNet.Library.SharedLibrary.View.ViewExtend.ApplicationDesktopToolbar.AppbarStateChange">
            <summary>
            ステータス変更。
            </summary>
        </member>
        <member name="M:ContentTypeTextNet.Library.SharedLibrary.View.ViewExtend.ApplicationDesktopToolbar.CalcWantBarArea(ContentTypeTextNet.Library.SharedLibrary.Define.DockType)">
            <summary>
            設定値からバー領域取得
            </summary>
            <param name="dockType"></param>
            <returns></returns>
        </member>
        <member name="M:ContentTypeTextNet.Library.SharedLibrary.View.ViewExtend.ApplicationDesktopToolbar.TuneSystemBarArea(ContentTypeTextNet.Library.PInvoke.Windows.APPBARDATA@)">
            <summary>
            現在の希望するサイズから実際のサイズ要求する
            </summary>
            <param name="appBar"></param>
        </member>
        <member name="M:ContentTypeTextNet.Library.SharedLibrary.View.ViewExtend.ApplicationDesktopToolbar.Docking(ContentTypeTextNet.Library.SharedLibrary.Define.DockType,System.Boolean)">
            <summary>
            ドッキングの実行
            
            すでにドッキングされている場合はドッキングを再度実行する
            </summary>
        </member>
        <member name="M:ContentTypeTextNet.Library.SharedLibrary.View.ViewExtend.ApplicationDesktopToolbar.StopHideWait">
            <summary>
            非表示状態への待ちを取りやめ。
            </summary>
        </member>
        <member name="M:ContentTypeTextNet.Library.SharedLibrary.View.ViewExtend.ApplicationDesktopToolbar.StartHideWait">
            <summary>
            非表示状態への待ちを開始。
            </summary>
        </member>
        <member name="M:ContentTypeTextNet.Library.SharedLibrary.View.ViewExtend.ApplicationDesktopToolbar.AutoHideToShow">
            <summary>
            自動的に隠す状態から復帰
            </summary>
        </member>
        <member name="M:ContentTypeTextNet.Library.SharedLibrary.View.ViewExtend.ApplicationDesktopToolbar.HideView(System.Boolean)">
            <summary>
            非表示状態へ遷移。
            </summary>
            <param name="force">強制的に遷移するか。</param>
        </member>
        <member name="M:ContentTypeTextNet.Library.SharedLibrary.View.ViewExtend.ApplicationDesktopToolbar.HideViewCore(System.Boolean,System.Windows.Rect)">
            <summary>
            自動的に隠すの実際の処理。
            </summary>
            <param name="animation"></param>
            <param name="logicalHideArea"></param>
        </member>
        <member name="T:ContentTypeTextNet.Library.SharedLibrary.View.ViewExtend.WindowsViewExtendBase`1">
            <summary>
            ウィンドウとかに何かしら機能拡張する実装。
            </summary>
            <typeparam name="TViewModel"></typeparam>
        </member>
        <member name="T:ContentTypeTextNet.Library.SharedLibrary.View.Window.OnLoadedWindowBase">
            <summary>
            読み込みを Loaded イベントに依存しない順序ありで逐次実行する Window。
            <para>本クラスを継承する場合、Loaded イベントではなく OnLoaded を使用すること。</para>
            <para>順序については自身の読み込み処理を考慮して base.OnLoaded を呼び出すこと。 </para>
            </summary>
        </member>
        <member name="T:ContentTypeTextNet.Library.SharedLibrary.View.Window.UserClosableWindowWindowBase">
            <summary>
            × とか Alt + F4 で閉じたことを検知できる Window。
            </summary>
        </member>
        <member name="T:ContentTypeTextNet.Library.SharedLibrary.View.Window.WndProcWindowBase">
            <summary>
            Windowsのウィンドウプロシージャを持つWindow。
            </summary>
        </member>
    </members>
</doc>
