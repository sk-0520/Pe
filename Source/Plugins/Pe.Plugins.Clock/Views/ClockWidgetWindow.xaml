<Window
  x:Class="ContentTypeTextNet.Pe.Plugins.Clock.Views.ClockWidgetWindow"
  xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
  xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
  xmlns:sys="http://schemas.microsoft.com/winfx/2009/xaml"

  xmlns:plugins_clock_viewmodels="clr-namespace:ContentTypeTextNet.Pe.Plugins.Clock.ViewModels"
  xmlns:plugins_clock_views_converter="clr-namespace:ContentTypeTextNet.Pe.Plugins.Clock.Views.Converter"

  Title="ClockWindow"
  Width="200"
  Height="200"
  WindowStyle="None"
  AllowsTransparency="True"
  Background="Transparent"
  MouseLeftButtonDown="Window_MouseLeftButtonDown"

  xmlns:d="http://schemas.microsoft.com/expression/blend/2008" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
  mc:Ignorable="d"
>
  <Window.Resources>
    <plugins_clock_views_converter:ClockHeightToMarginConverter x:Key="ClockHeightToMarginConverter" />
    <plugins_clock_views_converter:ClockWidthCenterXConverter x:Key="ClockWidthCenterXConverter" />
    <plugins_clock_views_converter:NullConverter x:Key="NullConverter" />

    <Storyboard x:Key="fadein">
      <DoubleAnimation Storyboard.TargetProperty="Opacity" Duration="0.00:00:00.25" To="1" FillBehavior="HoldEnd" AutoReverse="False" />
    </Storyboard>
    <Storyboard x:Key="fadeout">
      <DoubleAnimation Storyboard.TargetProperty="Opacity" Duration="0.00:00:03.0" To="0" FillBehavior="HoldEnd" AutoReverse="False" />
    </Storyboard>
  </Window.Resources>
  <WindowChrome.WindowChrome>
    <WindowChrome ResizeBorderThickness="0" CaptionHeight="0" CornerRadius="10" GlassFrameThickness="10"/>
  </WindowChrome.WindowChrome>
  <!--<Window.Style>
    <Style TargetType="Window" BasedOn="{StaticResource {x:Type Window}}">
      <Style.Triggers>
        <Trigger Property="IsMouseOver" Value="True">
          <Setter Property="ResizeMode" Value="CanResizeWithGrip" />
        </Trigger>
      </Style.Triggers>
      <Setter Property="ResizeMode" Value="CanResize" />
    </Style>
  </Window.Style>-->

  <Grid>
    <Grid x:Name="background" Opacity="0">
      <Grid.Style>
        <Style TargetType="Grid">
          <Style.Triggers>
            <DataTrigger Binding="{Binding IsMouseOver, RelativeSource={RelativeSource AncestorType=Window}}" Value="True">
              <DataTrigger.EnterActions>
                <BeginStoryboard Storyboard="{StaticResource fadein}" />
              </DataTrigger.EnterActions>
              <DataTrigger.ExitActions>
                <BeginStoryboard Storyboard="{StaticResource fadeout}" />
              </DataTrigger.ExitActions>
            </DataTrigger>
            <!--<DataTrigger Binding="{Binding IsMouseOver, RelativeSource={RelativeSource AncestorType=Window}}" Value="False">
              <DataTrigger.EnterActions>
                <BeginStoryboard Storyboard="{StaticResource fadeout}" />
              </DataTrigger.EnterActions>
            </DataTrigger>-->
            <!--<MultiDataTrigger>
              <MultiDataTrigger.Conditions>
                <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource AncestorType=Window}}" Value="True" />
                <Condition Binding="{Binding IsMouseCaptured, RelativeSource={RelativeSource AncestorType=Window}}" Value="False" />
              </MultiDataTrigger.Conditions>
              <MultiDataTrigger.ExitActions>
                <BeginStoryboard Storyboard="{StaticResource fadeout}" />
              </MultiDataTrigger.ExitActions>
            </MultiDataTrigger>-->
          </Style.Triggers>
        </Style>
      </Grid.Style>
      <Rectangle>
        <Rectangle.Fill>
          <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
            <GradientStop Color="#ff000000" Offset="0" />
            <GradientStop Color="#80000000" Offset="0.2" />
            <GradientStop Color="#30000000" Offset="0.4" />
            <GradientStop Color="#30000000" Offset="0.6" />
            <GradientStop Color="#80000000" Offset="0.8" />
            <GradientStop Color="#ff000000" Offset="1" />
          </LinearGradientBrush>
        </Rectangle.Fill>
      </Rectangle>
    </Grid>


    <Viewbox Stretch="Uniform">
      <ContentControl Content="{Binding Content}">
        <ContentControl.Resources>

          <DataTemplate DataType="{x:Type plugins_clock_viewmodels:ClockWidgetSimpleAnalogClockContentViewModel}">
            <Grid x:Name="root" Width="120" Height="120">

              <Ellipse Fill="#ffffffff" StrokeThickness="4" Stroke="#ff000000" Width="{Binding Width, ElementName=root}" Height="{Binding Height, ElementName=root}" />

              <ItemsControl ItemsSource="{Binding HourAngels}" VerticalAlignment="Center" HorizontalAlignment="Center">
                <ItemsControl.ItemTemplate>
                  <DataTemplate>
                    <Border Width="3" Height="60" Margin="{Binding ActualHeight, RelativeSource={RelativeSource Mode=Self}, Converter={StaticResource ClockHeightToMarginConverter}}">
                      <Border.RenderTransform>
                        <RotateTransform Angle="{Binding Converter={StaticResource NullConverter}, ConverterParameter=0}" CenterX="{Binding ActualWidth, RelativeSource={RelativeSource AncestorType=Border}, Converter={StaticResource ClockWidthCenterXConverter}}" CenterY="{Binding ActualHeight, RelativeSource={RelativeSource AncestorType=Border}}" />
                      </Border.RenderTransform>
                      <Rectangle Fill="Black" Width="{Binding Width, RelativeSource={RelativeSource AncestorType=Border}}" Height="10" VerticalAlignment="Top" />
                    </Border>
                  </DataTemplate>
                </ItemsControl.ItemTemplate>
              </ItemsControl>

              <ItemsControl ItemsSource="{Binding SecondsAngels}" VerticalAlignment="Center" HorizontalAlignment="Center">
                <ItemsControl.ItemTemplate>
                  <DataTemplate>
                    <Border Width="2" Height="60" Margin="{Binding ActualHeight, RelativeSource={RelativeSource Mode=Self}, Converter={StaticResource ClockHeightToMarginConverter}}">
                      <Border.RenderTransform>
                        <RotateTransform Angle="{Binding Converter={StaticResource NullConverter}, ConverterParameter=0}" CenterX="{Binding ActualWidth, RelativeSource={RelativeSource AncestorType=Border}, Converter={StaticResource ClockWidthCenterXConverter}}" CenterY="{Binding ActualHeight, RelativeSource={RelativeSource AncestorType=Border}}" />
                      </Border.RenderTransform>
                      <Rectangle Fill="DarkGray" Width="{Binding Width, RelativeSource={RelativeSource AncestorType=Border}}" Height="2" VerticalAlignment="Top" Margin="0,6,0,0" />
                    </Border>
                  </DataTemplate>
                </ItemsControl.ItemTemplate>
              </ItemsControl>


              <Polygon x:Name="Hour" Points="0,40 2,0 4,40" VerticalAlignment="Center" HorizontalAlignment="Center" Fill="Black" Margin="{Binding ActualHeight, RelativeSource={RelativeSource Mode=Self}, Converter={StaticResource ClockHeightToMarginConverter}}">
                <Polygon.RenderTransform>
                  <RotateTransform Angle="{Binding HourAngle, Converter={StaticResource NullConverter}, ConverterParameter=0}" CenterX="{Binding ActualWidth, ElementName=Hour, Converter={StaticResource ClockWidthCenterXConverter}}" CenterY="{Binding ActualHeight, ElementName=Hour}" />
                </Polygon.RenderTransform>
              </Polygon>

              <Polygon x:Name="Minutes" Points="0,50 1,0 3,50" VerticalAlignment="Center" HorizontalAlignment="Center" Fill="Black" Margin="{Binding ActualHeight, RelativeSource={RelativeSource Mode=Self}, Converter={StaticResource ClockHeightToMarginConverter}}">
                <Polygon.RenderTransform>
                  <RotateTransform Angle="{Binding MinutesAngle, Converter={StaticResource NullConverter}, ConverterParameter=0}" CenterX="{Binding ActualWidth, ElementName=Minutes, Converter={StaticResource ClockWidthCenterXConverter}}" CenterY="{Binding ActualHeight, ElementName=Minutes}" />
                </Polygon.RenderTransform>
              </Polygon>

              <Polygon x:Name="Seconds" Points="0,60 1,0 2,60 " VerticalAlignment="Center" HorizontalAlignment="Center" Fill="Red" Margin="{Binding ActualHeight, RelativeSource={RelativeSource Mode=Self}, Converter={StaticResource ClockHeightToMarginConverter}}">
                <Polygon.RenderTransform>
                  <RotateTransform Angle="{Binding SecondsAngle, Converter={StaticResource NullConverter}, ConverterParameter=0}" CenterX="{Binding ActualWidth, ElementName=Seconds, Converter={StaticResource ClockWidthCenterXConverter}}" CenterY="{Binding ActualHeight, ElementName=Seconds}" />
                </Polygon.RenderTransform>
              </Polygon>

              <Polygon x:Name="Seconds2" Points="0,10 1,0 2,10 " VerticalAlignment="Center" HorizontalAlignment="Center" Fill="{Binding Fill, ElementName=Seconds}" Margin="{Binding ActualHeight, RelativeSource={RelativeSource Mode=Self}, Converter={StaticResource ClockHeightToMarginConverter}}">
                <Polygon.RenderTransform>
                  <RotateTransform Angle="{Binding SecondsOppositeAngle, Converter={StaticResource NullConverter}, ConverterParameter=0}" CenterX="{Binding ActualWidth, ElementName=Seconds2, Converter={StaticResource ClockWidthCenterXConverter}}" CenterY="{Binding ActualHeight, ElementName=Seconds2}" />
                </Polygon.RenderTransform>
              </Polygon>
              <Ellipse Width="5" Height="5" Fill="{Binding Fill, ElementName=Seconds}" />


            </Grid>
          </DataTemplate>

          <DataTemplate DataType="{x:Type plugins_clock_viewmodels:ClockWidgetJaggyAnalogClockContentViewModel}">
            <Grid x:Name="root" Width="120" Height="120" RenderOptions.EdgeMode="Aliased">

              <Ellipse Fill="Gray" Width="{Binding Width, ElementName=root}" Height="{Binding Height, ElementName=root}" />

              <!-- めんどさ極まる -->
              <Grid Margin="4" TextElement.FontFamily="MS UI Gothic">
                <TextBlock VerticalAlignment="Top" HorizontalAlignment="Center">
                  <TextBlock.Style>
                    <Style TargetType="TextBlock">
                      <Style.Triggers>
                        <DataTrigger Binding="{Binding IsPm}" Value="True">
                          <Setter Property="Text" Value="12" />
                        </DataTrigger>
                      </Style.Triggers>
                      <Setter Property="Text" Value="0" />
                    </Style>
                  </TextBlock.Style>
                </TextBlock>
                <TextBlock VerticalAlignment="Center" HorizontalAlignment="Right">
                  <TextBlock.Style>
                    <Style TargetType="TextBlock">
                      <Style.Triggers>
                        <DataTrigger Binding="{Binding IsPm}" Value="True">
                          <Setter Property="Text" Value="15" />
                        </DataTrigger>
                      </Style.Triggers>
                      <Setter Property="Text" Value="3" />
                    </Style>
                  </TextBlock.Style>
                </TextBlock>
                <TextBlock VerticalAlignment="Bottom" HorizontalAlignment="Center">
                  <TextBlock.Style>
                    <Style TargetType="TextBlock">
                      <Style.Triggers>
                        <DataTrigger Binding="{Binding IsPm}" Value="True">
                          <Setter Property="Text" Value="18" />
                        </DataTrigger>
                      </Style.Triggers>
                      <Setter Property="Text" Value="6" />
                    </Style>
                  </TextBlock.Style>
                </TextBlock>
                <TextBlock VerticalAlignment="Center" HorizontalAlignment="Left">
                  <TextBlock.Style>
                    <Style TargetType="TextBlock">
                      <Style.Triggers>
                        <DataTrigger Binding="{Binding IsPm}" Value="True">
                          <Setter Property="Text" Value="21" />
                        </DataTrigger>
                      </Style.Triggers>
                      <Setter Property="Text" Value="9" />
                    </Style>
                  </TextBlock.Style>
                </TextBlock>
              </Grid>

              <Rectangle x:Name="Hour" Width="5" Height="30" Fill="Black" Stroke="White" StrokeThickness="0.5" Margin="{Binding Height, RelativeSource={RelativeSource Mode=Self}, Converter={StaticResource ClockHeightToMarginConverter}}">
                <Rectangle.RenderTransform>
                  <RotateTransform Angle="{Binding HourAngle, Converter={StaticResource NullConverter}, ConverterParameter=0}" CenterX="{Binding Width, ElementName=Hour, Converter={StaticResource ClockWidthCenterXConverter}}" CenterY="{Binding Height, ElementName=Hour}" />
                </Rectangle.RenderTransform>
              </Rectangle>
              <Rectangle x:Name="Minutes" Width="3" Height="40" Fill="Black" Stroke="White" StrokeThickness="0.5" Margin="{Binding Height, RelativeSource={RelativeSource Mode=Self}, Converter={StaticResource ClockHeightToMarginConverter}}">
                <Rectangle.RenderTransform>
                  <RotateTransform Angle="{Binding MinutesAngle, Converter={StaticResource NullConverter}, ConverterParameter=0}" CenterX="{Binding Width, ElementName=Minutes, Converter={StaticResource ClockWidthCenterXConverter}}" CenterY="{Binding Height, ElementName=Minutes}" />
                </Rectangle.RenderTransform>
              </Rectangle>
              <Rectangle x:Name="Seconds" Width="2" Height="50" Fill="Black" Stroke="White" StrokeThickness="0.5" Margin="{Binding Height, RelativeSource={RelativeSource Mode=Self}, Converter={StaticResource ClockHeightToMarginConverter}}">
                <Rectangle.RenderTransform>
                  <RotateTransform Angle="{Binding SecondsAngle, Converter={StaticResource NullConverter}, ConverterParameter=0}" CenterX="{Binding Width, ElementName=Seconds, Converter={StaticResource ClockWidthCenterXConverter}}" CenterY="{Binding Height, ElementName=Seconds}" />
                </Rectangle.RenderTransform>
              </Rectangle>
              <Ellipse Width="5" Height="5" Fill="Black" Stroke="White" StrokeThickness="0.5" />

            </Grid>
          </DataTemplate>
        </ContentControl.Resources>
      </ContentControl>
    </Viewbox>

    <Border
      x:Name="resize"
      Opacity="{Binding Opacity, ElementName=background}"
      VerticalAlignment="Bottom"
      HorizontalAlignment="Right"
      Cursor="SizeNWSE"
      Background="Transparent"
      MouseLeftButtonDown="resize_MouseLeftButtonDown"
    >
      <ResizeGrip IsHitTestVisible="False" Width="10" Height="10"/>
    </Border>
  </Grid>
</Window>
