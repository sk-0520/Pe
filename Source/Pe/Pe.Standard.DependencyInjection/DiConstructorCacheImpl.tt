<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output encoding="utf-8" extension=".cs" #>
<#
const int parameterCount = 60;
#>
// <auto-generated>
// [T4] build <#= DateTime.UtcNow.ToString("u") #>(UTC)
// </auto-generated>
using System;
using System.Diagnostics;

namespace ContentTypeTextNet.Pe.Standard.DependencyInjection
{
    partial class DiConstructorCache {
<#
    for(var i = 0; i < parameterCount; i++) {
#>
        private delegate object DiConstructorCacheP<#= i + 1 #>(<#= string.Join(", ", Enumerable.Repeat("object p", i + 1).Select((v,i) => v + (i + 1))) #>);
<#
    }
#>

        [System.Diagnostics.CodeAnalysis.SuppressMessage("Performance", "HAA0301:Closure Allocation Source", Justification = "<保留中>")]
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Performance", "HAA0302:Display class allocation to capture closure", Justification = "<保留中>")]
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Performance", "HAA0101:Array allocation for params parameter", Justification = "<保留中>")]
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Performance", "HAA0601:Value type to reference type conversion causing boxing allocation", Justification = "<保留中>")]
        private Func<object[], object> CreateCore(object[] parameters)
        {
            switch(ParameterInfoItems.Count) {
<#
                for(var i = 0; i < parameterCount; i++) {
#>
                case <#= i + 1 #>: {
                    var creator = CreateFunction<DiConstructorCacheP<#= i + 1 #>>();
                    return p => creator(<#= string.Join(", ", Enumerable.Repeat("p", i + 1).Select((v, i) => $"{v}[{i}]")) #>);
                }
<#
                }
#>

                default:
                    Debug.WriteLine("パラメータ数ガン上げ: <#= parameterCount #> < {0}", ParameterInfoItems.Count);
                    return ConstructorInfo.Invoke;
            }
        }
    }
}
