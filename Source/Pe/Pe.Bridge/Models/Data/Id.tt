<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ include file="Id.t4" once="true" #>
<#@ output extension=".cs" #>
<#
    var items = IdDefine.GetItems();
#>
// <auto-generated>
// [T4] build <#= DateTime.UtcNow.ToString("u") #>(UTC)
// </auto-generated>

namespace ContentTypeTextNet.Pe.Bridge.Models.Data
{
<# foreach(var item in items) { #>
    /// <summary>
    /// <#= item.Description #>。
    /// </summary>
    public readonly record struct <#= item.Name #>: System.IEquatable<<#= item.Name #>>
    {
        /// <summary>
        /// 生成。
        /// </summary>
        public <#= item.Name #>(<#= item.Type.FullName #> rawId)
        {
            Id = rawId;
        }

        /// <summary>
        /// 生成。
        /// </summary>
        public <#= item.Name #>(<#= item.Name #> id)
        {
            Id = id.Id;
        }

        #region property

        /// <summary>
        /// 生ID。
        /// </summary>
        public <#= item.Type.FullName #> Id { get; }

        #endregion

        #region property

        /// <summary>
        /// 空ID。
        /// </summary>
        public static <#= item.Name #> Empty
        {
            get
            {
                return new <#= item.Name #>(default(<#= item.Type.FullName #>));
            }
        }

        #endregion

        #region function

        /// <summary>
        ///  <see cref="<#= item.Name #>"/>に変換。
        /// </summary>
        /// <param name="s">入力文字列。</param>
        /// <param name="result">変更成功。</param>
        /// <returns></returns>
        public static  bool TryParse(string s, out <#= item.Name #> result)
        {
            if(<#= item.Type.FullName #>.TryParse(s, out var val)) {
                result = new <#= item.Name #>(val);
                return true;
            }

            result = default;
            return false;
        }

        #endregion

        #region IEquatable

        public bool Equals(LauncherItemId other)
        {
            return Id == other.Id;
        }

        #endregion

        #region object

        public override int GetHashCode()
        {
            return Id.GetHashCode();
        }

        #endregion
    }
<# } #>
}
