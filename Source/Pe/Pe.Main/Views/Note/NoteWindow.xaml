<Window
  x:Name="root"
  x:Class="ContentTypeTextNet.Pe.Main.Views.Note.NoteWindow"
  xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
  xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
  xmlns:sys="clr-namespace:System;assembly=System.Runtime"

  xmlns:i="http://schemas.microsoft.com/expression/2010/interactivity"
  xmlns:prism="http://prismlibrary.com/"

  xmlns:app_bridge_models_data="clr-namespace:ContentTypeTextNet.Pe.Bridge.Models.Data;assembly=Pe.Bridge"
  xmlns:app_core_views="clr-namespace:ContentTypeTextNet.Pe.Core.Views;assembly=Pe.Core"
  xmlns:app_core_views_converter="clr-namespace:ContentTypeTextNet.Pe.Core.Views.Converter;assembly=Pe.Core"
  xmlns:app_core_views_attached="clr-namespace:ContentTypeTextNet.Pe.Core.Views.Attached;assembly=Pe.Core"

  xmlns:app_main_views="clr-namespace:ContentTypeTextNet.Pe.Main.Views"
  xmlns:app_main_models_data="clr-namespace:ContentTypeTextNet.Pe.Main.Models.Data"
  xmlns:app_main_viewmodels_note="clr-namespace:ContentTypeTextNet.Pe.Main.ViewModels.Note"
  xmlns:app_main_viewmodels_font="clr-namespace:ContentTypeTextNet.Pe.Main.ViewModels.Font"
  xmlns:app_main="clr-namespace:ContentTypeTextNet.Pe.Main"
  xmlns:app_main_views_converter="clr-namespace:ContentTypeTextNet.Pe.Main.Views.Converter"

  Icon="/Resources/Icon/App.ico"
  AllowsTransparency="True"
  WindowStyle="None"
  ShowInTaskbar="False"
  AllowDrop="True"

  Left="{Binding WindowLeft, Mode=TwoWay, Delay=500}"
  Top="{Binding WindowTop, Mode=TwoWay, Delay=500}"
  Width="{Binding WindowWidth, Mode=TwoWay, Delay=500}"
  Height="{Binding WindowHeight, Mode=TwoWay, Delay=500}"
  Topmost="{Binding IsTopmost}"
  MinHeight="{Binding MinHeight}"

  xmlns:d="http://schemas.microsoft.com/expression/blend/2008" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
  mc:Ignorable="d"
  d:DesignWidth="100"
  d:DesignHeight="100"
>
  <Window.Resources>
    <ResourceDictionary>
      <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="pack://application:,,,/Pe.Core;component/Views/ColorPickerDictionary.xaml" />
      </ResourceDictionary.MergedDictionaries>

      <sys:Double x:Key="DisableOpacity">0.4</sys:Double>
      <BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter" />
      <app_core_views_converter:BooleanToVisibilityConverter
        x:Key="FalseToVisibilityConverter"
        True="Collapsed"
        False="Visible"
      />
      <app_core_views_converter:EnumToBooleanConverter x:Key="EnumToBooleanConverter" />
      <app_core_views_converter:LogicalNotConverter x:Key="LogicalNotConverter" />
      <app_main_views_converter:TitleConverter x:Key="TitleConverter" />
      <app_main_views_converter:EnumToCultureConverter x:Key="EnumToCultureConverter" />
      <app_core_views_converter:DoubleCompareConverter x:Key="LessEqual-DoubleCompareConverter" Compare="LessEqual" />
      <app_core_views_converter:LogicalIsNotNullConverter x:Key="LogicalIsNotNullConverter" />
      <app_core_views_converter:LogicalMultiOrConverter x:Key="LogicalMultiOrConverter" />
      <app_main_views_converter:FontFamilyToNameConverter x:Key="FontFamilyToNameConverter" />

      <WindowChrome x:Key="NormalWindowChrome"
        ResizeBorderThickness="{Binding BorderThickness}"
        CaptionHeight="0"
      />
      <WindowChrome x:Key="CompactWindowChrome"
        ResizeBorderThickness="0"
        CaptionHeight="0"
      />
      <WindowChrome x:Key="LockWindowChrome"
        ResizeBorderThickness="0"
        CaptionHeight="0"
      />

    </ResourceDictionary>
  </Window.Resources>
  <Window.Title>
    <Binding Path="Title" Converter="{StaticResource TitleConverter}" />
  </Window.Title>
  <i:Interaction.Triggers>
    <i:EventTrigger EventName="Deactivated">
      <i:InvokeCommandAction Command="{Binding SaveTitleEditCommand}" CommandParameter="{Binding ElementName=inputTitle}" />
      <i:InvokeCommandAction Command="{Binding ViewDeactivatedCommand}" CommandParameter="{Binding ElementName=root}" />
    </i:EventTrigger>
    <i:EventTrigger EventName="Activated">
      <i:InvokeCommandAction Command="{Binding ViewActivatedCommand}" CommandParameter="{Binding ElementName=root}"/>
    </i:EventTrigger>

    <app_core_views:RequestTrigger SourceObject="{Binding TitleEditStartRequest}">
      <prism:InvokeCommandAction Command="{Binding TitleEditStartCommand ,ElementName=root}" />
    </app_core_views:RequestTrigger>
    <app_core_views:RequestTrigger SourceObject="{Binding SelectLinkFileRequest}">
      <prism:InvokeCommandAction Command="{Binding SelectLinkFileCommand ,ElementName=root}" />
    </app_core_views:RequestTrigger>
    <!--<app_core_view:RequestTrigger SourceObject="{Binding UnlinkRequest}">
      <prism:InvokeCommandAction Command="{Binding UnlinkCommand ,ElementName=root}" />
    </app_core_view:RequestTrigger>-->
    <app_core_views:RequestTrigger SourceObject="{Binding LinkChangeRequest}">
      <prism:InvokeCommandAction Command="{Binding LinkChangeCommand ,ElementName=root}" />
    </app_core_views:RequestTrigger>
    <app_core_views:RequestTrigger SourceObject="{Binding CloseRequest}">
      <prism:InvokeCommandAction Command="{Binding CloseCommand ,ElementName=root}" />
    </app_core_views:RequestTrigger>
  </i:Interaction.Triggers>
  <i:Interaction.Behaviors>
    <app_core_views_attached:DragAndDropBehavior DragAndDrop="{Binding DragAndDrop}" />
  </i:Interaction.Behaviors>
  <Window.Style>
    <Style TargetType="Window" BasedOn="{StaticResource {x:Type Window}}">
      <Style.Triggers>
        <MultiDataTrigger>
          <MultiDataTrigger.Conditions>
            <Condition Binding="{Binding IsCompact}" Value="True" />
            <Condition Binding="{Binding IsLocked}" Value="False" />
          </MultiDataTrigger.Conditions>
          <Setter Property="WindowChrome.WindowChrome" Value="{StaticResource CompactWindowChrome}" />
        </MultiDataTrigger>
        <DataTrigger Binding="{Binding IsLocked}" Value="True">
          <Setter Property="WindowChrome.WindowChrome" Value="{StaticResource LockWindowChrome}" />
        </DataTrigger>
      </Style.Triggers>
      <Setter Property="WindowChrome.WindowChrome" Value="{StaticResource NormalWindowChrome}" />
    </Style>
  </Window.Style>
  <Window.Visibility>
    <Binding Path="IsVisible" Converter="{StaticResource BooleanToVisibilityConverter}"/>
  </Window.Visibility>
  <Window.CommandBindings>
    <CommandBinding Command="{x:Static SystemCommands.CloseWindowCommand}" CanExecute="CloseWindowCommand_CanExecute" Executed="CloseWindowCommand_Executed" />
  </Window.CommandBindings>
  <Grid>
    <!--#region 内容-->
    <Border BorderBrush="{Binding BorderBrush}" BorderThickness="{Binding BorderThickness}">
      <DockPanel LastChildFill="True">
        <Grid Background="{Binding CaptionBackground}" Height="{Binding CaptionHeight}" >
          <Grid.Resources>
            <Style x:Key="CaptionButton" TargetType="ButtonBase">
              <Setter Property="WindowChrome.IsHitTestVisibleInChrome" Value="True" />
              <Setter Property="Visibility" Value="{Binding IsLocked, Converter={StaticResource FalseToVisibilityConverter}}" />
              <Setter Property="Template">
                <Setter.Value>
                  <ControlTemplate TargetType="Button">
                    <Border x:Name="parent" Background="{Binding CaptionBackgroundNoneBrush}">
                      <ContentPresenter x:Name="content" />
                    </Border>
                    <ControlTemplate.Triggers>
                      <Trigger Property="IsMouseOver" Value="True">
                        <Setter TargetName="parent" Property="Background" Value="{Binding CaptionBackgroundOverBrush}" />
                      </Trigger>
                      <Trigger Property="IsPressed" Value="True">
                        <Setter TargetName="parent" Property="Background" Value="{Binding CaptionBackgroundPressedBrush}" />
                      </Trigger>
                    </ControlTemplate.Triggers>
                  </ControlTemplate>
                </Setter.Value>
              </Setter>
            </Style>
          </Grid.Resources>
          <Grid.Style>
            <Style TargetType="Grid">
              <Style.Triggers>
                <DataTrigger Binding="{Binding CaptionPosition}" Value="Bottom">
                  <Setter Property="DockPanel.Dock" Value="Bottom" />
                </DataTrigger>
              </Style.Triggers>
              <Setter Property="DockPanel.Dock" Value="Top" />
            </Style>
          </Grid.Style>

          <Grid.ColumnDefinitions>
            <ColumnDefinition Width="*" />
            <ColumnDefinition Width="Auto"/>
            <ColumnDefinition Width="Auto"/>
            <ColumnDefinition Width="Auto"/>
          </Grid.ColumnDefinitions>

          <TextBox x:Name="inputTitle" Grid.Column="0" Background="Transparent" BorderThickness="0" VerticalContentAlignment="Center" Foreground="{Binding CaptionForeground}" >
            <i:Interaction.Triggers>
              <i:EventTrigger EventName="LostFocus">
                <i:InvokeCommandAction Command="{Binding SaveTitleEditCommand}" CommandParameter="{Binding ElementName=inputTitle}" />
              </i:EventTrigger>
            </i:Interaction.Triggers>
            <TextBox.Style>
              <Style TargetType="TextBox" BasedOn="{StaticResource {x:Type TextBox}}">
                <Style.Triggers>
                  <DataTrigger Binding="{Binding TitleEditMode}" Value="True">
                    <Setter Property="WindowChrome.IsHitTestVisibleInChrome" Value="True" />
                    <Setter Property="IsReadOnly" Value="False" />
                    <Setter Property="UndoLimit" Value="-1" />
                    <Setter Property="Focusable" Value="True" />
                    <Setter Property="Text" Value="{Binding EditingTitle, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" />
                    <Setter Property="CaretBrush" Value="{Binding Foreground, RelativeSource={RelativeSource Mode=Self}}" />
                    <Setter Property="Cursor" Value="IBeam" />
                  </DataTrigger>
                  <DataTrigger Binding="{Binding IsLocked}" Value="True">
                    <Setter Property="Cursor" Value="Arrow" />
                  </DataTrigger>
                </Style.Triggers>
                <Setter Property="IsReadOnly" Value="True" />
                <Setter Property="UndoLimit" Value="0" />
                <Setter Property="Focusable" Value="False" />
                <Setter Property="Text" Value="{Binding Title, Mode=OneWay}" />
                <Setter Property="IsReadOnlyCaretVisible" Value="False" />
                <Setter Property="CaretBrush" Value="Transparent" />
                <Setter Property="IsInactiveSelectionHighlightEnabled" Value="False" />
              </Style>
            </TextBox.Style>
            <TextBox.InputBindings>
              <KeyBinding Key="Esc" Command="{Binding CancelTitleEditCommand}" CommandParameter="{Binding ElementName=inputTitle}" />
              <KeyBinding Key="Return" Command="{Binding SaveTitleEditCommand}" CommandParameter="{Binding ElementName=inputTitle}" />
            </TextBox.InputBindings>
          </TextBox>

          <Button Grid.Column="1" ToolTip="{Binding Resources.String_Note_Caption_ToggleCompact, Source={x:Static app_main:CultureService.Instance}}" Command="{Binding ToggleCompactCommand}">
            <Button.Style>
              <Style TargetType="Button" BasedOn="{StaticResource CaptionButton}">
                <Style.Triggers>
                  <DataTrigger Binding="{Binding IsCompact}" Value="True">
                    <Setter Property="Content" Value="{Binding CaptionCompactEnabledImage}" />
                  </DataTrigger>
                </Style.Triggers>
                <Setter Property="Content" Value="{Binding CaptionCompactDisabledImage}" />
              </Style>
            </Button.Style>
          </Button>
          <Button Grid.Column="2" ToolTip="{Binding Resources.String_Note_Caption_ToggleTopmost, Source={x:Static app_main:CultureService.Instance}}" Command="{Binding ToggleTopmostCommand}">
            <Button.Style>
              <Style TargetType="Button" BasedOn="{StaticResource CaptionButton}">
                <Style.Triggers>
                  <DataTrigger Binding="{Binding IsTopmost}" Value="True">
                    <Setter Property="Content" Value="{Binding CaptionTopmostEnabledImage}" />
                  </DataTrigger>
                </Style.Triggers>
                <Setter Property="Content" Value="{Binding CaptionTopmostDisabledImage}" />
              </Style>
            </Button.Style>
          </Button>
          <Button Grid.Column="3" ToolTip="{Binding Resources.String_Note_Caption_Close, Source={x:Static app_main:CultureService.Instance}}" Style="{StaticResource CaptionButton}" Content="{Binding CaptionCloseImage}" Command="{x:Static SystemCommands.CloseWindowCommand}" CommandParameter="{Binding ElementName=root}" />
        </Grid>

        <Grid>
          <Grid Background="{Binding ContentBackground}">
            <Grid.Resources>
              <sys:Double x:Key="Normal-Size">4</sys:Double>
              <sys:Double x:Key="Active-Size">12</sys:Double>
              <Duration x:Key="Normal-Time">0.00:00:00.100</Duration>
              <Duration x:Key="Active-Time">0.00:00:00.050</Duration>

              <Style x:Key="RepeatButton" TargetType="RepeatButton">
                <Style.Triggers>
                  <DataTrigger Value="True">
                    <DataTrigger.Binding>
                      <MultiBinding Converter="{StaticResource LogicalMultiOrConverter}">
                        <Binding Path="IsMouseOver" RelativeSource="{RelativeSource Mode=Self}" />
                        <Binding Path="IsActive" RelativeSource="{RelativeSource AncestorType=Window}" />
                      </MultiBinding>
                    </DataTrigger.Binding>
                    <Setter Property="Visibility" Value="Visible" />
                  </DataTrigger>
                </Style.Triggers>
                <Setter Property="Visibility" Value="Collapsed" />
                <Setter Property="Background" Value="Transparent"/>
                <Setter Property="Foreground" Value="Transparent"/>
                <Setter Property="Template">
                  <Setter.Value>
                    <ControlTemplate>
                      <Border Background="Transparent" />
                    </ControlTemplate>
                  </Setter.Value>
                </Setter>
              </Style>

              <ControlTemplate x:Key="Thumb" TargetType="Thumb">
                <Rectangle RadiusX="2" RadiusY="2" Opacity="0.9" Fill="{Binding DataContext.ContentForeground, RelativeSource={RelativeSource AncestorType=Window}}" />
              </ControlTemplate>

              <Style x:Key="TextBoxBase" TargetType="TextBoxBase">
                <Style.Resources>
                  <Style TargetType="ScrollBar" BasedOn="{StaticResource {x:Type ScrollBar}}">
                    <Style.Triggers>
                      <DataTrigger Value="True">
                        <DataTrigger.Binding>
                          <MultiBinding Converter="{StaticResource LogicalMultiOrConverter}">
                            <Binding Path="IsMouseOver" RelativeSource="{RelativeSource AncestorType=TextBox}" />
                            <Binding Path="IsMouseOver" RelativeSource="{RelativeSource AncestorType=RichTextBox}" />
                            <Binding Path="IsActive" RelativeSource="{RelativeSource AncestorType=Window}" />
                          </MultiBinding>
                        </DataTrigger.Binding>
                        <DataTrigger.EnterActions>
                          <BeginStoryboard>
                            <Storyboard>
                              <DoubleAnimation Storyboard.TargetProperty="Opacity" To="0.8" Duration="0.00:00:00.250" />
                            </Storyboard>
                          </BeginStoryboard>
                        </DataTrigger.EnterActions>
                        <DataTrigger.ExitActions>
                          <BeginStoryboard>
                            <Storyboard>
                              <DoubleAnimation Storyboard.TargetProperty="Opacity" To="0" Duration="0.00:00:01.0" />
                            </Storyboard>
                          </BeginStoryboard>
                        </DataTrigger.ExitActions>
                      </DataTrigger>
                      <!-- 縦 -->
                      <Trigger Property="Orientation" Value="Vertical">
                        <Setter Property="Template">
                          <Setter.Value>
                            <ControlTemplate>
                              <Track x:Name="PART_Track" IsDirectionReversed="True">
                                <Track.DecreaseRepeatButton>
                                  <RepeatButton Command="ScrollBar.PageUpCommand" Style="{StaticResource RepeatButton}" />
                                </Track.DecreaseRepeatButton>
                                <Track.IncreaseRepeatButton>
                                  <RepeatButton Command="ScrollBar.PageDownCommand" Style="{StaticResource RepeatButton}" />
                                </Track.IncreaseRepeatButton>
                                <Track.Thumb>
                                  <Thumb>
                                    <Thumb.Style>
                                      <Style TargetType="Thumb">
                                        <Style.Triggers>
                                          <DataTrigger Value="True">
                                            <DataTrigger.Binding>
                                              <MultiBinding Converter="{StaticResource LogicalMultiOrConverter}">
                                                <Binding Path="IsMouseOver" RelativeSource="{RelativeSource Mode=Self}" />
                                                <Binding Path="IsActive" RelativeSource="{RelativeSource AncestorType=Window}" />
                                              </MultiBinding>
                                            </DataTrigger.Binding>
                                            <DataTrigger.EnterActions>
                                              <BeginStoryboard>
                                                <Storyboard>
                                                  <DoubleAnimation Storyboard.TargetProperty="Width" To="{StaticResource Active-Size}" Duration="{StaticResource Active-Time}" />
                                                </Storyboard>
                                              </BeginStoryboard>
                                            </DataTrigger.EnterActions>
                                            <DataTrigger.ExitActions>
                                              <BeginStoryboard>
                                                <Storyboard>
                                                  <DoubleAnimation Storyboard.TargetProperty="Width" To="{StaticResource Normal-Size}" Duration="{StaticResource Normal-Time}" />
                                                </Storyboard>
                                              </BeginStoryboard>
                                            </DataTrigger.ExitActions>
                                          </DataTrigger>
                                        </Style.Triggers>
                                        <Setter Property="Width" Value="{StaticResource Normal-Size}" />
                                        <Setter Property="Template" Value="{StaticResource Thumb}" />
                                      </Style>
                                    </Thumb.Style>
                                  </Thumb>
                                </Track.Thumb>
                              </Track>
                            </ControlTemplate>
                          </Setter.Value>
                        </Setter>
                      </Trigger>
                      <!-- 横 -->
                      <Trigger Property="Orientation" Value="Horizontal">
                        <Setter Property="Template">
                          <Setter.Value>
                            <ControlTemplate>
                              <Track x:Name="PART_Track" IsDirectionReversed="False">
                                <Track.Thumb>
                                  <Thumb>
                                    <Thumb.Style>
                                      <Style TargetType="Thumb">
                                        <Style.Triggers>
                                          <DataTrigger Value="True">
                                            <DataTrigger.Binding>
                                              <MultiBinding Converter="{StaticResource LogicalMultiOrConverter}">
                                                <Binding Path="IsMouseOver" RelativeSource="{RelativeSource Mode=Self}" />
                                                <Binding Path="IsActive" RelativeSource="{RelativeSource AncestorType=Window}" />
                                              </MultiBinding>
                                            </DataTrigger.Binding>
                                            <DataTrigger.EnterActions>
                                              <BeginStoryboard>
                                                <Storyboard>
                                                  <DoubleAnimation Storyboard.TargetProperty="Height" To="{StaticResource Active-Size}" Duration="{StaticResource Active-Time}" />
                                                </Storyboard>
                                              </BeginStoryboard>
                                            </DataTrigger.EnterActions>
                                            <DataTrigger.ExitActions>
                                              <BeginStoryboard>
                                                <Storyboard>
                                                  <DoubleAnimation Storyboard.TargetProperty="Height" To="{StaticResource Normal-Size}" Duration="{StaticResource Normal-Time}" />
                                                </Storyboard>
                                              </BeginStoryboard>
                                            </DataTrigger.ExitActions>
                                          </DataTrigger>
                                        </Style.Triggers>
                                        <Setter Property="Height" Value="{StaticResource Normal-Size}" />
                                        <Setter Property="Template" Value="{StaticResource Thumb}" />
                                      </Style>
                                    </Thumb.Style>
                                  </Thumb>
                                </Track.Thumb>
                              </Track>
                            </ControlTemplate>
                          </Setter.Value>
                        </Setter>
                      </Trigger>
                    </Style.Triggers>
                    <Setter Property="Background" Value="Transparent"/>
                    <Setter Property="Opacity" Value="0" />
                  </Style>

                  <Style TargetType="{x:Type ScrollViewer}">
                    <Setter Property="Template">
                      <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ScrollViewer}">
                          <Grid>
                            <Grid.ColumnDefinitions>
                              <ColumnDefinition Width="*" />
                              <ColumnDefinition Width="Auto"/>
                            </Grid.ColumnDefinitions>
                            <Grid.RowDefinitions>
                              <RowDefinition Height="*" />
                              <RowDefinition Height="Auto"/>
                            </Grid.RowDefinitions>
                            <ScrollContentPresenter
                              Grid.Row="0"
                              Grid.Column="0"
                              Margin="{TemplateBinding Padding}"
                              CanContentScroll="{TemplateBinding CanContentScroll}"
                              CanHorizontallyScroll="False"
                              CanVerticallyScroll="False"
                              Content="{TemplateBinding Content}"
                              ContentTemplate="{TemplateBinding ContentTemplate}"
                            />
                            <ScrollBar
                              x:Name="PART_VerticalScrollBar"
                              Grid.Row="0"
                              Grid.Column="1"
                              AutomationProperties.AutomationId="VerticalScrollBar"
                              Minimum="0"
                              Maximum="{TemplateBinding ScrollableHeight}"
                              ViewportSize="{TemplateBinding ViewportHeight}"
                              Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}"
                              Value="{Binding VerticalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}"
                            />
                            <ScrollBar
                              x:Name="PART_HorizontalScrollBar"
                              Grid.Row="1"
                              Grid.Column="0"
                              AutomationProperties.AutomationId="HorizontalScrollBar"
                              Minimum="0"
                              Maximum="{TemplateBinding ScrollableWidth}"
                              Orientation="Horizontal"
                              ViewportSize="{TemplateBinding ViewportWidth}"
                              Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}"
                              Value="{Binding HorizontalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}"
                            />
                          </Grid>
                        </ControlTemplate>
                      </Setter.Value>
                    </Setter>
                  </Style>

                </Style.Resources>
                <Style.Triggers>
                  <MultiDataTrigger>
                    <MultiDataTrigger.Conditions></MultiDataTrigger.Conditions>
                  </MultiDataTrigger>
                </Style.Triggers>
                <Setter Property="Background" Value="Transparent" />
                <Setter Property="BorderThickness" Value="0" />
                <Setter Property="AcceptsReturn" Value="True" />
                <Setter Property="AcceptsTab" Value="True" />
                <Setter Property="IsReadOnly" Value="{Binding DataContext.IsLocked, ElementName=root}" />
                <Setter Property="FontFamily" Value="{Binding DataContext.Font.FontFamily, ElementName=root}" />
                <Setter Property="FontSize" Value="{Binding DataContext.Font.FontSize, ElementName=root}" />
                <Setter Property="FontStyle" Value="{Binding DataContext.Font.FontStyle, ElementName=root}" />
                <Setter Property="FontWeight" Value="{Binding DataContext.Font.FontWeight, ElementName=root}" />
                <Setter Property="Foreground" Value="{Binding DataContext.ContentForeground, ElementName=root}" />
                <Setter Property="IsInactiveSelectionHighlightEnabled" Value="{Binding IsActive, ElementName=root, Mode=OneWay}" />
                <Setter Property="HorizontalScrollBarVisibility" Value="Auto" />
                <Setter Property="VerticalScrollBarVisibility" Value="Auto" />
              </Style>

              <Style x:Key="ContentTextBox" TargetType="TextBox" BasedOn="{StaticResource TextBoxBase}">
                <Style.Triggers>
                  <DataTrigger Binding="{Binding DataContext.TextWrap, ElementName=root}" Value="True">
                    <Setter Property="TextWrapping" Value="Wrap" />
                  </DataTrigger>
                </Style.Triggers>
                <!--<Setter Property="Background" Value="Transparent" />
              <Setter Property="BorderThickness" Value="0" />
              <Setter Property="AcceptsReturn" Value="True" />
              <Setter Property="IsReadOnly" Value="{Binding DataContext.IsLocked, ElementName=root}" />
              <Setter Property="FontFamily" Value="{Binding DataContext.Font.FontFamily, ElementName=root}" />
              <Setter Property="FontSize" Value="{Binding DataContext.Font.FontSize, ElementName=root}" />
              <Setter Property="FontStyle" Value="{Binding DataContext.Font.FontStyle, ElementName=root}" />
              <Setter Property="FontWeight" Value="{Binding DataContext.Font.FontWeight, ElementName=root}" />
              <Setter Property="Foreground" Value="{Binding DataContext.ContentForeground, ElementName=root}" />-->
              </Style>

              <Style x:Key="ContentRichTextBox" TargetType="RichTextBox" BasedOn="{StaticResource TextBoxBase}" />

              <!--#region テキスト -->
              <DataTemplate DataType="{x:Type app_main_viewmodels_note:NotePlainContentViewModel}">
                <TextBox x:Name="control" Style="{StaticResource ContentTextBox}" Text="{Binding Content, UpdateSourceTrigger=PropertyChanged, Delay=1000}">
                  <i:Interaction.Triggers>
                    <i:EventTrigger EventName="Loaded">
                      <i:InvokeCommandAction Command="{Binding LoadedCommand}" CommandParameter="{Binding ElementName=control}" />
                    </i:EventTrigger>
                  </i:Interaction.Triggers>
                </TextBox>
              </DataTemplate>
              <!--#endregion -->

              <!--#region リッチテキスト -->
              <DataTemplate DataType="{x:Type app_main_viewmodels_note:NoteRichTextContentViewModel}">
                <!--<xctk:RichTextBox x:Name="control" Text="{Binding RtfContent, UpdateSourceTrigger=PropertyChanged, Delay=2000}" >
                <i:Interaction.Triggers>
                  <i:EventTrigger EventName="Loaded">
                    <i:InvokeCommandAction Command="{Binding LoadedCommand}" CommandParameter="{Binding ElementName=control}" />
                  </i:EventTrigger>
                </i:Interaction.Triggers>
                <xctk:RichTextBox.Style>
                  <Style TargetType="xctk:RichTextBox" BasedOn="{StaticResource TextBoxBase}">
                    <Style.Triggers />
                  </Style>
                </xctk:RichTextBox.Style>
                <xctk:RichTextBox.TextFormatter>
                  <xctk:RtfFormatter />
                </xctk:RichTextBox.TextFormatter>
                <xctk:RichTextBoxFormatBarManager.FormatBar>
                  <xctk:RichTextBoxFormatBar />
                </xctk:RichTextBoxFormatBarManager.FormatBar>
              </xctk:RichTextBox>-->

                <Grid  x:Name="control">
                  <i:Interaction.Triggers>
                    <i:EventTrigger EventName="Loaded">
                      <i:InvokeCommandAction Command="{Binding LoadedCommand}" CommandParameter="{Binding ElementName=control}" />
                    </i:EventTrigger>
                  </i:Interaction.Triggers>

                  <!-- #579 により Popup は消えたがわざわざ戻すのもあれなので Grid の中の一人っ子状態 -->
                  <RichTextBox x:Name="content">
                    <RichTextBox.Style>
                      <Style TargetType="RichTextBox" BasedOn="{StaticResource ContentRichTextBox}">
                        <Style.Triggers />
                      </Style>
                    </RichTextBox.Style>
                  </RichTextBox>

                </Grid>

              </DataTemplate>
              <!--#endregion -->

            </Grid.Resources>
            <!--<ContentControl x:Name="content" Content="{Binding Content}" Visibility="{Binding Content.CanVisible, Converter={StaticResource BooleanToVisibilityConverter}}" />-->
            <!--<Grid Visibility="{Binding Content.CanVisible, Converter={StaticResource FalseToVisibilityConverter}}">
            <TextBlock>busy</TextBlock>
          </Grid>-->
            <ContentControl x:Name="content" IsTabStop="False">
              <ContentControl.Style>
                <Style TargetType="ContentControl">
                  <Style.Triggers>
                    <DataTrigger Binding="{Binding IsCompact}" Value="True">
                      <Setter Property="Content" Value="💩" />
                    </DataTrigger>
                    <DataTrigger Binding="{Binding IsCompact}" Value="False">
                      <Setter Property="Content" Value="{Binding Content}" />
                    </DataTrigger>

                    <DataTrigger Binding="{Binding IsVisibleBlind}" Value="True">
                      <Setter Property="Effect" Value="{Binding BlindEffect}" />
                    </DataTrigger>

                    <DataTrigger Binding="{Binding ShowContentKindChangeConfim}" Value="True">
                      <Setter Property="IsEnabled" Value="False" />
                    </DataTrigger>
                    <DataTrigger Binding="{Binding ShowLinkChangeConfim}" Value="True">
                      <Setter Property="IsEnabled" Value="False" />
                    </DataTrigger>
                  </Style.Triggers>
                </Style>
              </ContentControl.Style>
            </ContentControl>
            <Grid Visibility="{Binding Content.CanVisible, Converter={StaticResource FalseToVisibilityConverter}}">
              <TextBlock Text="{Binding Resources.String_Note_Busy, Source={x:Static app_main:CultureService.Instance}}" />
            </Grid>
          </Grid>

          <ContentControl Grid.Row="1" Focusable="False" IsHitTestVisible="False" IsTabStop="False">
            <ContentControl.Style>
              <Style TargetType="ContentControl">
                <Style.Triggers>
                  <DataTrigger Binding="{Binding IsVisibleBlind}" Value="True">
                    <DataTrigger.EnterActions>
                      <BeginStoryboard>
                        <Storyboard>
                          <DoubleAnimation Storyboard.TargetProperty="Opacity" From="0" To="1" Duration="0.00:00:00.250" />
                        </Storyboard>
                      </BeginStoryboard>
                    </DataTrigger.EnterActions>
                    <Setter Property="Visibility" Value="Visible" />
                    <Setter Property="Content" Value="{Binding BlindContent}" />
                  </DataTrigger>
                </Style.Triggers>
                <Setter Property="Visibility" Value="Collapsed" />
              </Style>
            </ContentControl.Style>
          </ContentControl>
        </Grid>

      </DockPanel>
    </Border>

    <Border
      HorizontalAlignment="Right"
      Background="Transparent"
    >
      <Border.Style>
        <Style TargetType="Border">
          <Style.Triggers>
            <DataTrigger Binding="{Binding CaptionPosition}" Value="Bottom">
              <Setter Property="WindowChrome.ResizeGripDirection" Value="TopRight" />
              <Setter Property="VerticalAlignment" Value="Top" />
            </DataTrigger>
          </Style.Triggers>
          <Setter Property="WindowChrome.ResizeGripDirection" Value="BottomRight" />
          <Setter Property="VerticalAlignment" Value="Bottom" />
        </Style>
      </Border.Style>
      <ContentControl Focusable="False" Content="{Binding ResizeGripImage}">
        <ContentControl.Style>
          <Style TargetType="ContentControl" BasedOn="{StaticResource {x:Type ContentControl}}">
            <Style.Triggers>
              <DataTrigger Binding="{Binding IsCompact}" Value="True">
                <Setter Property="Visibility" Value="Collapsed" />
              </DataTrigger>
              <DataTrigger Binding="{Binding IsLocked}" Value="True">
                <Setter Property="Visibility" Value="Collapsed" />
              </DataTrigger>
            </Style.Triggers>
          </Style>
        </ContentControl.Style>
      </ContentControl>
    </Border>
    <!--#endregion -->

    <!--#region 編集-->
    <!--  -->
    <Popup x:Name="popup" Placement="Left" PlacementTarget="{Binding ElementName=root}" IsOpen="{Binding IsActive, ElementName=root, Mode=OneWay}" >
      <Border Style="{StaticResource PopupMenuBorder}">
        <Grid>
          <!--#region 通常編集-->
          <StackPanel x:Name="editGroup">
            <StackPanel.Style>
              <Style TargetType="StackPanel">
                <Style.Triggers>
                  <DataTrigger Binding="{Binding ShowContentKindChangeConfim}" Value="True">
                    <Setter Property="IsEnabled" Value="False" />
                  </DataTrigger>
                  <DataTrigger Binding="{Binding ShowLinkChangeConfim}" Value="True">
                    <Setter Property="IsEnabled" Value="False" />
                  </DataTrigger>
                </Style.Triggers>
              </Style>
            </StackPanel.Style>
            <!--#region 書式-->
            <GroupBox Style="{StaticResource HeaderGroupBox}" Header="{Binding Resources.String_Note_Format_Header, Source={x:Static app_main:CultureService.Instance}}">
              <StackPanel Grid.IsSharedSizeScope="True">
                <Grid>
                  <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto" SharedSizeGroup="FromatLabel" />
                    <ColumnDefinition Width="*" />
                  </Grid.ColumnDefinitions>

                  <Label Grid.Column="0" Style="{StaticResource HeaderLabel}" Content="{Binding Resources.String_Note_Format_Kind_A, Source={x:Static app_main:CultureService.Instance}}" />
                  <StackPanel Grid.Column="1" Orientation="Horizontal" VerticalAlignment="Center" IsEnabled="{Binding IsLink, Converter={StaticResource LogicalNotConverter}}">
                    <RadioButton Style="{StaticResource Horizontal-RadioButton}" Content="{Binding Source={x:Static app_main_models_data:NoteContentKind.Plain}, Converter={StaticResource EnumToCultureConverter}, ConverterParameter=A}" IsChecked="{Binding ContentKind, Converter={StaticResource EnumToBooleanConverter}, ConverterParameter={x:Static app_main_models_data:NoteContentKind.Plain}}" />
                    <RadioButton Style="{StaticResource Horizontal-RadioButton}" Content="{Binding Source={x:Static app_main_models_data:NoteContentKind.RichText}, Converter={StaticResource EnumToCultureConverter}, ConverterParameter=A}" IsChecked="{Binding ContentKind, Converter={StaticResource EnumToBooleanConverter}, ConverterParameter={x:Static app_main_models_data:NoteContentKind.RichText}}"  />
                  </StackPanel>
                </Grid>

                <Grid>
                  <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto" SharedSizeGroup="FromatLabel" />
                    <ColumnDefinition Width="*" />
                  </Grid.ColumnDefinitions>

                  <Label Grid.Column="0" Style="{StaticResource HeaderLabel}" Content="{Binding Resources.String_Note_Format_Layout_A, Source={x:Static app_main:CultureService.Instance}}" />
                  <StackPanel Grid.Column="1" Orientation="Horizontal" VerticalAlignment="Center">
                    <RadioButton Style="{StaticResource Horizontal-RadioButton}" Content="{Binding Source={x:Static app_main_models_data:NoteLayoutKind.Absolute}, Converter={StaticResource EnumToCultureConverter}, ConverterParameter=A}" IsChecked="{Binding LayoutKind, Converter={StaticResource EnumToBooleanConverter}, ConverterParameter={x:Static app_main_models_data:NoteLayoutKind.Absolute}}" />
                    <RadioButton Style="{StaticResource Horizontal-RadioButton}" Content="{Binding Source={x:Static app_main_models_data:NoteLayoutKind.Relative}, Converter={StaticResource EnumToCultureConverter}, ConverterParameter=A}" IsChecked="{Binding LayoutKind, Converter={StaticResource EnumToBooleanConverter}, ConverterParameter={x:Static app_main_models_data:NoteLayoutKind.Relative}}"  />
                  </StackPanel>
                </Grid>

                <Grid>
                  <Grid.RowDefinitions>
                    <RowDefinition />
                    <RowDefinition />
                  </Grid.RowDefinitions>
                  <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto" SharedSizeGroup="FromatLabel" />
                    <ColumnDefinition Width="*" />
                  </Grid.ColumnDefinitions>

                  <Label Grid.Row="0" Grid.Column="0" Target="{Binding ElementName=selectForegroundColor}" Style="{StaticResource HeaderLabel}" Content="{Binding Resources.String_Note_Format_Foreground_A, Source={x:Static app_main:CultureService.Instance}}" />
                  <!--<xctk:ColorPicker Grid.Row="0" Grid.Column="1" SelectedColor="{Binding ForegroundColor}" />-->
                  <app_core_views:ColorCanvas x:Name="selectForegroundColor" Grid.Row="0" Grid.Column="1" Style="{StaticResource ColorPicker}" SelectedColor="{Binding ForegroundColor, Mode=TwoWay}" />

                  <Label Grid.Row="1" Grid.Column="0" Target="{Binding ElementName=selectBackgroundColor}" Style="{StaticResource HeaderLabel}" Content="{Binding Resources.String_Note_Format_Background_A, Source={x:Static app_main:CultureService.Instance}}" />
                  <!--<xctk:ColorPicker Grid.Row="1" Grid.Column="1" SelectedColor="{Binding BackgroundColor}" />-->
                  <app_core_views:ColorCanvas x:Name="selectBackgroundColor" Grid.Row="1" Grid.Column="1" Style="{StaticResource ColorPicker}" SelectedColor="{Binding BackgroundColor, Mode=TwoWay}" />
                </Grid>

                <ContentControl Margin="{StaticResource TopMargin}">
                  <ContentControl.Resources>
                    <!--#region テキスト -->
                    <DataTemplate DataType="{x:Type app_main_viewmodels_note:NotePlainContentViewModel}">
                      <Grid>
                        <Grid.ColumnDefinitions>
                          <ColumnDefinition Width="Auto" SharedSizeGroup="FromatLabel" />
                          <ColumnDefinition Width="*" />
                        </Grid.ColumnDefinitions>

                        <Label Grid.Column="0" Style="{StaticResource HeaderLabel}" Content="{Binding Resources.String_Note_Format_Font_A, Source={x:Static app_main:CultureService.Instance}}" />
                        <ContentControl Grid.Column="1">
                          <ContentControl.Style>
                            <Style TargetType="ContentControl">
                              <Style.Triggers>
                                <Trigger Property="IsVisible" Value="True">
                                  <Setter Property="Content">
                                    <Setter.Value>
                                      <app_main_views:FontSelectControl
                                        SelectedFontFamily="{Binding DataContext.Font.FontFamily, Source={x:Reference root}}"
                                        IsBold="{Binding DataContext.Font.IsBold, Source={x:Reference root}}"
                                        IsItalic="{Binding DataContext.Font.IsItalic, Source={x:Reference root}}"
                                        Size="{Binding DataContext.Font.Size, Source={x:Reference root}}"
                                        SizeMinimum="{Binding DataContext.Font.MinimumSize, Source={x:Reference root}}"
                                        SizeMaximum="{Binding DataContext.Font.MaximumSize, Source={x:Reference root}}"
                                      />
                                    </Setter.Value>
                                  </Setter>
                                </Trigger>
                              </Style.Triggers>
                            </Style>
                          </ContentControl.Style>
                        </ContentControl>
                      </Grid>
                    </DataTemplate>
                    <!--#endregion-->

                    <!--#region リッチテキスト -->
                    <DataTemplate DataType="{x:Type app_main_viewmodels_note:NoteRichTextContentViewModel}">
                      <Grid>
                        <Grid.Resources>
                          <Style x:Key="NoteColorPicker" TargetType="app_core_views:ColorCanvas">
                            <Setter Property="Template">
                              <Setter.Value>
                                <ControlTemplate TargetType="{x:Type app_core_views:ColorCanvas}">
                                  <Grid>
                                    <ToggleButton x:Name="commandPopup" Width="8" />
                                    <Popup IsOpen="{Binding IsChecked, ElementName=commandPopup}" Style="{StaticResource PopupMenu}">
                                      <Border Style="{StaticResource PopupMenuBorder}">
                                        <app_core_views:ColorCanvas
                                          Width="200"
                                          SelectedColor="{Binding SelectedColor, RelativeSource={RelativeSource TemplatedParent}, Mode=TwoWay}"
                                          HasAlpha="{Binding HasAlpha, RelativeSource={RelativeSource TemplatedParent}, Mode=TwoWay}"
                                        />
                                      </Border>
                                    </Popup>
                                  </Grid>
                                </ControlTemplate>
                              </Setter.Value>
                            </Setter>
                          </Style>

                          <Style TargetType="Separator" BasedOn="{StaticResource Indent}">
                            <Setter Property="Width" Value="{StaticResource HalfMarginWidth}" />
                          </Style>
                        </Grid.Resources>

                        <Grid.RowDefinitions>
                          <RowDefinition Height="Auto" />
                          <RowDefinition Height="Auto" />
                        </Grid.RowDefinitions>

                        <Grid Grid.Row="0" Width="{Binding ActualWidth, ElementName=baseSize}">
                          <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*" />
                            <ColumnDefinition Width="Auto" />

                            <ColumnDefinition Width="Auto" />

                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="Auto" />

                            <ColumnDefinition Width="Auto" />

                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="Auto" />
                          </Grid.ColumnDefinitions>

                          <ComboBox x:Name="listFont" Grid.Column="0" VerticalAlignment="Stretch" SelectedValuePath="Source" SelectedValue="{Binding SelectionFontFamily}"  ItemsSource="{Binding Source={x:Static Fonts.SystemFontFamilies}}">
                            <ComboBox.ItemsPanel>
                              <ItemsPanelTemplate>
                                <VirtualizingStackPanel
                                  VirtualizingStackPanel.IsVirtualizing="True"
                                  VirtualizingStackPanel.VirtualizationMode="Recycling"
                                  ScrollUnit="Item"
                                >
                                  <VirtualizingStackPanel.Style>
                                    <Style TargetType="VirtualizingStackPanel">
                                      <Style.Triggers>
                                        <DataTrigger Binding="{Binding ActualWidth, ElementName=listFont, Converter={StaticResource LessEqual-DoubleCompareConverter}, ConverterParameter=200}" Value="True">
                                          <Setter Property="Width"  Value="200" />
                                        </DataTrigger>
                                      </Style.Triggers>
                                    </Style>
                                  </VirtualizingStackPanel.Style>
                                </VirtualizingStackPanel>
                              </ItemsPanelTemplate>
                            </ComboBox.ItemsPanel>
                            <ComboBox.ItemTemplate>
                              <DataTemplate>
                                <TextBlock LineStackingStrategy="MaxHeight" Text="{Binding Converter={StaticResource FontFamilyToNameConverter}}" FontFamily="{Binding}" />
                                <!--<TextBlock LineStackingStrategy="MaxHeight" Text="{Binding Converter={StaticResource FontFamilyToNameConverter}}"  />-->
                              </DataTemplate>
                            </ComboBox.ItemTemplate>
                          </ComboBox>
                          <app_core_views:NumericUpDown
                            Grid.Column="1"
                            VerticalContentAlignment="Center"
                            Height="{Binding Height, ElementName=listFont}"
                            Value="{Binding SelectionFontHeight}"
                            Minimum="{Binding FontMinimumSize}"
                            Maximum="{Binding FontMaximumSize}"
                          />

                          <Separator Grid.Column="2" />

                          <RepeatButton Grid.Column="3" Command="{Binding ToggleSeletectionIncreaseFontSizeCommand}">
                            <Control Style="{StaticResource Image-Small}" Template="{StaticResource App-Image-Font-IncreaseSize}" />
                          </RepeatButton>
                          <RepeatButton Grid.Column="4" Command="{Binding ToggleSeletectionDecreaseFontSizeCommand}">
                            <Control Style="{StaticResource Image-Small}" Template="{StaticResource App-Image-Font-DecreaseSize}" />
                          </RepeatButton>

                          <Separator Grid.Column="5" />

                          <Button Grid.Column="6" Command="{Binding ToggleSeletectionSubscriptCommand}">
                            <Control Style="{StaticResource Image-Small}" Template="{StaticResource App-Image-Font-Subscript}" />
                          </Button>
                          <Button Grid.Column="7" Command="{Binding ToggleSeletectionSuperscriptCommand}">
                            <Control Style="{StaticResource Image-Small}" Template="{StaticResource App-Image-Font-Superscript}" />
                          </Button>
                        </Grid>

                        <StackPanel x:Name="baseSize" Grid.Row="1" Orientation="Horizontal">
                          <Button Command="{Binding ToggleSeletectionBoldCommand}">
                            <Control Style="{StaticResource Image-Small}" Template="{StaticResource App-Image-Font-Bold}" />
                          </Button>
                          <Button Command="{Binding ToggleSeletectionItalicCommand}">
                            <Control Style="{StaticResource Image-Small}" Template="{StaticResource App-Image-Font-Italic}" />
                          </Button>
                          <Button Command="{Binding ToggleSeletectionUnderlineCommand}">
                            <Control Style="{StaticResource Image-Small}" Template="{StaticResource App-Image-Font-Underline}" />
                          </Button>
                          <Button Command="{Binding ToggleSeletectionStrikeThroughCommand}">
                            <Control Style="{StaticResource Image-Small}" Template="{StaticResource App-Image-Font-StrikeThrough}" />
                          </Button>

                          <Separator />

                          <Button Command="{Binding ToggleNumberingCommand}">
                            <Control Style="{StaticResource Image-Small}" Template="{StaticResource App-Image-List-Numbering}" />
                          </Button>
                          <Button Command="{Binding ToggleBulletsCommand}">
                            <Control Style="{StaticResource Image-Small}" Template="{StaticResource App-Image-List-Bullets}" />
                          </Button>

                          <Separator />

                          <Button Command="{Binding ApplySeletectionForegroundColorCommand}">
                            <Grid>
                              <Border>
                                <Border.Background>
                                  <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                                    <GradientStop Offset="0" Color="Transparent" />
                                    <GradientStop Offset="0.5" Color="{Binding SelectionForegroundColor}" />
                                  </LinearGradientBrush>
                                </Border.Background>
                              </Border>
                              <Control Style="{StaticResource Image-Small}" Template="{StaticResource App-Image-ForegroundColor}" />
                            </Grid>
                          </Button>
                          <app_core_views:ColorCanvas HasAlpha="False" SelectedColor="{Binding SelectionForegroundColor}" Style="{StaticResource NoteColorPicker}" />

                          <Button Command="{Binding ApplySeletectionBackgroundColorCommand}">
                            <Grid>
                              <Border>
                                <Border.Background>
                                  <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                                    <GradientStop Offset="0" Color="Transparent" />
                                    <GradientStop Offset="0.5" Color="{Binding SelectionBackgroundColor}" />
                                  </LinearGradientBrush>
                                </Border.Background>
                              </Border>
                              <Control Style="{StaticResource Image-Small}" Template="{StaticResource App-Image-BackgroundColor}" />
                            </Grid>
                          </Button>
                          <app_core_views:ColorCanvas HasAlpha="True"  SelectedColor="{Binding SelectionBackgroundColor}" Style="{StaticResource NoteColorPicker}" />

                          <Separator />

                          <Button Command="{Binding AlignLeftCommand}">
                            <Control Style="{StaticResource Image-Small}" Template="{StaticResource App-Image-Text-Left}" />
                          </Button>
                          <Button Command="{Binding AlignCenterCommand}">
                            <Control Style="{StaticResource Image-Small}" Template="{StaticResource App-Image-Text-Center}" />
                          </Button>
                          <Button Command="{Binding AlignRightCommand}">
                            <Control Style="{StaticResource Image-Small}" Template="{StaticResource App-Image-Text-Right}" />
                          </Button>
                          <Button Command="{Binding AlignJustifyCommand}">
                            <Control Style="{StaticResource Image-Small}" Template="{StaticResource App-Image-Text-Justify}" />
                          </Button>

                        </StackPanel>
                      </Grid>

                    </DataTemplate>
                    <!--#endregion-->
                  </ContentControl.Resources>


                  <ContentControl.Style>
                    <Style TargetType="ContentControl">
                      <Style.Triggers>
                        <DataTrigger Binding="{Binding IsCompact}" Value="True">
                          <Setter Property="IsEnabled" Value="False" />
                        </DataTrigger>
                        <MultiDataTrigger>
                          <MultiDataTrigger.Conditions>
                            <Condition Binding="{Binding ContentKind}" Value="RichText" />
                            <Condition Binding="{Binding IsLocked}" Value="True" />
                          </MultiDataTrigger.Conditions>
                          <Setter Property="IsEnabled" Value="False" />
                        </MultiDataTrigger>
                      </Style.Triggers>
                      <Setter Property="Content" Value="{Binding Content}" />
                    </Style>
                  </ContentControl.Style>


                </ContentControl>

              </StackPanel>
            </GroupBox>
            <!--#endregion-->

            <!--#region 状態-->
            <GroupBox Style="{StaticResource HeaderGroupBox}" Header="{Binding Resources.String_Note_Status_Header, Source={x:Static app_main:CultureService.Instance}}">
              <StackPanel  Grid.IsSharedSizeScope="True">
                <Grid>
                  <Grid.ColumnDefinitions>
                    <ColumnDefinition />
                    <ColumnDefinition />
                    <ColumnDefinition />
                  </Grid.ColumnDefinitions>

                  <CheckBox Grid.Column="0" Style="{StaticResource Horizontal-CheckBox}" Content="{Binding Resources.String_Note_Status_Lock_A, Source={x:Static app_main:CultureService.Instance}}" IsChecked="{Binding IsLocked, Mode=OneWay}" Command="{Binding ToggleLockCommand}" />
                  <CheckBox Grid.Column="1" Style="{StaticResource Horizontal-CheckBox}" Content="{Binding Resources.String_Note_Status_Compact_A, Source={x:Static app_main:CultureService.Instance}}" IsChecked="{Binding IsCompact, Mode=OneWay}" Command="{Binding ToggleCompactCommand}" />
                  <CheckBox Grid.Column="2" Style="{StaticResource Horizontal-CheckBox}" Content="{Binding Resources.String_Note_Status_Topmost_A, Source={x:Static app_main:CultureService.Instance}}" IsChecked="{Binding IsTopmost, Mode=OneWay}" Command="{Binding ToggleTopmostCommand}" />
                </Grid>

                <CheckBox Margin="{StaticResource TopMargin}" Content="{Binding Resources.String_Note_Status_WordWrap_A, Source={x:Static app_main:CultureService.Instance}}" IsChecked="{Binding TextWrap, Mode=OneWay}" Command="{Binding ToggleTextWrapCommand}">
                  <CheckBox.Style>
                    <Style TargetType="CheckBox" BasedOn="{StaticResource Vertical-CheckBox}">
                      <Style.Triggers>
                        <DataTrigger Binding="{Binding ContentKind}" Value="RichText">
                          <Setter Property="IsEnabled" Value="False" />
                        </DataTrigger>
                      </Style.Triggers>
                    </Style>
                  </CheckBox.Style>
                </CheckBox>

                <Grid>
                  <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto" SharedSizeGroup="StatusLabel" />
                    <ColumnDefinition Width="*" />
                  </Grid.ColumnDefinitions>

                  <Label Grid.Column="0" Style="{StaticResource HeaderLabel}" Content="{Binding Resources.String_Note_Status_HiddenMode_A, Source={x:Static app_main:CultureService.Instance}}" />
                  <ComboBox x:Name="listFont" Grid.Column="1" VerticalAlignment="Center" SelectedItem="{Binding SelectedHiddenMode}" ItemsSource="{Binding HiddenModeItems}">
                    <ComboBox.ItemsPanel>
                      <ItemsPanelTemplate>
                        <VirtualizingStackPanel
                          VirtualizingStackPanel.IsVirtualizing="True"
                          VirtualizingStackPanel.VirtualizationMode="Recycling"
                          ScrollUnit="Item"
                        >
                        </VirtualizingStackPanel>
                      </ItemsPanelTemplate>
                    </ComboBox.ItemsPanel>
                    <ComboBox.ItemTemplate>
                      <DataTemplate>
                        <TextBlock Text="{Binding Converter={StaticResource EnumToCultureConverter}}" />
                      </DataTemplate>
                    </ComboBox.ItemTemplate>
                  </ComboBox>
                </Grid>

                <Grid>
                  <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto" SharedSizeGroup="StatusLabel" />
                    <ColumnDefinition Width="*" />
                  </Grid.ColumnDefinitions>

                  <Label Grid.Column="0" Style="{StaticResource HeaderLabel}" Content="{Binding Resources.String_Note_Status_CaptionPosition_A, Source={x:Static app_main:CultureService.Instance}}" />
                  <StackPanel Grid.Column="1" Orientation="Horizontal" VerticalAlignment="Center">
                    <RadioButton Style="{StaticResource Horizontal-RadioButton}" Content="{Binding Source={x:Static app_bridge_models_data:NoteCaptionPosition.Top}, Converter={StaticResource EnumToCultureConverter}, ConverterParameter=A}" IsChecked="{Binding CaptionPosition, Converter={StaticResource EnumToBooleanConverter}, ConverterParameter={x:Static app_bridge_models_data:NoteCaptionPosition.Top}}" />
                    <RadioButton Style="{StaticResource Horizontal-RadioButton}" Content="{Binding Source={x:Static app_bridge_models_data:NoteCaptionPosition.Bottom}, Converter={StaticResource EnumToCultureConverter}, ConverterParameter=A}" IsChecked="{Binding CaptionPosition, Converter={StaticResource EnumToBooleanConverter}, ConverterParameter={x:Static app_bridge_models_data:NoteCaptionPosition.Bottom}}"  />
                  </StackPanel>
                </Grid>

                <Button Margin="{StaticResource TopMargin}" Content="{Binding Resources.String_Note_Status_Link_A, Source={x:Static app_main:CultureService.Instance}}" Command="{Binding LinkChangeCommand}" />
              </StackPanel>
            </GroupBox>
            <!--#endregion-->

            <!--#region 操作-->
            <GroupBox Style="{StaticResource HeaderGroupBox}" Header="{Binding Resources.String_Note_Operation_Header, Source={x:Static app_main:CultureService.Instance}}">
              <StackPanel>
                <Grid>
                  <Grid.ColumnDefinitions>
                    <ColumnDefinition />
                    <ColumnDefinition />
                    <ColumnDefinition />
                  </Grid.ColumnDefinitions>

                  <Button Grid.Column="0" Content="{Binding Resources.String_Note_Operation_Copy_A, Source={x:Static app_main:CultureService.Instance}}" Command="{Binding Content.CopyCommand}" />
                  <Button Grid.Column="1" Content="{Binding Resources.String_Note_Operation_Close_A, Source={x:Static app_main:CultureService.Instance}}" Command="{Binding SilentCloseCommand}" />
                  <Grid Grid.Column="2">
                    <ToggleButton x:Name="switchRemoveNote" IsChecked="{Binding IsPopupRemoveNote}" Content="{Binding Resources.String_Note_Operation_Remove_Confirm_A, Source={x:Static app_main:CultureService.Instance}}" />
                    <Popup Style="{StaticResource PopupMenu}" IsOpen="{Binding IsChecked, ElementName=switchRemoveNote}">
                      <Border Style="{StaticResource PopupMenuBorder}">
                        <StackPanel>
                          <MenuItem Header="{Binding Resources.String_Note_Operation_Remove_Execute_A, Source={x:Static app_main:CultureService.Instance}}" Command="{Binding RemoveCommand}" />
                        </StackPanel>
                      </Border>
                    </Popup>
                  </Grid>
                </Grid>

              </StackPanel>
            </GroupBox>
            <!--#endregion-->
          </StackPanel>
          <!--#endregion -->

          <!--#region コンテンツ種別変更があんまりよくないっていう問い合わせ-->
          <Border d:IsHidden="True" Background="#88cccccc" Visibility="{Binding ShowContentKindChangeConfim, Converter={StaticResource BooleanToVisibilityConverter}}" Width="{Binding ActualWidth, ElementName=editGroup}">
            <Grid>
              <Grid.Resources>
                <Style x:Key="CancelBackground" TargetType="Button">
                  <Setter Property="Template">
                    <Setter.Value>
                      <ControlTemplate>
                        <Border Background="Transparent" />
                      </ControlTemplate>
                    </Setter.Value>
                  </Setter>
                </Style>
              </Grid.Resources>
              <Grid.RowDefinitions>
                <RowDefinition Height="*" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="*" />
              </Grid.RowDefinitions>

              <Border
                Grid.Row="1"
                TextElement.Foreground="{DynamicResource {x:Static SystemColors.WindowTextBrushKey}}"
                Background="{DynamicResource {x:Static SystemColors.WindowBrushKey}}"
                Padding="8"
              >
                <StackPanel>
                  <TextBlock HorizontalAlignment="Center" TextWrapping="Wrap" Text="{Binding ChangingContentKindMessage}" />
                  <Button Content="{Binding Resources.String_Note_KindChanging_Convert_A, Source={x:Static app_main:CultureService.Instance}}"  Command="{Binding ContentKindChangeConvertCommand}" />
                  <Button Content="{Binding Resources.String_Common_Cancel_A, Source={x:Static app_main:CultureService.Instance}}" Command="{Binding ContentKindChangeCancelCommand}" />
                </StackPanel>
              </Border>

              <Button Grid.Row="0" Style="{StaticResource CancelBackground}" Command="{Binding ContentKindChangeCancelCommand}" />
              <Button Grid.Row="2" Style="{StaticResource CancelBackground}" Command="{Binding ContentKindChangeCancelCommand}" />
            </Grid>
          </Border>
          <!--#endregion -->

          <!--#region リンク状態表示 -->
          <Border d:IsHidden="True"  Background="#88cccccc" Visibility="{Binding ShowLinkChangeConfim, Converter={StaticResource BooleanToVisibilityConverter}}" Width="{Binding ActualWidth, ElementName=editGroup}">
            <Grid>
              <Grid.Resources>
                <Style x:Key="CancelBackground" TargetType="Button">
                  <Setter Property="Template">
                    <Setter.Value>
                      <ControlTemplate>
                        <Border Background="Transparent" />
                      </ControlTemplate>
                    </Setter.Value>
                  </Setter>
                </Style>
              </Grid.Resources>
              <Grid.RowDefinitions>
                <RowDefinition Height="*" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="*" />
              </Grid.RowDefinitions>

              <Border
                Grid.Row="1"
                TextElement.Foreground="{DynamicResource {x:Static SystemColors.WindowTextBrushKey}}"
                Background="{DynamicResource {x:Static SystemColors.WindowBrushKey}}"
                Padding="8"
              >
                <Grid x:Name="parent">
                  <StackPanel Visibility="{Binding IsLink, Converter={StaticResource BooleanToVisibilityConverter}}">
                    <TextBlock HorizontalAlignment="Center" TextWrapping="Wrap" Text="{Binding Resources.String_Note_Link_Linking, Source={x:Static app_main:CultureService.Instance}}" />
                    <Separator />
                    <Button Content="{Binding Resources.String_Note_Link_Unlink_A, Source={x:Static app_main:CultureService.Instance}}" Command="{Binding UnlinkCommand}" />
                    <Button Content="{Binding Resources.String_Note_Link_Delete_A, Source={x:Static app_main:CultureService.Instance}}" Command="{Binding DeleteCommand}" />

                    <Grid>
                      <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="*" />
                        <ColumnDefinition Width="Auto" />
                      </Grid.ColumnDefinitions>

                      <TextBox Grid.Column="0" IsReadOnly="True" Text="{Binding LinkPath, Mode=OneWay}" />
                      <Button Grid.Column="1" Command="{Binding OpenLinkFileDirectoryCommand}">
                        <Control Style="{StaticResource Image-Small}" Template="{StaticResource App-Image-Directory}" />
                      </Button>
                    </Grid>
                  </StackPanel>
                  <StackPanel Visibility="{Binding IsLink, Converter={StaticResource FalseToVisibilityConverter}}" Width="{Binding ActualWidth, ElementName=parent}">
                    <TextBlock HorizontalAlignment="Center" Text="{Binding Resources.String_Note_Link_NotLinking, Source={x:Static app_main:CultureService.Instance}}" />
                    <Separator />
                    <Button Content="{Binding Resources.String_Note_Link_SaveLink_A, Source={x:Static app_main:CultureService.Instance}}" Command="{Binding SaveLinkCommand}" />
                    <Button Content="{Binding Resources.String_Note_Link_OpenLink_A, Source={x:Static app_main:CultureService.Instance}}" Command="{Binding OpenLinkCommand}" />
                  </StackPanel>
                </Grid>
              </Border>

              <Button Grid.Row="0" Style="{StaticResource CancelBackground}" Command="{Binding LinkChangeCancelCommand}" />
              <Button Grid.Row="2" Style="{StaticResource CancelBackground}" Command="{Binding LinkChangeCancelCommand}" />
            </Grid>
          </Border>
          <!--#endregion -->

        </Grid>
      </Border>

    </Popup>
    <!--#endregion -->

  </Grid>
</Window>
