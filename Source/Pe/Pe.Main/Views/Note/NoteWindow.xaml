<Window
  x:Name="root"
  x:Class="ContentTypeTextNet.Pe.Main.Views.Note.NoteWindow"
  xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
  xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
  xmlns:sys="clr-namespace:System;assembly=System.Runtime"

  xmlns:i="http://schemas.microsoft.com/expression/2010/interactivity"
  xmlns:prism="http://prismlibrary.com/"

  xmlns:app_core_views="clr-namespace:ContentTypeTextNet.Pe.Core.Views;assembly=Pe.Core"
  xmlns:cttn_lib_shared_lib_view_converter="clr-namespace:ContentTypeTextNet.Pe.Core.Views.Converter;assembly=Pe.Core"
  xmlns:cttn_lib_shared_lib_view_attached="clr-namespace:ContentTypeTextNet.Pe.Core.Views.Attached;assembly=Pe.Core"

  xmlns:app_core_view="clr-namespace:ContentTypeTextNet.Pe.Core.Views;assembly=Pe.Core"

  xmlns:app_main_view="clr-namespace:ContentTypeTextNet.Pe.Main.Views"
  xmlns:app_main_model_data="clr-namespace:ContentTypeTextNet.Pe.Main.Models.Data"
  xmlns:app_main_viewmodel_note="clr-namespace:ContentTypeTextNet.Pe.Main.ViewModels.Note"

  Title="NoteWindow"
  Left="{Binding WindowLeft, Mode=TwoWay, Delay=500}"
  Top="{Binding WindowTop, Mode=TwoWay, Delay=500}"
  Width="{Binding WindowWidth, Mode=TwoWay, Delay=500}"
  Height="{Binding WindowHeight, Mode=TwoWay, Delay=500}"
  AllowsTransparency="True"
  WindowStyle="None"
  Topmost="{Binding IsTopmost}"
  MinHeight="{Binding MinHeight}"
  AllowDrop="True"

  xmlns:d="http://schemas.microsoft.com/expression/blend/2008" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
  mc:Ignorable="d"
  d:DesignWidth="100"
  d:DesignHeight="100"
>
  <Window.Resources>
    <ResourceDictionary>
      <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="pack://application:,,,/Pe.Core;component/Views/ColorPickerDictionary.xaml" />
      </ResourceDictionary.MergedDictionaries>

      <sys:Double x:Key="DisableOpacity">0.4</sys:Double>
      <BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter" />
      <cttn_lib_shared_lib_view_converter:BooleanToVisibilityConverter
        x:Key="FalseToVisibilityConverter"
        True="Collapsed"
        False="Visible"
      />
      <cttn_lib_shared_lib_view_converter:EnumToBooleanConverter x:Key="EnumToBooleanConverter" />
      <cttn_lib_shared_lib_view_converter:LogicalNotConverter x:Key="LogicalNotConverter" />

      <WindowChrome x:Key="NormalWindowChrome"
        ResizeBorderThickness="{Binding BorderThickness}"
        CaptionHeight="{Binding CaptionHeight}"
      />
      <WindowChrome x:Key="CompactWindowChrome"
        ResizeBorderThickness="0"
        CaptionHeight="{Binding MinHeight}"
      />
      <WindowChrome x:Key="LockWindowChrome"
        ResizeBorderThickness="0"
        CaptionHeight="0"
      />

    </ResourceDictionary>
  </Window.Resources>
  <i:Interaction.Triggers>
    <i:EventTrigger EventName="Deactivated">
      <i:InvokeCommandAction Command="{Binding SaveTitleEditCommand}" CommandParameter="{Binding ElementName=inputTitle}" />
    </i:EventTrigger>
    <app_core_view:RequestTrigger SourceObject="{Binding TitleEditStartRequest}">
      <prism:InvokeCommandAction Command="{Binding TitleEditStartCommand ,ElementName=root}" />
    </app_core_view:RequestTrigger>
    <app_core_view:RequestTrigger SourceObject="{Binding SelectLinkFileRequest}">
      <prism:InvokeCommandAction Command="{Binding SelectLinkFileCommand ,ElementName=root}" />
    </app_core_view:RequestTrigger>
    <app_core_view:RequestTrigger SourceObject="{Binding UnlinkRequest}">
      <prism:InvokeCommandAction Command="{Binding UnlinkCommand ,ElementName=root}" />
    </app_core_view:RequestTrigger>
    <app_core_view:RequestTrigger SourceObject="{Binding LinkChangeRequest}">
      <prism:InvokeCommandAction Command="{Binding LinkChangeCommand ,ElementName=root}" />
    </app_core_view:RequestTrigger>
    <app_core_view:RequestTrigger SourceObject="{Binding CloseRequest}">
      <prism:InvokeCommandAction Command="{Binding CloseCommand ,ElementName=root}" />
    </app_core_view:RequestTrigger>
  </i:Interaction.Triggers>
  <i:Interaction.Behaviors>
    <cttn_lib_shared_lib_view_attached:DragAndDropBehavior DragAndDrop="{Binding DragAndDrop}" />
  </i:Interaction.Behaviors>
  <Window.Style>
    <Style TargetType="Window" BasedOn="{StaticResource {x:Type Window}}">
      <Style.Triggers>
        <MultiDataTrigger>
          <MultiDataTrigger.Conditions>
            <Condition Binding="{Binding IsCompact}" Value="True" />
            <Condition Binding="{Binding IsLocked}" Value="False" />
          </MultiDataTrigger.Conditions>
          <Setter Property="WindowChrome.WindowChrome" Value="{StaticResource CompactWindowChrome}" />
        </MultiDataTrigger>
        <DataTrigger Binding="{Binding IsLocked}" Value="True">
          <Setter Property="WindowChrome.WindowChrome" Value="{StaticResource LockWindowChrome}" />
        </DataTrigger>
      </Style.Triggers>
      <Setter Property="WindowChrome.WindowChrome" Value="{StaticResource NormalWindowChrome}" />
    </Style>
  </Window.Style>
  <Window.Visibility>
    <Binding Path="IsVisible" Converter="{StaticResource BooleanToVisibilityConverter}"/>
  </Window.Visibility>
  <Window.CommandBindings>
    <CommandBinding Command="{x:Static SystemCommands.CloseWindowCommand}" CanExecute="CloseWindowCommand_CanExecute" Executed="CloseWindowCommand_Executed" />
  </Window.CommandBindings>
  <Grid>
    <!--#region 内容-->
    <Border BorderBrush="{Binding BorderBrush}" BorderThickness="{Binding BorderThickness}">
      <Grid>
        <Grid.RowDefinitions>
          <RowDefinition Height="{Binding CaptionHeight}" />
          <RowDefinition Height="*" />
        </Grid.RowDefinitions>

        <Grid Grid.Row="0" Background="{Binding CaptionBackground}">
          <Grid.Resources>
            <Style x:Key="CaptionButton" TargetType="ButtonBase">
              <Setter Property="WindowChrome.IsHitTestVisibleInChrome" Value="True" />
              <Setter Property="Visibility" Value="{Binding IsLocked, Converter={StaticResource FalseToVisibilityConverter}}" />
              <Setter Property="Template">
                <Setter.Value>
                  <ControlTemplate TargetType="Button">
                    <Border x:Name="parent" Background="{Binding CaptionBackgroundNoneBrush}">
                      <ContentPresenter x:Name="content" />
                    </Border>
                    <ControlTemplate.Triggers>
                      <Trigger Property="IsMouseOver" Value="True">
                        <Setter TargetName="parent" Property="Background" Value="{Binding CaptionBackgroundOverBrush}" />
                      </Trigger>
                      <Trigger Property="IsPressed" Value="True">
                        <Setter TargetName="parent" Property="Background" Value="{Binding CaptionBackgroundPressedBrush}" />
                      </Trigger>
                    </ControlTemplate.Triggers>
                  </ControlTemplate>
                </Setter.Value>
              </Setter>
            </Style>
          </Grid.Resources>

          <Grid.ColumnDefinitions>
            <ColumnDefinition Width="*" />
            <ColumnDefinition Width="Auto"/>
            <ColumnDefinition Width="Auto"/>
            <ColumnDefinition Width="Auto"/>
          </Grid.ColumnDefinitions>

          <TextBox x:Name="inputTitle" Grid.Column="0" Background="Transparent" BorderThickness="0" VerticalContentAlignment="Center" Foreground="{Binding CaptionForeground}" >
            <i:Interaction.Triggers>
              <i:EventTrigger EventName="LostFocus">
                <i:InvokeCommandAction Command="{Binding SaveTitleEditCommand}" CommandParameter="{Binding ElementName=inputTitle}" />
              </i:EventTrigger>
            </i:Interaction.Triggers>
            <TextBox.Style>
              <Style TargetType="TextBox" BasedOn="{StaticResource {x:Type TextBox}}">
                <Style.Triggers>
                  <DataTrigger Binding="{Binding TitleEditMode}" Value="True">
                    <Setter Property="WindowChrome.IsHitTestVisibleInChrome" Value="True" />
                    <Setter Property="IsReadOnly" Value="False" />
                    <Setter Property="UndoLimit" Value="-1" />
                    <Setter Property="Focusable" Value="True" />
                    <Setter Property="Text" Value="{Binding EditingTitle, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" />
                    <Setter Property="CaretBrush" Value="{Binding Foreground, RelativeSource={RelativeSource Mode=Self}}" />
                    <Setter Property="Cursor" Value="IBeam" />
                  </DataTrigger>
                  <DataTrigger Binding="{Binding IsLocked}" Value="True">
                    <Setter Property="Cursor" Value="Arrow" />
                  </DataTrigger>
                </Style.Triggers>
                <Setter Property="IsReadOnly" Value="True" />
                <Setter Property="UndoLimit" Value="0" />
                <Setter Property="Focusable" Value="False" />
                <Setter Property="Text" Value="{Binding Title, Mode=OneWay}" />
                <Setter Property="IsReadOnlyCaretVisible" Value="False" />
                <Setter Property="CaretBrush" Value="Transparent" />
                <Setter Property="IsInactiveSelectionHighlightEnabled" Value="False" />
              </Style>
            </TextBox.Style>
            <TextBox.InputBindings>
              <KeyBinding Key="Esc" Command="{Binding CancelTitleEditCommand}" CommandParameter="{Binding ElementName=inputTitle}" />
              <KeyBinding Key="Return" Command="{Binding SaveTitleEditCommand}" CommandParameter="{Binding ElementName=inputTitle}" />
            </TextBox.InputBindings>
          </TextBox>

          <Button Grid.Column="1" Command="{Binding SwitchCompactCommand}">
            <Button.Style>
              <Style TargetType="Button" BasedOn="{StaticResource CaptionButton}">
                <Style.Triggers>
                  <DataTrigger Binding="{Binding IsCompact}" Value="True">
                    <Setter Property="Content" Value="{Binding CaptionCompactEnabledImage}" />
                  </DataTrigger>
                </Style.Triggers>
                <Setter Property="Content" Value="{Binding CaptionCompactDisabledImage}" />
              </Style>
            </Button.Style>
          </Button>
          <Button Grid.Column="2" Command="{Binding SwitchTopmostCommand}">
            <Button.Style>
              <Style TargetType="Button" BasedOn="{StaticResource CaptionButton}">
                <Style.Triggers>
                  <DataTrigger Binding="{Binding IsTopmost}" Value="True">
                    <Setter Property="Content" Value="{Binding CaptionTopmostEnabledImage}" />
                  </DataTrigger>
                </Style.Triggers>
                <Setter Property="Content" Value="{Binding CaptionTopmostDisabledImage}" />
              </Style>
            </Button.Style>
          </Button>
          <Button Grid.Column="3" Style="{StaticResource CaptionButton}" Content="{Binding CaptionCloseImage}" Command="{x:Static SystemCommands.CloseWindowCommand}" CommandParameter="{Binding ElementName=root}" />
        </Grid>

        <Grid Grid.Row="1" Background="{Binding ContentBackground}">
          <Grid.Resources>
            <Style x:Key="TextBoxBase" TargetType="TextBoxBase">
              <Setter Property="Background" Value="Transparent" />
              <Setter Property="BorderThickness" Value="0" />
              <Setter Property="AcceptsReturn" Value="True" />
              <Setter Property="IsReadOnly" Value="{Binding DataContext.IsLocked, ElementName=root}" />
              <Setter Property="FontFamily" Value="{Binding DataContext.Font.FontFamily, ElementName=root}" />
              <Setter Property="FontSize" Value="{Binding DataContext.Font.FontSize, ElementName=root}" />
              <Setter Property="FontStyle" Value="{Binding DataContext.Font.FontStyle, ElementName=root}" />
              <Setter Property="FontWeight" Value="{Binding DataContext.Font.FontWeight, ElementName=root}" />
              <Setter Property="Foreground" Value="{Binding DataContext.ContentForeground, ElementName=root}" />
            </Style>
            <Style x:Key="ContentTextBox" TargetType="TextBox" BasedOn="{StaticResource TextBoxBase}">
              <Style.Triggers>
                <DataTrigger Binding="{Binding DataContext.TextWrap, ElementName=root}" Value="True">
                  <Setter Property="TextWrapping" Value="Wrap" />
                </DataTrigger>
              </Style.Triggers>
              <!--<Setter Property="Background" Value="Transparent" />
              <Setter Property="BorderThickness" Value="0" />
              <Setter Property="AcceptsReturn" Value="True" />
              <Setter Property="IsReadOnly" Value="{Binding DataContext.IsLocked, ElementName=root}" />
              <Setter Property="FontFamily" Value="{Binding DataContext.Font.FontFamily, ElementName=root}" />
              <Setter Property="FontSize" Value="{Binding DataContext.Font.FontSize, ElementName=root}" />
              <Setter Property="FontStyle" Value="{Binding DataContext.Font.FontStyle, ElementName=root}" />
              <Setter Property="FontWeight" Value="{Binding DataContext.Font.FontWeight, ElementName=root}" />
              <Setter Property="Foreground" Value="{Binding DataContext.ContentForeground, ElementName=root}" />-->
            </Style>

            <!--#region テキスト -->
            <DataTemplate DataType="{x:Type app_main_viewmodel_note:NotePlainContentViewModel}">
              <TextBox x:Name="control" Style="{StaticResource ContentTextBox}" Text="{Binding Content, UpdateSourceTrigger=PropertyChanged, Delay=1000}">
                <i:Interaction.Triggers>
                  <i:EventTrigger EventName="Loaded">
                    <i:InvokeCommandAction Command="{Binding LoadedCommand}" CommandParameter="{Binding ElementName=control}" />
                  </i:EventTrigger>
                </i:Interaction.Triggers>
              </TextBox>
            </DataTemplate>
            <!--#endregion -->

            <!--#region リッチテキスト -->
            <DataTemplate DataType="{x:Type app_main_viewmodel_note:NoteRichTextContentViewModel}">
              <!--<xctk:RichTextBox x:Name="control" Text="{Binding RtfContent, UpdateSourceTrigger=PropertyChanged, Delay=2000}" >
                <i:Interaction.Triggers>
                  <i:EventTrigger EventName="Loaded">
                    <i:InvokeCommandAction Command="{Binding LoadedCommand}" CommandParameter="{Binding ElementName=control}" />
                  </i:EventTrigger>
                </i:Interaction.Triggers>
                <xctk:RichTextBox.Style>
                  <Style TargetType="xctk:RichTextBox" BasedOn="{StaticResource TextBoxBase}">
                    <Style.Triggers />
                  </Style>
                </xctk:RichTextBox.Style>
                <xctk:RichTextBox.TextFormatter>
                  <xctk:RtfFormatter />
                </xctk:RichTextBox.TextFormatter>
                <xctk:RichTextBoxFormatBarManager.FormatBar>
                  <xctk:RichTextBoxFormatBar />
                </xctk:RichTextBoxFormatBarManager.FormatBar>
              </xctk:RichTextBox>-->
              <RichTextBox x:Name="control" >
                <i:Interaction.Triggers>
                  <i:EventTrigger EventName="Loaded">
                    <i:InvokeCommandAction Command="{Binding LoadedCommand}" CommandParameter="{Binding ElementName=control}" />
                  </i:EventTrigger>
                </i:Interaction.Triggers>
                <RichTextBox.Style>
                  <Style TargetType="RichTextBox" BasedOn="{StaticResource TextBoxBase}">
                    <Style.Triggers />
                  </Style>
                </RichTextBox.Style>
              </RichTextBox>
            </DataTemplate>
            <!--#endregion -->

          </Grid.Resources>
          <!--<ContentControl x:Name="content" Content="{Binding Content}" Visibility="{Binding Content.CanVisible, Converter={StaticResource BooleanToVisibilityConverter}}" />-->
          <!--<Grid Visibility="{Binding Content.CanVisible, Converter={StaticResource FalseToVisibilityConverter}}">
            <TextBlock>busy</TextBlock>
          </Grid>-->
          <ContentControl x:Name="content">
            <ContentControl.Style>
              <Style TargetType="ContentControl">
                <Style.Triggers>
                  <DataTrigger Binding="{Binding IsCompact}" Value="True">
                    <Setter Property="Content" Value="💩" />
                  </DataTrigger>
                  <DataTrigger Binding="{Binding IsCompact}" Value="False">
                    <Setter Property="Content" Value="{Binding Content}" />
                  </DataTrigger>
                  <DataTrigger Binding="{Binding ShowContentKindChangeConfim}" Value="True">
                    <Setter Property="IsEnabled" Value="False" />
                  </DataTrigger>
                  <DataTrigger Binding="{Binding ShowLinkChangeConfim}" Value="True">
                    <Setter Property="IsEnabled" Value="False" />
                  </DataTrigger>
                </Style.Triggers>
              </Style>
            </ContentControl.Style>
          </ContentControl>
          <Grid Visibility="{Binding Content.CanVisible, Converter={StaticResource FalseToVisibilityConverter}}">
            <TextBlock>busy</TextBlock>
          </Grid>
        </Grid>
      </Grid>
    </Border>
    <Border
      VerticalAlignment="Bottom"
      HorizontalAlignment="Right"
      WindowChrome.ResizeGripDirection="BottomRight"
      Background="Transparent"
    >
      <ContentControl Content="{Binding ResizeGripImage}">
        <ContentControl.Style>
          <Style TargetType="ContentControl" BasedOn="{StaticResource {x:Type ContentControl}}">
            <Style.Triggers>
              <DataTrigger Binding="{Binding IsCompact}" Value="True">
                <Setter Property="Visibility" Value="Collapsed" />
              </DataTrigger>
              <DataTrigger Binding="{Binding IsLocked}" Value="True">
                <Setter Property="Visibility" Value="Collapsed" />
              </DataTrigger>
            </Style.Triggers>
          </Style>
        </ContentControl.Style>
      </ContentControl>
    </Border>
    <!--#endregion -->

    <!--#region 編集-->
    <!--  -->
    <Popup x:Name="popup" Placement="Left" PlacementTarget="{Binding ElementName=root}" IsOpen="{Binding IsActive, ElementName=root, Mode=OneWay}" >
      <Border Style="{StaticResource PopupMenuBorder}">
        <Grid>
          <!--#region 通常編集-->
          <StackPanel>
            <StackPanel.Style>
              <Style TargetType="StackPanel">
                <Style.Triggers>
                  <DataTrigger Binding="{Binding ShowContentKindChangeConfim}" Value="True">
                    <Setter Property="IsEnabled" Value="False" />
                  </DataTrigger>
                  <DataTrigger Binding="{Binding ShowLinkChangeConfim}" Value="True">
                    <Setter Property="IsEnabled" Value="False" />
                  </DataTrigger>
                </Style.Triggers>
              </Style>
            </StackPanel.Style>
            <GroupBox Style="{StaticResource HeaderGroupBox}" Header="format">
              <StackPanel Grid.IsSharedSizeScope="True">
                <Grid>
                  <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto" SharedSizeGroup="FromatLabel" />
                    <ColumnDefinition Width="*" />
                  </Grid.ColumnDefinitions>

                  <Label Grid.Column="0">kind</Label>
                  <StackPanel Grid.Column="1" Orientation="Horizontal" IsEnabled="{Binding IsLink, Converter={StaticResource LogicalNotConverter}}">
                    <RadioButton Content="plain" IsChecked="{Binding ContentKind, Converter={StaticResource EnumToBooleanConverter}, ConverterParameter={x:Static app_main_model_data:NoteContentKind.Plain}}" />
                    <RadioButton Content="rtf"   IsChecked="{Binding ContentKind, Converter={StaticResource EnumToBooleanConverter}, ConverterParameter={x:Static app_main_model_data:NoteContentKind.RichText}}"  />
                  </StackPanel>
                </Grid>

                <Grid>
                  <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto" SharedSizeGroup="FromatLabel" />
                    <ColumnDefinition Width="*" />
                  </Grid.ColumnDefinitions>

                  <Label Grid.Column="0">layout</Label>
                  <StackPanel Grid.Column="1" Orientation="Horizontal" IsEnabled="{Binding IsLink, Converter={StaticResource LogicalNotConverter}}">
                    <RadioButton Content="abs" IsChecked="{Binding LayoutKind, Converter={StaticResource EnumToBooleanConverter}, ConverterParameter={x:Static app_main_model_data:NoteLayoutKind.Absolute}}" />
                    <RadioButton Content="rel" IsChecked="{Binding LayoutKind, Converter={StaticResource EnumToBooleanConverter}, ConverterParameter={x:Static app_main_model_data:NoteLayoutKind.Relative}}"  />
                  </StackPanel>
                </Grid>

                <Grid>
                  <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto" SharedSizeGroup="FromatLabel" />
                    <ColumnDefinition Width="*" />
                  </Grid.ColumnDefinitions>

                  <Label Grid.Column="0">link</Label>
                  <StackPanel Grid.Column="1" Orientation="Horizontal">
                    <Button Command="{Binding LinkChangeCommand}">state</Button>
                  </StackPanel>
                </Grid>

                <Grid>
                  <Grid.Resources>
                    <!--<Style TargetType="xctk:ColorPicker" BasedOn="{StaticResource {x:Type xctk:ColorPicker}}">
                      <Setter Property="Focusable" Value="False" />
                      <Setter Property="UsingAlphaChannel" Value="False" />
                      <Setter Property="ColorMode" Value="ColorCanvas" />
                      <Setter Property="DisplayColorAndName" Value="False" />
                      <Setter Property="ShowTabHeaders" Value="True" />
                      <Setter Property="ShowAvailableColors" Value="True" />
                      <Setter Property="AvailableColorsSortingMode" Value="HueSaturationBrightness" />
                      <Setter Property="ShowDropDownButton" Value="True" />
                      <Setter Property="ShowStandardColors" Value="False" />
                      <Setter Property="StandardButtonHeader" Value="pallet" />
                      <Setter Property="AdvancedButtonHeader" Value="custom" />
                      <Setter Property="AvailableColorsHeader" Value="colors" />
                      <Setter Property="DisplayColorTooltip" Value="False" />
                    </Style>-->
                  </Grid.Resources>
                  <Grid.RowDefinitions>
                    <RowDefinition />
                    <RowDefinition />
                  </Grid.RowDefinitions>
                  <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto" SharedSizeGroup="FromatLabel" />
                    <ColumnDefinition Width="*" />
                  </Grid.ColumnDefinitions>

                  <Label Grid.Row="0" Grid.Column="0">foreground</Label>
                  <!--<xctk:ColorPicker Grid.Row="0" Grid.Column="1" SelectedColor="{Binding ForegroundColor}" />-->
                  <app_core_views:ColorCanvas Grid.Row="0" Grid.Column="1" Style="{StaticResource ColorPicker}" SelectedColor="{Binding ForegroundColor, Mode=TwoWay}" />

                  <Label Grid.Row="1" Grid.Column="0">background</Label>
                  <!--<xctk:ColorPicker Grid.Row="1" Grid.Column="1" SelectedColor="{Binding BackgroundColor}" />-->
                  <app_core_views:ColorCanvas Grid.Row="1" Grid.Column="1" Style="{StaticResource ColorPicker}" SelectedColor="{Binding BackgroundColor, Mode=TwoWay}" />
                </Grid>

                <Grid>
                  <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto" SharedSizeGroup="FromatLabel" />
                    <ColumnDefinition Width="*" />
                  </Grid.ColumnDefinitions>

                  <Label Grid.Column="0">font</Label>
                  <app_main_view:FontSelectControl
                    Grid.Column="1"
                    SelectedFontFamily="{Binding Font.FontFamily}"
                    IsBold="{Binding Font.IsBold}"
                    IsItalic="{Binding Font.IsItalic}"
                    Size="{Binding Font.Size}"
                    SizeMinimum="{Binding Font.MinimumSize}"
                    SizeMaximum="{Binding Font.MaximumSize}"
                  >
                    <app_main_view:FontSelectControl.BoldContent>
                      <ContentControl Content="{Binding BoldIcon}" Template="{StaticResource SmallIcon}" Background="{DynamicResource {x:Static SystemColors.MenuTextBrushKey}}" Foreground="Transparent" />
                    </app_main_view:FontSelectControl.BoldContent>
                    <app_main_view:FontSelectControl.ItalicContent>
                      <ContentControl Content="{Binding ItalicIcon}" Template="{StaticResource SmallIcon}" Background="{DynamicResource {x:Static SystemColors.MenuTextBrushKey}}" Foreground="Transparent" />
                    </app_main_view:FontSelectControl.ItalicContent>
                    <app_main_view:FontSelectControl.Style>
                      <Style TargetType="app_main_view:FontSelectControl">
                        <Style.Triggers>
                          <DataTrigger Binding="{Binding ContentKind}" Value="RichText">
                            <Setter Property="IsEnabled" Value="False" />
                            <Setter Property="Opacity" Value="{StaticResource DisableOpacity}" />
                          </DataTrigger>
                        </Style.Triggers>
                      </Style>
                    </app_main_view:FontSelectControl.Style>
                  </app_main_view:FontSelectControl>
                </Grid>

              </StackPanel>
            </GroupBox>

            <GroupBox Style="{StaticResource HeaderGroupBox}" Header="status">
              <StackPanel>
                <Grid>
                  <Grid.ColumnDefinitions>
                    <ColumnDefinition />
                    <ColumnDefinition />
                    <ColumnDefinition />
                  </Grid.ColumnDefinitions>

                  <CheckBox Grid.Column="0" Content="lock" IsChecked="{Binding IsLocked, Mode=OneWay}" Command="{Binding SwitchLockCommand}" />
                  <CheckBox Grid.Column="1" Content="small" IsChecked="{Binding IsCompact, Mode=OneWay}" Command="{Binding SwitchCompactCommand}" />
                  <CheckBox Grid.Column="2" Content="topmost" IsChecked="{Binding IsTopmost, Mode=OneWay}" Command="{Binding SwitchTopmostCommand}" />
                </Grid>
                <CheckBox Content="text wrap" IsChecked="{Binding TextWrap, Mode=OneWay}" Command="{Binding SwitchTextWrapCommand}">
                  <CheckBox.Style>
                    <Style TargetType="CheckBox" BasedOn="{StaticResource {x:Type CheckBox}}">
                      <Style.Triggers>
                        <DataTrigger Binding="{Binding ContentKind}" Value="RichText">
                          <Setter Property="IsEnabled" Value="False" />
                        </DataTrigger>
                      </Style.Triggers>
                    </Style>
                  </CheckBox.Style>
                </CheckBox>
              </StackPanel>
            </GroupBox>

            <GroupBox Style="{StaticResource HeaderGroupBox}" Header="operation">
              <StackPanel>
                <Grid>
                  <Grid.ColumnDefinitions>
                    <ColumnDefinition />
                    <ColumnDefinition />
                    <ColumnDefinition />
                  </Grid.ColumnDefinitions>

                  <Button Grid.Column="0" Content="copy" Command="{Binding Content.CopyCommand}" />
                  <Button Grid.Column="1" Content="close" Command="{x:Static SystemCommands.CloseWindowCommand}" />
                  <Grid Grid.Column="2">
                    <!--
                    <Grid.ColumnDefinitions>
                      <ColumnDefinition />
                      <ColumnDefinition />
                    </Grid.ColumnDefinitions>

                    <ToggleButton x:Name="removeLocker" Grid.Column="0" Content="鍵">
                      <ToggleButton.Style>
                        <Style TargetType="ToggleButton">
                          <Style.Triggers>
                            <DataTrigger Binding="{Binding IsActive, ElementName=root}" Value="False">
                              <Setter Property="IsChecked" Value="False" />
                            </DataTrigger>
                            <Trigger Property="IsChecked" Value="True">
                              --><!-- 一定時間経過で非活性 --><!--
                              <Trigger.EnterActions>
                                <BeginStoryboard>
                                  <BeginStoryboard.Storyboard>
                                    <Storyboard>
                                      <BooleanAnimationUsingKeyFrames Storyboard.TargetProperty="IsChecked">
                                        <DiscreteBooleanKeyFrame KeyTime="00:00:10" Value="False" />
                                      </BooleanAnimationUsingKeyFrames>
                                    </Storyboard>
                                  </BeginStoryboard.Storyboard>
                                </BeginStoryboard>
                              </Trigger.EnterActions>
                            </Trigger>
                          </Style.Triggers>
                        </Style>
                      </ToggleButton.Style>
                    </ToggleButton>
                    <Button Grid.Column="1" IsEnabled="{Binding IsChecked, ElementName=removeLocker}" Command="{Binding RemoveCommand}" Content="remove" />
                    -->
                    <app_core_view:LockButton>
                      <app_core_view:LockButton.LockContent>
                        <Button Grid.Column="1" Command="{Binding RemoveCommand}" Content="remove" />
                      </app_core_view:LockButton.LockContent>
                    </app_core_view:LockButton>
                  </Grid>
                </Grid>

              </StackPanel>
            </GroupBox>
          </StackPanel>
          <!--#endregion -->

          <!--#region コンテンツ種別変更があんまりよくないっていう問い合わせ-->
          <Border d:IsHidden="True"  Background="#88cccccc" Visibility="{Binding ShowContentKindChangeConfim, Converter={StaticResource BooleanToVisibilityConverter}}">
            <Grid>
              <Grid.Resources>
                <Style x:Key="CancelBackground" TargetType="Button">
                  <Setter Property="Template">
                    <Setter.Value>
                      <ControlTemplate>
                        <Border Background="Transparent" />
                      </ControlTemplate>
                    </Setter.Value>
                  </Setter>
                </Style>
              </Grid.Resources>
              <Grid.RowDefinitions>
                <RowDefinition Height="*" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="*" />
              </Grid.RowDefinitions>

              <Border
                Grid.Row="1"
                TextElement.Foreground="{DynamicResource {x:Static SystemColors.WindowTextBrushKey}}"
                Background="{DynamicResource {x:Static SystemColors.WindowBrushKey}}"
                Padding="8"
              >
                <StackPanel>
                  <TextBlock Text="change" />
                  <TextBlock>
                  <Run Text="{Binding ContentKind, Mode=OneWay}" />
                  <Run Text=" to " />
                  <Run Text="{Binding ChangingContentKind, Mode=OneWay}" />
                  </TextBlock>
                  <Button Command="{Binding ContentKindChangeConvertCommand}">convert</Button>
                  <Button Command="{Binding ContentKindChangeCancelCommand}">cancel</Button>
                </StackPanel>
              </Border>

              <Button Grid.Row="0" Style="{StaticResource CancelBackground}" Command="{Binding ContentKindChangeCancelCommand}" />
              <Button Grid.Row="2" Style="{StaticResource CancelBackground}" Command="{Binding ContentKindChangeCancelCommand}" />
            </Grid>
          </Border>
          <!--#endregion -->

          <!--#region コンテンツ種別変更があんまりよくないっていう問い合わせ-->
          <Border d:IsHidden="True"  Background="#88cccccc" Visibility="{Binding ShowLinkChangeConfim, Converter={StaticResource BooleanToVisibilityConverter}}">
            <Grid>
              <Grid.Resources>
                <Style x:Key="CancelBackground" TargetType="Button">
                  <Setter Property="Template">
                    <Setter.Value>
                      <ControlTemplate>
                        <Border Background="Transparent" />
                      </ControlTemplate>
                    </Setter.Value>
                  </Setter>
                </Style>
              </Grid.Resources>
              <Grid.RowDefinitions>
                <RowDefinition Height="*" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="*" />
              </Grid.RowDefinitions>

              <Border
                Grid.Row="1"
                TextElement.Foreground="{DynamicResource {x:Static SystemColors.WindowTextBrushKey}}"
                Background="{DynamicResource {x:Static SystemColors.WindowBrushKey}}"
                Padding="8"
              >
                <Grid x:Name="parent">
                  <StackPanel Visibility="{Binding IsLink, Converter={StaticResource BooleanToVisibilityConverter}}">
                    <Button Command="{Binding UnlinkCommand}">unlink</Button>
                    <Button Command="{Binding DeleteCommand}">delete</Button>

                    <TextBox IsReadOnly="True" Width="{Binding ActualWidth, ElementName=parent}" Text="{Binding LinkPath, Mode=OneWay}" />
                  </StackPanel>
                  <StackPanel Visibility="{Binding IsLink, Converter={StaticResource FalseToVisibilityConverter}}">
                    <Button Command="{Binding SaveLinkCommand}">link(save)</Button>
                    <Button Command="{Binding OpenLinkCommand}">link(open)</Button>
                  </StackPanel>
                </Grid>
              </Border>

              <Button Grid.Row="0" Style="{StaticResource CancelBackground}" Command="{Binding LinkChangeCancelCommand}" />
              <Button Grid.Row="2" Style="{StaticResource CancelBackground}" Command="{Binding LinkChangeCancelCommand}" />
            </Grid>
          </Border>
          <!--#endregion -->

        </Grid>
      </Border>

    </Popup>
    <!--#endregion -->

  </Grid>
</Window>
