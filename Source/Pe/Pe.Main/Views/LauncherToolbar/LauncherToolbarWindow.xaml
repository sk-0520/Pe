<Window
  x:Name="root"
  x:Class="ContentTypeTextNet.Pe.Main.Views.LauncherToolbar.LauncherToolbarWindow"
  xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
  xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"

  xmlns:i="http://schemas.microsoft.com/expression/2010/interactivity"
  xmlns:prism="http://prismlibrary.com/"

  xmlns:app_core_views="clr-namespace:ContentTypeTextNet.Pe.Core.Views;assembly=Pe.Core"
  xmlns:app_core_views_converter="clr-namespace:ContentTypeTextNet.Pe.Core.Views.Converter;assembly=Pe.Core"
  xmlns:app_core_views_attached="clr-namespace:ContentTypeTextNet.Pe.Core.Views.Attached;assembly=Pe.Core"

  xmlns:app_main_view="clr-namespace:ContentTypeTextNet.Pe.Main.Views"
  xmlns:app_main_view_lt="clr-namespace:ContentTypeTextNet.Pe.Main.Views.LauncherToolbar"
  xmlns:app_main_viewmode_item="clr-namespace:ContentTypeTextNet.Pe.Main.ViewModels.LauncherItem"
  xmlns:app_main_view_ex="clr-namespace:ContentTypeTextNet.Pe.Bridge.Models.Data;assembly=Pe.Bridge"

  Title="LauncherToolbarWindow"
  Height="450"
  Width="800"

  WindowStyle="None"
  WindowStartupLocation="Manual"
  BorderThickness="0"
  ResizeMode="NoResize"
  ShowInTaskbar="False"
  AllowDrop="True"
  AllowsTransparency="True"

  Topmost="{Binding IsTopmost}"

  Background="{Binding ToolbarBackground}"

  xmlns:d="http://schemas.microsoft.com/expression/blend/2008" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
  mc:Ignorable="d"
>
  <Window.Resources>
    <BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter" />

    <app_core_views_converter:LogicalNotConverter x:Key="LogicalNotConverter" />
    <app_core_views_converter:IconBoxToWidthConverter x:Key="IconScaleToWidthConverter" />
    <app_core_views_converter:IconBoxToHeightConverter x:Key="IconScaleToHeightConverter" />
    <app_core_views_converter:LogicalMultiEqualConverter x:Key="LogicalMultiEqualConverter" />


    <Style x:Key="DropMenu" TargetType="Popup" BasedOn="{StaticResource PopupMenu}">
      <Style.Triggers>
        <DataTrigger Binding="{Binding DataContext.ToolbarPosition, ElementName=root}" Value="Left">
          <Setter Property="Placement" Value="Right" />
        </DataTrigger>
        <DataTrigger Binding="{Binding DataContext.ToolbarPosition, ElementName=root}" Value="Right">
          <Setter Property="Placement" Value="Left" />
        </DataTrigger>
        <DataTrigger Binding="{Binding DataContext.ToolbarPosition, ElementName=root}" Value="Top">
          <Setter Property="Placement" Value="Bottom" />
        </DataTrigger>
        <DataTrigger Binding="{Binding DataContext.ToolbarPosition, ElementName=root}" Value="Bottom">
          <Setter Property="Placement" Value="Top" />
        </DataTrigger>
      </Style.Triggers>
    </Style>

    <Style TargetType="app_main_view_lt:LauncherContentControl">
      <Style.Triggers>
        <DataTrigger Binding="{Binding DataContext.IconBox, ElementName=root}" Value="Small">
          <Setter Property="Icon" Value="{Binding Icon.Small}" />
        </DataTrigger>
        <DataTrigger Binding="{Binding DataContext.IconBox, ElementName=root}" Value="Normal">
          <Setter Property="Icon" Value="{Binding Icon.Normal}" />
        </DataTrigger>
        <DataTrigger Binding="{Binding DataContext.IconBox, ElementName=root}" Value="Big">
          <Setter Property="Icon" Value="{Binding Icon.Big}" />
        </DataTrigger>
        <DataTrigger Binding="{Binding DataContext.IconBox, ElementName=root}" Value="Large">
          <Setter Property="Icon" Value="{Binding Icon.Large}" />
        </DataTrigger>
      </Style.Triggers>
      <Setter Property="IconMargin" Value="{Binding DataContext.IconMargin, ElementName=root}" />
      <Setter Property="IsIconOnly" Value="{Binding DataContext.IsIconOnly, ElementName=root}" />
      <Setter Property="TextWidth" Value="{Binding DataContext.TextWidth, ElementName=root}" />
    </Style>

    <Style x:Key="GroupMenuItem" TargetType="MenuItem" BasedOn="{StaticResource {x:Type MenuItem}}">
      <!-- ElementName指定だと System.Windows.Data Error: 4 で動かないので x:Reference を使用 -->
      <Style.Triggers>
        <DataTrigger Value="True">
          <DataTrigger.Binding>
            <MultiBinding Converter="{StaticResource LogicalMultiEqualConverter}">
              <Binding Path="DataContext.SelectedLauncherGroup" Source="{x:Reference root}" />
              <Binding Path="." />
            </MultiBinding>
          </DataTrigger.Binding>
          <Setter Property="FontWeight" Value="Bold" />
          <!--<Setter Property="Effect" Value="{StaticResource Effect-Strong}" />-->
          <Setter Property="Icon" Value="{Binding StrongGroupIcon}" />
        </DataTrigger>
      </Style.Triggers>
      <Setter Property="Header" Value="{Binding Name}" />

      <Setter Property="Icon" Value="{Binding NormalGroupIcon}" />
      <Setter Property="Command" Value="{Binding DataContext.ChangeLauncherGroupCommand, Source={x:Reference root}}" />
      <Setter Property="CommandParameter" Value="{Binding}" />
    </Style>

    <!--#region ランチャーアイテム-->

    <DataTemplate x:Key="LauncherItemContentTemplate">
      <Border Background="Transparent" Padding="{Binding DataContext.ButtonPadding, ElementName=root, Mode=OneTime}">
        <i:Interaction.Behaviors>
          <app_core_views_attached:DragAndDropBehavior DragAndDrop="{Binding DataContext.ItemDragAndDrop, ElementName=root}" />
        </i:Interaction.Behaviors>
        <ContentPresenter Content="{TemplateBinding Content}" />
      </Border>
    </DataTemplate>

    <!--#region ファイル -->
    <ContextMenu x:Key="FileContextMenu" IsOpen="{Binding DataContext.IsOpendItemMenu, Mode=OneWay, Source={x:Reference root}}">
      <ContextMenu.Resources>
        <CollectionViewSource x:Key="LauncherGroupItems" Source="{Binding DataContext.LauncherGroupItems, Source={x:Reference root}}" />
        <!-- グループメニューアイテムのスタイルを上書きする普通のメニュー -->
        <Style x:Key="LauncherMenuItem" TargetType="MenuItem" BasedOn="{StaticResource {x:Type MenuItem}}" />
        <!-- CollectionContainer で使用するグループメニューアイテム -->
        <Style TargetType="MenuItem" BasedOn="{StaticResource GroupMenuItem}" />
      </ContextMenu.Resources>
      <ContextMenu.ItemsSource>
        <CompositeCollection>
          <MenuItem Style="{StaticResource MenuHeaderItem}" Header="execute" />
          <MenuItem Style="{StaticResource LauncherMenuItem}" Header="exec" Command="{Binding ExecuteSimpleCommand}" />
          <MenuItem Style="{StaticResource LauncherMenuItem}" Header="ex exec" Command="{Binding ExecuteExtendsCommand}" />

          <MenuItem Style="{StaticResource MenuHeaderItem}" Header="open" />
          <MenuItem Style="{StaticResource LauncherMenuItem}" Header="open dir" Command="{Binding OpenParentDirectoryCommand}" />
          <MenuItem Style="{StaticResource LauncherMenuItem}" Header="open work" Command="{Binding OpenWorkingDirectoryCommand}" />

          <MenuItem Style="{StaticResource MenuHeaderItem}" Header="copy" />
          <MenuItem Style="{StaticResource LauncherMenuItem}" Header="copy option" Command="{Binding CopyOptionCommand}" />
          <MenuItem Style="{StaticResource LauncherMenuItem}" Header="copy path" Command="{Binding CopyExecutePathCommand}" />
          <MenuItem Style="{StaticResource LauncherMenuItem}" Header="copy dir" Command="{Binding CopyParentDirectoryCommand}" />
          <MenuItem Style="{StaticResource LauncherMenuItem}" Header="copy work" Command="{Binding CopyWorkingDirectoryCommand}" />

          <MenuItem Style="{StaticResource MenuHeaderItem}" Header="others" />
          <MenuItem Style="{StaticResource LauncherMenuItem}" Header="customize" Command="{Binding CustomizeCommand}" />
          <MenuItem Style="{StaticResource LauncherMenuItem}" Header="remove?">
            <MenuItem Style="{StaticResource LauncherMenuItem}" Header="remove!" Command="{Binding DataContext.RemoveCommand, Source={x:Reference root}}" CommandParameter="{Binding}" />
          </MenuItem>
          <MenuItem Style="{StaticResource LauncherMenuItem}" Header="property" Command="{Binding ShowPropertyCommand}" />

          <MenuItem Style="{StaticResource MenuHeaderItem}" Header="group" />
          <CollectionContainer Collection="{Binding Source={StaticResource LauncherGroupItems}}" />
        </CompositeCollection>
      </ContextMenu.ItemsSource>
    </ContextMenu>
    <DataTemplate DataType="{x:Type app_main_viewmode_item:LauncherFileViewModel}">
      <Button Command="{Binding ExecuteMainCommand}" ContextMenu="{StaticResource FileContextMenu}" ContentTemplate="{StaticResource LauncherItemContentTemplate}" Template="{Binding DataContext.LauncherItemNormalButtonControlTemplate, ElementName=root}" >
        <i:Interaction.Triggers>
          <i:EventTrigger EventName="Loaded">
            <i:InvokeCommandAction Command="{Binding InitializeCommand}" />
          </i:EventTrigger>
        </i:Interaction.Triggers>
        <app_main_view_lt:LauncherContentControl Title="{Binding Name, Mode=OneTime}" Foreground="{Binding DataContext.ToolbarForeground, ElementName=root}" />
      </Button>
    </DataTemplate>
    <!--#endregion -->

    <!--#region ストアアプリ -->
    <ContextMenu x:Key="StoreAppContextMenu" IsOpen="{Binding DataContext.IsOpendItemMenu, Mode=OneWay, Source={x:Reference root}}">
      <ContextMenu.Resources>
        <CollectionViewSource x:Key="LauncherGroupItems" Source="{Binding DataContext.LauncherGroupItems, Source={x:Reference root}}" />
        <!-- グループメニューアイテムのスタイルを上書きする普通のメニュー -->
        <Style x:Key="LauncherMenuItem" TargetType="MenuItem" BasedOn="{StaticResource {x:Type MenuItem}}" />
        <!-- CollectionContainer で使用するグループメニューアイテム -->
        <Style TargetType="MenuItem" BasedOn="{StaticResource GroupMenuItem}" />
      </ContextMenu.Resources>
      <ContextMenu.ItemsSource>
        <CompositeCollection>
          <MenuItem Style="{StaticResource MenuHeaderItem}" Header="execute" />
          <MenuItem Style="{StaticResource LauncherMenuItem}" Header="exec" Command="{Binding ExecuteSimpleCommand}" />
          <MenuItem Style="{StaticResource LauncherMenuItem}" Header="ex exec" Command="{Binding ExecuteExtendsCommand}" />

          <!--<MenuItem Style="{StaticResource MenuHeaderItem}" Header="open" />
          <MenuItem Style="{StaticResource LauncherMenuItem}" Header="open dir" Command="{Binding OpenParentDirectoryCommand}" />
          <MenuItem Style="{StaticResource LauncherMenuItem}" Header="open work" Command="{Binding OpenWorkingDirectoryCommand}" />

          <MenuItem Style="{StaticResource MenuHeaderItem}" Header="copy" />
          <MenuItem Style="{StaticResource LauncherMenuItem}" Header="copy option" Command="{Binding CopyOptionCommand}" />
          <MenuItem Style="{StaticResource LauncherMenuItem}" Header="copy path" Command="{Binding CopyExecutePathCommand}" />
          <MenuItem Style="{StaticResource LauncherMenuItem}" Header="copy dir" Command="{Binding CopyParentDirectoryCommand}" />
          <MenuItem Style="{StaticResource LauncherMenuItem}" Header="copy work" Command="{Binding CopyWorkingDirectoryCommand}" />-->

          <MenuItem Style="{StaticResource MenuHeaderItem}" Header="others" />
          <MenuItem Style="{StaticResource LauncherMenuItem}" Header="setting">
            <MenuItem Style="{StaticResource LauncherMenuItem}" Header="customize" Command="{Binding CustomizeCommand}" />
            <MenuItem Style="{StaticResource LauncherMenuItem}" Header="remove" />
          </MenuItem>
          <!--<MenuItem Style="{StaticResource LauncherMenuItem}" Header="property" Command="{Binding ShowPropertyCommand}" />-->

          <MenuItem Style="{StaticResource MenuHeaderItem}" Header="group" />
          <CollectionContainer Collection="{Binding Source={StaticResource LauncherGroupItems}}" />
        </CompositeCollection>
      </ContextMenu.ItemsSource>
    </ContextMenu>
    <DataTemplate DataType="{x:Type app_main_viewmode_item:LauncherStoreAppViewModel}">
      <Button Command="{Binding ExecuteMainCommand}" ContextMenu="{StaticResource StoreAppContextMenu}" ContentTemplate="{StaticResource LauncherItemContentTemplate}" Template="{Binding DataContext.LauncherItemNormalButtonControlTemplate, ElementName=root}" >
        <i:Interaction.Triggers>
          <i:EventTrigger EventName="Loaded">
            <i:InvokeCommandAction Command="{Binding InitializeCommand}" />
          </i:EventTrigger>
        </i:Interaction.Triggers>
        <app_main_view_lt:LauncherContentControl Title="{Binding Name, Mode=OneTime}" Foreground="{Binding DataContext.ToolbarForeground, ElementName=root}" />
      </Button>
    </DataTemplate>

    <!--#endregion-->


    <!--#endregion-->


  </Window.Resources>
  <i:Interaction.Triggers>
    <app_core_views:RequestTrigger SourceObject="{Binding CloseRequest}">
      <i:InvokeCommandAction Command="{Binding CloseCommand ,ElementName=root}" />
    </app_core_views:RequestTrigger>
    <app_core_views:RequestTrigger SourceObject="{Binding ExpandShortcutFileRequest}">
      <prism:InvokeCommandAction Command="{Binding OpenCommonMessageDialogCommand, ElementName=root}" />
    </app_core_views:RequestTrigger>
  </i:Interaction.Triggers>
  <i:Interaction.Behaviors>
    <app_core_views_attached:DragAndDropBehavior DragAndDrop="{Binding ViewDragAndDrop}" />
  </i:Interaction.Behaviors>

  <Window.Style>
    <Style TargetType="Window">
      <Style.Triggers>
        <DataTrigger Binding="{Binding ExistsFullScreenWindow}" Value="True">
          <!-- Visibility 操作するともろもろの都合でウィンドウが閉じられるのだ！ -->
          <Setter Property="Opacity" Value="0" />
        </DataTrigger>
      </Style.Triggers>
      <Setter Property="Visibility" Value="{Binding IsVisible, Converter={StaticResource BooleanToVisibilityConverter}}" />
    </Style>
  </Window.Style>

  <Window.ContextMenu>
    <ContextMenu ItemsSource="{Binding LauncherGroupItems}" ItemContainerStyle="{StaticResource GroupMenuItem}" />
  </Window.ContextMenu>
  <Grid>
    <Grid.Style>
      <Style TargetType="Grid">
        <Style.Triggers>
          <DataTrigger Binding="{Binding DataContext.IconDirection, ElementName=root}" Value="Center">
            <Setter Property="VerticalAlignment" Value="Center" />
            <Setter Property="HorizontalAlignment" Value="Center" />
          </DataTrigger>
        </Style.Triggers>
      </Style>
    </Grid.Style>
    <Grid.ColumnDefinitions>
      <ColumnDefinition Width="Auto" />
      <ColumnDefinition Width="Auto" />
      <ColumnDefinition Width="*" />
      <ColumnDefinition Width="Auto" />
      <ColumnDefinition Width="Auto" />
    </Grid.ColumnDefinitions>
    <Grid.RowDefinitions>
      <RowDefinition Height="Auto" />
      <RowDefinition Height="Auto" />
      <RowDefinition Height="*" />
      <RowDefinition Height="Auto" />
      <RowDefinition Height="Auto" />
    </Grid.RowDefinitions>

    <ToggleButton x:Name="appButton" AllowDrop="False" IsChecked="{Binding IsOpendAppMenu}" ContentTemplate="{StaticResource LauncherItemContentTemplate}" Template="{Binding DataContext.LauncherItemToggleButtonControlTemplate, ElementName=root}" IsEnabled="{Binding IsOpen, ElementName=appPopup, Converter={StaticResource LogicalNotConverter}}">
      <ToggleButton.Style>
        <Style TargetType="ToggleButton">
          <Style.Triggers>

            <!--#region Left Right -->
            <MultiDataTrigger>
              <MultiDataTrigger.Conditions>
                <Condition Binding="{Binding DataContext.IsVerticalLayout, ElementName=root}" Value="True" />
                <Condition Binding="{Binding DataContext.IconDirection, ElementName=root}" Value="LeftTop" />
              </MultiDataTrigger.Conditions>
              <Setter Property="Grid.Row" Value="0" />
              <Setter Property="Grid.Column" Value="2" />
            </MultiDataTrigger>
            <MultiDataTrigger>
              <MultiDataTrigger.Conditions>
                <Condition Binding="{Binding DataContext.IsVerticalLayout, ElementName=root}" Value="True" />
                <Condition Binding="{Binding DataContext.IconDirection, ElementName=root}" Value="Center" />
              </MultiDataTrigger.Conditions>
              <Setter Property="Grid.Row" Value="0" />
              <Setter Property="Grid.Column" Value="2" />
              <!--<Setter Property="VerticalAlignment" Value="Bottom" />-->
            </MultiDataTrigger>
            <MultiDataTrigger>
              <MultiDataTrigger.Conditions>
                <Condition Binding="{Binding DataContext.IsVerticalLayout, ElementName=root}" Value="True" />
                <Condition Binding="{Binding DataContext.IconDirection, ElementName=root}" Value="RightBottom" />
              </MultiDataTrigger.Conditions>
              <Setter Property="Grid.Row" Value="4" />
              <Setter Property="Grid.Column" Value="2" />
            </MultiDataTrigger>
            <!--#endregion-->

            <!--#region Top Bottom -->
            <MultiDataTrigger>
              <MultiDataTrigger.Conditions>
                <Condition Binding="{Binding DataContext.IsVerticalLayout, ElementName=root}" Value="False" />
                <Condition Binding="{Binding DataContext.IconDirection, ElementName=root}" Value="LeftTop" />
              </MultiDataTrigger.Conditions>
              <Setter Property="Grid.Row" Value="2" />
              <Setter Property="Grid.Column" Value="0" />
            </MultiDataTrigger>
            <MultiDataTrigger>
              <MultiDataTrigger.Conditions>
                <Condition Binding="{Binding DataContext.IsVerticalLayout, ElementName=root}" Value="False" />
                <Condition Binding="{Binding DataContext.IconDirection, ElementName=root}" Value="Center" />
              </MultiDataTrigger.Conditions>
              <Setter Property="Grid.Row" Value="2" />
              <Setter Property="Grid.Column" Value="0" />
            </MultiDataTrigger>
            <MultiDataTrigger>
              <MultiDataTrigger.Conditions>
                <Condition Binding="{Binding DataContext.IsVerticalLayout, ElementName=root}" Value="False" />
                <Condition Binding="{Binding DataContext.IconDirection, ElementName=root}" Value="RightBottom" />
              </MultiDataTrigger.Conditions>
              <Setter Property="Grid.Row" Value="2" />
              <Setter Property="Grid.Column" Value="4" />
            </MultiDataTrigger>
            <!--#endregion-->

          </Style.Triggers>
        </Style>
      </ToggleButton.Style>
      <Grid>
        <app_main_view_lt:LauncherContentControl Title="{Binding DataContext.SelectedLauncherGroup.Name, ElementName=root}" Foreground="{Binding DataContext.ToolbarForeground, ElementName=root}">
          <app_main_view_lt:LauncherContentControl.Icon>
            <Viewbox
              Width="{Binding IconBox, Converter={StaticResource IconScaleToWidthConverter}}"
              Height="{Binding IconBox, Converter={StaticResource IconScaleToHeightConverter}}"
            >
              <Canvas Width="24" Height="24">
                <Path
                  Data="{Binding ToolbarMainIcon}"
                  Fill="{Binding ToolbarForeground}"
                  Stroke="{Binding ToolbarForeground}"
                  StrokeThickness="1"
                />
              </Canvas>
            </Viewbox>
          </app_main_view_lt:LauncherContentControl.Icon>
        </app_main_view_lt:LauncherContentControl>
        <Popup x:Name="appPopup" Style="{StaticResource DropMenu}" IsOpen="{Binding IsChecked, ElementName=appButton}">
          <Border Style="{StaticResource PopupMenuBorder}">
            <StackPanel>
              <MenuItem Style="{StaticResource MenuHeaderItem}" Header="position" />
              <Grid>
                <Grid.ColumnDefinitions>
                  <ColumnDefinition />
                  <ColumnDefinition />
                  <ColumnDefinition />
                </Grid.ColumnDefinitions>
                <Grid.RowDefinitions>
                  <RowDefinition />
                  <RowDefinition />
                  <RowDefinition />
                </Grid.RowDefinitions>

                <Button Grid.Row="1" Grid.Column="0" Command="{Binding ChangeToolbarPositionCommand}" CommandParameter="{x:Static app_main_view_ex:AppDesktopToolbarPosition.Left}" Content="{Binding ToolbarPositionLeftIcon}"></Button>
                <Button Grid.Row="0" Grid.Column="1" Command="{Binding ChangeToolbarPositionCommand}" CommandParameter="{x:Static app_main_view_ex:AppDesktopToolbarPosition.Top}" Content="{Binding ToolbarPositionTopIcon}"></Button>
                <Button Grid.Row="1" Grid.Column="2" Command="{Binding ChangeToolbarPositionCommand}" CommandParameter="{x:Static app_main_view_ex:AppDesktopToolbarPosition.Right}" Content="{Binding ToolbarPositionRightIcon}"></Button>
                <Button Grid.Row="2" Grid.Column="1" Command="{Binding ChangeToolbarPositionCommand}" CommandParameter="{x:Static app_main_view_ex:AppDesktopToolbarPosition.Bottom}" Content="{Binding ToolbarPositionBottomIcon}"></Button>

              </Grid>

              <Separator />

              <MenuItem Header="topmost" IsChecked="{Binding IsTopmost, Mode=OneWay}" Command="{Binding SwitchTopmostCommand}" />
              <MenuItem Header="auto hide" IsChecked="{Binding IsAutoHide, Mode=OneWay}" Command="{Binding SwitchAutoHideCommand}" />

              <Separator />

              <MenuItem Header="close" Command="{Binding CloseCommand}" />

              <MenuItem Style="{StaticResource MenuHeaderItem}" Header="group" />

              <ItemsControl ItemsSource="{Binding LauncherGroupItems}">
                <ItemsControl.ItemTemplate>
                  <DataTemplate>
                    <MenuItem Style="{StaticResource GroupMenuItem}" />
                  </DataTemplate>
                </ItemsControl.ItemTemplate>
              </ItemsControl>
            </StackPanel>
          </Border>
        </Popup>
      </Grid>
    </ToggleButton>

    <ScrollViewer Grid.Row="2" Grid.Column="2" HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Hidden">
      <ScrollViewer.Style>
        <Style TargetType="ScrollViewer">
          <Style.Triggers>
            <DataTrigger Binding="{Binding DataContext.IconDirection, ElementName=root}" Value="Center">
              <Setter Property="VerticalAlignment" Value="Center" />
              <Setter Property="HorizontalAlignment" Value="Center" />
            </DataTrigger>
          </Style.Triggers>
        </Style>
      </ScrollViewer.Style>
      <ItemsControl ItemsSource="{Binding LauncherItems}">
        <ItemsControl.ItemsPanel>
          <ItemsPanelTemplate>
            <DockPanel LastChildFill="False">
              <DockPanel.Style>
                <Style TargetType="DockPanel">
                  <Style.Triggers>
                    <!--#region Left Right -->
                    <MultiDataTrigger>
                      <MultiDataTrigger.Conditions>
                        <Condition Binding="{Binding DataContext.IsVerticalLayout, ElementName=root}" Value="True" />
                        <Condition Binding="{Binding DataContext.IconDirection, ElementName=root}" Value="LeftTop" />
                      </MultiDataTrigger.Conditions>
                      <Setter Property="VerticalAlignment" Value="Top" />
                    </MultiDataTrigger>
                    <MultiDataTrigger>
                      <MultiDataTrigger.Conditions>
                        <Condition Binding="{Binding DataContext.IsVerticalLayout, ElementName=root}" Value="True" />
                        <Condition Binding="{Binding DataContext.IconDirection, ElementName=root}" Value="Center" />
                      </MultiDataTrigger.Conditions>
                      <Setter Property="VerticalAlignment" Value="Center" />
                    </MultiDataTrigger>
                    <MultiDataTrigger>
                      <MultiDataTrigger.Conditions>
                        <Condition Binding="{Binding DataContext.IsVerticalLayout, ElementName=root}" Value="True" />
                        <Condition Binding="{Binding DataContext.IconDirection, ElementName=root}" Value="RightBottom" />
                      </MultiDataTrigger.Conditions>
                      <Setter Property="VerticalAlignment" Value="Bottom" />
                    </MultiDataTrigger>
                    <!--#endregion-->

                    <!--#region Top Bottom -->
                    <MultiDataTrigger>
                      <MultiDataTrigger.Conditions>
                        <Condition Binding="{Binding DataContext.IsVerticalLayout, ElementName=root}" Value="False" />
                        <Condition Binding="{Binding DataContext.IconDirection, ElementName=root}" Value="LeftTop" />
                      </MultiDataTrigger.Conditions>
                      <Setter Property="HorizontalAlignment" Value="Left" />
                    </MultiDataTrigger>
                    <MultiDataTrigger>
                      <MultiDataTrigger.Conditions>
                        <Condition Binding="{Binding DataContext.IsVerticalLayout, ElementName=root}" Value="False" />
                        <Condition Binding="{Binding DataContext.IconDirection, ElementName=root}" Value="Center" />
                      </MultiDataTrigger.Conditions>
                      <Setter Property="HorizontalAlignment" Value="Center" />
                    </MultiDataTrigger>
                    <MultiDataTrigger>
                      <MultiDataTrigger.Conditions>
                        <Condition Binding="{Binding DataContext.IsVerticalLayout, ElementName=root}" Value="False" />
                        <Condition Binding="{Binding DataContext.IconDirection, ElementName=root}" Value="RightBottom" />
                      </MultiDataTrigger.Conditions>
                      <Setter Property="HorizontalAlignment" Value="Right" />
                    </MultiDataTrigger>
                    <!--#endregion-->
                  </Style.Triggers>
                </Style>
              </DockPanel.Style>
            </DockPanel>
          </ItemsPanelTemplate>
        </ItemsControl.ItemsPanel>
        <ItemsControl.ItemContainerStyle>
          <Style TargetType="ContentPresenter">
            <Style.Triggers>
              <!--#region Left Right -->
              <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                  <Condition Binding="{Binding DataContext.IsVerticalLayout, ElementName=root}" Value="True" />
                  <Condition Binding="{Binding DataContext.IconDirection, ElementName=root}" Value="LeftTop" />
                </MultiDataTrigger.Conditions>
                <Setter Property="DockPanel.Dock" Value="Top" />
              </MultiDataTrigger>
              <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                  <Condition Binding="{Binding DataContext.IsVerticalLayout, ElementName=root}" Value="True" />
                  <Condition Binding="{Binding DataContext.IconDirection, ElementName=root}" Value="Center" />
                </MultiDataTrigger.Conditions>
                <Setter Property="DockPanel.Dock" Value="Top" />
              </MultiDataTrigger>
              <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                  <Condition Binding="{Binding DataContext.IsVerticalLayout, ElementName=root}" Value="True" />
                  <Condition Binding="{Binding DataContext.IconDirection, ElementName=root}" Value="RightBottom" />
                </MultiDataTrigger.Conditions>
                <Setter Property="DockPanel.Dock" Value="Bottom" />
              </MultiDataTrigger>
              <!--#endregion-->

              <!--#region Top Bottom -->
              <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                  <Condition Binding="{Binding DataContext.IsVerticalLayout, ElementName=root}" Value="False" />
                  <Condition Binding="{Binding DataContext.IconDirection, ElementName=root}" Value="LeftTop" />
                </MultiDataTrigger.Conditions>
                <Setter Property="DockPanel.Dock" Value="Left" />
              </MultiDataTrigger>
              <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                  <Condition Binding="{Binding DataContext.IsVerticalLayout, ElementName=root}" Value="False" />
                  <Condition Binding="{Binding DataContext.IconDirection, ElementName=root}" Value="Center" />
                </MultiDataTrigger.Conditions>
                <Setter Property="DockPanel.Dock" Value="Left" />
              </MultiDataTrigger>
              <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                  <Condition Binding="{Binding DataContext.IsVerticalLayout, ElementName=root}" Value="False" />
                  <Condition Binding="{Binding DataContext.IconDirection, ElementName=root}" Value="RightBottom" />
                </MultiDataTrigger.Conditions>
                <Setter Property="DockPanel.Dock" Value="Right" />
              </MultiDataTrigger>
              <!--#endregion-->

            </Style.Triggers>
          </Style>
        </ItemsControl.ItemContainerStyle>
      </ItemsControl>
    </ScrollViewer>


  </Grid>
</Window>
