<Window
  x:Name="root"
  x:Class="ContentTypeTextNet.Pe.Main.Views.Command.CommandWindow"

  xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
  xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"

  xmlns:i="http://schemas.microsoft.com/expression/2010/interactivity"
  xmlns:prism="http://prismlibrary.com/"

  xmlns:app_core_views_converter="clr-namespace:ContentTypeTextNet.Pe.Core.Views.Converter;assembly=Pe.Core"
  xmlns:app_core_views="clr-namespace:ContentTypeTextNet.Pe.Core.Views;assembly=Pe.Core"
  xmlns:app_main_viewmodels_iconviewer="clr-namespace:ContentTypeTextNet.Pe.Main.ViewModels.IconViewer"
  xmlns:app_main_views="clr-namespace:ContentTypeTextNet.Pe.Main.Views"

  Title="CommandWindow"

  AllowsTransparency="True"
  WindowStyle="None"
  Background="Transparent"
  SizeToContent="Height"
  MinWidth="100"
  MaxWidth="400"
  Topmost="True"

  Width="{Binding WindowWidth, Mode=TwoWay, Delay=1000}"

  xmlns:d="http://schemas.microsoft.com/expression/blend/2008" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
  mc:Ignorable="d"
>
  <Window.Resources>

    <BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter" />
    <app_core_views_converter:IconBoxToWidthConverter x:Key="IconBoxToWidthConverter" />
    <app_core_views_converter:IconBoxToHeightConverter x:Key="IconBoxToHeightConverter" />

    <DataTemplate DataType="{x:Type app_main_viewmodels_iconviewer:IconViewerViewModel}">
      <app_main_views:ImageViewerControl IconViewer="{Binding }" />
    </DataTemplate>

  </Window.Resources>
  <Window.Style>
    <Style TargetType="Window">
      <Setter Property="WindowChrome.WindowChrome">
        <Setter.Value>
          <WindowChrome
            CaptionHeight="0"
            ResizeBorderThickness="{Binding ViewResizeThickness}"
          />
        </Setter.Value>
      </Setter>
    </Style>
  </Window.Style>

  <i:Interaction.Triggers>
    <app_core_views:RequestTrigger SourceObject="{Binding ScrollSelectedItemRequest}">
      <prism:InvokeCommandAction Command="{Binding ScrollSelectedItemCommand, ElementName=root}" />
    </app_core_views:RequestTrigger>
    <i:EventTrigger EventName="Activated">
      <i:InvokeCommandAction Command="{Binding ViewActivatedCommand}" CommandParameter="{Binding ElementName=root}"/>
    </i:EventTrigger>
    <i:EventTrigger EventName="Deactivated">
      <i:InvokeCommandAction Command="{Binding ViewDeactivatedCommand}" CommandParameter="{Binding ElementName=root}" />
    </i:EventTrigger>
  </i:Interaction.Triggers>

  <Border BorderThickness="{Binding ViewBorderThickness}">
    <Border.Style>
      <Style TargetType="Border">
        <Setter Property="BorderBrush" Value="{Binding ViewActiveBorderBrush}" />
        <Setter Property="Background" Value="{Binding ViewActiveBackgroundBrush}" />
      </Style>
    </Border.Style>

    <Grid VerticalAlignment="Center">
      <Grid.ColumnDefinitions>
        <ColumnDefinition Width="Auto" />
        <ColumnDefinition Width="Auto" />
        <ColumnDefinition Width="*" />
        <ColumnDefinition Width="Auto" />
      </Grid.ColumnDefinitions>

      <Border x:Name="grip" Grid.Column="0" Cursor="SizeAll" Width="{Binding GripWidth}">
        <Border.Style>
          <Style TargetType="Border">
            <Setter Property="Background" Value="{Binding GripActiveBrush}" />
          </Style>
        </Border.Style>
      </Border>

      <!-- アイコン描画領域 跡地 -->
      <Grid Grid.Column="1">
        <!-- 別にいらんなぁ、と。 -->
        <ContentControl
          Focusable="False"
          IsTabStop="False"
          Width="{Binding IconBox, Converter={StaticResource IconBoxToWidthConverter}}"
          Height="{Binding IconBox, Converter={StaticResource IconBoxToHeightConverter}}"
          Margin="{Binding SelectedIconMargin}"
          Content="{Binding CurrentSelectedItem.Icon}"
        />
      </Grid>

      <Grid Grid.Column="2">
        <Border BorderThickness="{Binding InputBorderThickness}" >
          <Border.Style>
            <Style TargetType="Border">
              <Style.Triggers>
                <DataTrigger Binding="{Binding InputState}" Value="Finding">
                  <Setter Property="BorderBrush" Value="{Binding InputFindingBorderBrush}" />
                </DataTrigger>
                <DataTrigger Binding="{Binding InputState}" Value="Listup">
                  <Setter Property="BorderBrush" Value="{Binding InputListupBorderBrush}" />
                </DataTrigger>
                <DataTrigger Binding="{Binding InputState}" Value="NotFound">
                  <Setter Property="BorderBrush" Value="{Binding InputNotFoundBorderBrush}" />
                </DataTrigger>
              </Style.Triggers>
              <Setter Property="BorderBrush" Value="{Binding InputEmptyBorderBrush}" />
            </Style>
          </Border.Style>
          <TextBox
            x:Name="inputCommand"
            BorderThickness="0"
            Text="{Binding InputValue, UpdateSourceTrigger=PropertyChanged, Delay=200}"
            FontFamily="{Binding Font.FontFamily}"
            FontSize="{Binding Font.FontSize}"
            FontStyle="{Binding Font.FontStyle}"
            FontWeight="{Binding Font.FontWeight}"
          >
            <TextBox.InputBindings>
              <KeyBinding Gesture="Enter" Command="{Binding ExecuteCommand}" />
              <KeyBinding Gesture="Enter" Modifiers="Shift" Command="{Binding ExecuteCommand}" />
              <KeyBinding Gesture="Up" Command="{Binding UpSelectItemCommand}" />
              <KeyBinding Gesture="Down" Command="{Binding DownSelectItemCommand}" />
            </TextBox.InputBindings>

            <TextBox.Style>
              <Style TargetType="TextBox">
                <Style.Triggers>
                  <DataTrigger Binding="{Binding InputState}" Value="Finding">
                    <Setter Property="Background" Value="{Binding InputEmptyBackground}" />
                    <Setter Property="Foreground" Value="{Binding InputEmptyForeground}" />
                  </DataTrigger>
                  <DataTrigger Binding="{Binding InputState}" Value="Listup">
                    <Setter Property="Background" Value="{Binding InputListupBackground}" />
                    <Setter Property="Foreground" Value="{Binding InputListupForeground}" />
                  </DataTrigger>
                  <DataTrigger Binding="{Binding InputState}" Value="NotFound">
                    <Setter Property="Background" Value="{Binding InputNotFoundBackground}" />
                    <Setter Property="Foreground" Value="{Binding InputNotFoundForeground}" />
                  </DataTrigger>
                </Style.Triggers>
                <Setter Property="Background" Value="{Binding InputEmptyBackground}" />
                <Setter Property="Foreground" Value="{Binding InputEmptyForeground}" />
              </Style>
            </TextBox.Style>
          </TextBox>
        </Border>
        <Popup
          x:Name="popupItems"
          MaxHeight="300"
          MinWidth="{Binding ActualWidth, ElementName=inputCommand}"
          PlacementTarget="{Binding ElementName=inputCommand}"
          Placement="Bottom"
          AllowsTransparency="True"
        >
          <Popup.Style>
            <Style TargetType="Popup">
              <Style.Triggers>
                <MultiDataTrigger>
                  <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding IsVisible, ElementName=root}" Value="True" />
                    <Condition Binding="{Binding IsActive, ElementName=root}" Value="True" />
                    <!--<Condition Binding="{Binding ElementName=inputCommand, Path=IsFocused}" Value="True" />-->
                    <Condition Binding="{Binding ElementName=listItems, Path=HasItems}" Value="True" />
                  </MultiDataTrigger.Conditions>
                  <Setter Property="IsOpen" Value="True" />
                </MultiDataTrigger>
              </Style.Triggers>
            </Style>
          </Popup.Style>
          <ListBox
            x:Name="listItems"
            ScrollViewer.CanContentScroll="True"
            SelectedItem="{Binding SelectedItem}" ItemsSource="{Binding CommandItems}"
            Focusable="False"
            IsTabStop="False"
          >
            <ListBox.ItemContainerStyle>
              <Style TargetType="ListBoxItem">
                <Setter Property="Focusable" Value="False"/>
                <EventSetter Event="PreviewMouseLeftButtonDown" Handler="ListBoxItem_PreviewMouseLeftButtonDown" />
              </Style>
            </ListBox.ItemContainerStyle>
            <ListBox.ItemTemplate>
              <DataTemplate>
                <Grid>
                  <Grid.RowDefinitions>
                    <RowDefinition Height="Auto" />
                    <RowDefinition Height="Auto" />
                  </Grid.RowDefinitions>
                  <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition Width="*" />
                  </Grid.ColumnDefinitions>

                  <ContentControl Focusable="False" IsTabStop="False" Grid.Row="0" Grid.Column="0" Content="{Binding Icon}" />
                  <TextBlock Grid.Row="0" Grid.Column="1" Text="{Binding Header}" />

                  <Grid Grid.Row="1" Grid.Column="1">
                    <Grid.ColumnDefinitions>
                      <ColumnDefinition Width="Auto" />
                      <ColumnDefinition Width="*" />
                    </Grid.ColumnDefinitions>
                    <TextBlock Grid.Column="0" Text="{Binding Kind}" />
                    <TextBlock Grid.Column="1" Text="{Binding Description}" />
                  </Grid>
                </Grid>
              </DataTemplate>
            </ListBox.ItemTemplate>
            <ListBox.ItemsPanel>
              <ItemsPanelTemplate>
                <VirtualizingStackPanel
                  VirtualizingStackPanel.IsVirtualizing="True"
                  VirtualizingStackPanel.VirtualizationMode="Recycling"
                />
              </ItemsPanelTemplate>
            </ListBox.ItemsPanel>

          </ListBox>
        </Popup>
      </Grid>

      <Button Grid.Column="3" Focusable="False" IsTabStop="False" Content="exec"/>

    </Grid>
  </Border>

</Window>
