<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ include file="..\Pe.Bridge\Models\Data\Id.t4" once="true" #>
<#@ output extension=".cs" #>
<#
    var items = IdDefine.GetItems();
#>
// <auto-generated>
// [T4] build <#= DateTime.UtcNow.ToString("u") #>(UTC)
// </auto-generated>
using System.Data;
using Dapper;
using ContentTypeTextNet.Pe.Main.Models.Database;
using ContentTypeTextNet.Pe.Bridge.Models.Data;

namespace ContentTypeTextNet.Pe.Main.Models.Applications
{
    partial class ApplicationDatabaseImplementation
    {
        #region define

<# foreach(var item in items.Where(i => (bool)i.Options["Dapper"])) { #>
<# switch(item.Type.FullName) { #>
<# case "System.Guid": #>
        private class <#= item.Name #>Handler: SqlMapper.TypeHandler<<#= item.Name #>>
        {
            #region TypeHandler

            public override void SetValue(IDbDataParameter parameter, <#= item.Name #> value)
            {
                parameter.Value = value.Id.ToString("D");
            }

            public override <#= item.Name #> Parse(object value)
            {

                var s = (string)value;
                if(s != null) {
                    if(<#= item.Name #>.TryParse(s, out var ret)) {
                        return ret;
                    }
                }

                return <#= item.Name #>.Empty;
            }

            #endregion
        }
<# break; #>
<# } #>
<# } #>

        #endregion


        static ApplicationDatabaseImplementation()
        {
<# foreach(var item in items.Where(i => (bool)i.Options["Dapper"])) { #>
            SqlMapper.AddTypeHandler(typeof(<#= item.Name #>), new <#= item.Name #>Handler());
<# } #>
        }
    }
}
