<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output encoding="utf-8" extension=".cs" #>
<#
    var items = new [] {
        new {
            Name = "PluginInvalidAssemblyException",
            Comment = "プラグインの読み込み失敗時に投げられる。",
        },
        new {
            Name = "PluginNotFoundException",
            Comment = "プラグインが存在しない場合に投げられる。",
        },
        new {
            Name = "PluginInvalidArchiveKindException",
            Comment = "プラグインアーカイブの種別不明時に投げられる。",
        },
        new {
            Name = "PluginDuplicateExtractDirectoryException",
            Comment = "プラグインアーカイブの展開ディレクトリが重複時に投げられる。",
        },
        new {
            Name = "PluginBrokenException",
            Comment = "プラグインぶっ壊れ系。",
        },
        new {
            Name = "PluginInstallException",
            Comment = "プラグインインストール失敗処理。",
        },
        new {
            Name = "PluginArchiveNameException",
            Comment = "プラグインアーカイブ名不正。",
        },
        new {
            Name = "PluginUnavailableContextException",
            Comment = "プラグイン使用不可例外。",
        },
    };
#>
#nullable enable
// <auto-generated>
// [T4] build <#= DateTime.UtcNow.ToString("u") #>(UTC)
// </auto-generated>
using System;
using System.Runtime.Serialization;

namespace ContentTypeTextNet.Pe.Main.Models.Plugin
{
    /// <summary>
    /// プラグイン処理にて明示的に発生させる基底の例外。
    /// </summary>
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    public abstract class PluginException: Exception
    {
        protected PluginException()
        { }

        protected PluginException(string? message) : base(message)
        { }

        protected PluginException(string? message, Exception? innerException) : base(message, innerException)
        { }
    }

<# foreach(var item in items) { #>
    /// <summary>
    /// <#= item.Comment #>
    /// </summary>
    [Serializable]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    public sealed class <#= item.Name #>: PluginException
    {
        public <#= item.Name #>()
        { }

        public <#= item.Name #>(string? message) : base(message)
        { }

        public <#= item.Name #>(string? message, Exception? innerException) : base(message, innerException)
        { }
    }
<# } #>
}
