
// <auto-generated>
// [T4] build 2022-03-26 14:06:35Z(UTC)
// </auto-generated>
using System.Data;
using Dapper;
using ContentTypeTextNet.Pe.Main.Models.Database;
using ContentTypeTextNet.Pe.Bridge.Models.Data;

namespace ContentTypeTextNet.Pe.Main.Models.Applications
{
    partial class ApplicationDatabaseImplementation
    {
        #region define

        private class LauncherItemIdHandler: SqlMapper.TypeHandler<LauncherItemId>
        {
            #region TypeHandler

            public override void SetValue(IDbDataParameter parameter, LauncherItemId value)
            {
                parameter.Value = value.Id.ToString("D");
            }

            public override LauncherItemId Parse(object value)
            {

                var s = (string)value;
                if(s != null) {
                    if(LauncherItemId.TryParse(s, out var ret)) {
                        return ret;
                    }
                }

                return LauncherItemId.Empty;
            }

            #endregion
        }
        private class CredentialIdIdHandler: SqlMapper.TypeHandler<CredentialIdId>
        {
            #region TypeHandler

            public override void SetValue(IDbDataParameter parameter, CredentialIdId value)
            {
                parameter.Value = value.Id.ToString("D");
            }

            public override CredentialIdId Parse(object value)
            {

                var s = (string)value;
                if(s != null) {
                    if(CredentialIdId.TryParse(s, out var ret)) {
                        return ret;
                    }
                }

                return CredentialIdId.Empty;
            }

            #endregion
        }
        private class LauncherToolbarIdHandler: SqlMapper.TypeHandler<LauncherToolbarId>
        {
            #region TypeHandler

            public override void SetValue(IDbDataParameter parameter, LauncherToolbarId value)
            {
                parameter.Value = value.Id.ToString("D");
            }

            public override LauncherToolbarId Parse(object value)
            {

                var s = (string)value;
                if(s != null) {
                    if(LauncherToolbarId.TryParse(s, out var ret)) {
                        return ret;
                    }
                }

                return LauncherToolbarId.Empty;
            }

            #endregion
        }
        private class FontIdHandler: SqlMapper.TypeHandler<FontId>
        {
            #region TypeHandler

            public override void SetValue(IDbDataParameter parameter, FontId value)
            {
                parameter.Value = value.Id.ToString("D");
            }

            public override FontId Parse(object value)
            {

                var s = (string)value;
                if(s != null) {
                    if(FontId.TryParse(s, out var ret)) {
                        return ret;
                    }
                }

                return FontId.Empty;
            }

            #endregion
        }
        private class LauncherGroupIdHandler: SqlMapper.TypeHandler<LauncherGroupId>
        {
            #region TypeHandler

            public override void SetValue(IDbDataParameter parameter, LauncherGroupId value)
            {
                parameter.Value = value.Id.ToString("D");
            }

            public override LauncherGroupId Parse(object value)
            {

                var s = (string)value;
                if(s != null) {
                    if(LauncherGroupId.TryParse(s, out var ret)) {
                        return ret;
                    }
                }

                return LauncherGroupId.Empty;
            }

            #endregion
        }
        private class NoteIdHandler: SqlMapper.TypeHandler<NoteId>
        {
            #region TypeHandler

            public override void SetValue(IDbDataParameter parameter, NoteId value)
            {
                parameter.Value = value.Id.ToString("D");
            }

            public override NoteId Parse(object value)
            {

                var s = (string)value;
                if(s != null) {
                    if(NoteId.TryParse(s, out var ret)) {
                        return ret;
                    }
                }

                return NoteId.Empty;
            }

            #endregion
        }
        private class NoteFileIdHandler: SqlMapper.TypeHandler<NoteFileId>
        {
            #region TypeHandler

            public override void SetValue(IDbDataParameter parameter, NoteFileId value)
            {
                parameter.Value = value.Id.ToString("D");
            }

            public override NoteFileId Parse(object value)
            {

                var s = (string)value;
                if(s != null) {
                    if(NoteFileId.TryParse(s, out var ret)) {
                        return ret;
                    }
                }

                return NoteFileId.Empty;
            }

            #endregion
        }
        private class KeyActionIdHandler: SqlMapper.TypeHandler<KeyActionId>
        {
            #region TypeHandler

            public override void SetValue(IDbDataParameter parameter, KeyActionId value)
            {
                parameter.Value = value.Id.ToString("D");
            }

            public override KeyActionId Parse(object value)
            {

                var s = (string)value;
                if(s != null) {
                    if(KeyActionId.TryParse(s, out var ret)) {
                        return ret;
                    }
                }

                return KeyActionId.Empty;
            }

            #endregion
        }
        private class PluginIdHandler: SqlMapper.TypeHandler<PluginId>
        {
            #region TypeHandler

            public override void SetValue(IDbDataParameter parameter, PluginId value)
            {
                parameter.Value = value.Id.ToString("D");
            }

            public override PluginId Parse(object value)
            {

                var s = (string)value;
                if(s != null) {
                    if(PluginId.TryParse(s, out var ret)) {
                        return ret;
                    }
                }

                return PluginId.Empty;
            }

            #endregion
        }

        #endregion


        static ApplicationDatabaseImplementation()
        {
            SqlMapper.AddTypeHandler(typeof(LauncherItemId), new LauncherItemIdHandler());
            SqlMapper.AddTypeHandler(typeof(CredentialIdId), new CredentialIdIdHandler());
            SqlMapper.AddTypeHandler(typeof(LauncherToolbarId), new LauncherToolbarIdHandler());
            SqlMapper.AddTypeHandler(typeof(FontId), new FontIdHandler());
            SqlMapper.AddTypeHandler(typeof(LauncherGroupId), new LauncherGroupIdHandler());
            SqlMapper.AddTypeHandler(typeof(NoteId), new NoteIdHandler());
            SqlMapper.AddTypeHandler(typeof(NoteFileId), new NoteFileIdHandler());
            SqlMapper.AddTypeHandler(typeof(KeyActionId), new KeyActionIdHandler());
            SqlMapper.AddTypeHandler(typeof(PluginId), new PluginIdHandler());
        }
    }
}
