// <auto-generated>
// [T4] build 2024-11-15 12:25:57Z(UTC)
// </auto-generated>
namespace ContentTypeTextNet.Pe.Library.CliProxy.System
{
    /// <inheritdoc cref="global::System.Environment"/>
    public interface IEnvironmentProxy
    {
        #region property (20)
        /// <inheritdoc cref="global::System.Environment.TickCount"/>
        public global::System.Int32 TickCount
        {
            get;
        }

        /// <inheritdoc cref="global::System.Environment.ExitCode"/>
        public global::System.Int32 ExitCode
        {
            get;
            set;
        }

        /// <inheritdoc cref="global::System.Environment.CommandLine"/>
        public global::System.String CommandLine
        {
            get;
        }

        /// <inheritdoc cref="global::System.Environment.CurrentDirectory"/>
        public global::System.String CurrentDirectory
        {
            get;
            set;
        }

        /// <inheritdoc cref="global::System.Environment.SystemDirectory"/>
        public global::System.String SystemDirectory
        {
            get;
        }

        /// <inheritdoc cref="global::System.Environment.MachineName"/>
        public global::System.String MachineName
        {
            get;
        }

        /// <inheritdoc cref="global::System.Environment.ProcessorCount"/>
        public global::System.Int32 ProcessorCount
        {
            get;
        }

        /// <inheritdoc cref="global::System.Environment.SystemPageSize"/>
        public global::System.Int32 SystemPageSize
        {
            get;
        }

        /// <inheritdoc cref="global::System.Environment.NewLine"/>
        public global::System.String NewLine
        {
            get;
        }

        /// <inheritdoc cref="global::System.Environment.Version"/>
        public global::System.Version Version
        {
            get;
        }

        /// <inheritdoc cref="global::System.Environment.WorkingSet"/>
        public global::System.Int64 WorkingSet
        {
            get;
        }

        /// <inheritdoc cref="global::System.Environment.OSVersion"/>
        public global::System.OperatingSystem OSVersion
        {
            get;
        }

        /// <inheritdoc cref="global::System.Environment.StackTrace"/>
        public global::System.String StackTrace
        {
            get;
        }

        /// <inheritdoc cref="global::System.Environment.Is64BitProcess"/>
        public global::System.Boolean Is64BitProcess
        {
            get;
        }

        /// <inheritdoc cref="global::System.Environment.Is64BitOperatingSystem"/>
        public global::System.Boolean Is64BitOperatingSystem
        {
            get;
        }

        /// <inheritdoc cref="global::System.Environment.HasShutdownStarted"/>
        public global::System.Boolean HasShutdownStarted
        {
            get;
        }

        /// <inheritdoc cref="global::System.Environment.UserName"/>
        public global::System.String UserName
        {
            get;
        }

        /// <inheritdoc cref="global::System.Environment.UserInteractive"/>
        public global::System.Boolean UserInteractive
        {
            get;
        }

        /// <inheritdoc cref="global::System.Environment.UserDomainName"/>
        public global::System.String UserDomainName
        {
            get;
        }

        /// <inheritdoc cref="global::System.Environment.CurrentManagedThreadId"/>
        public global::System.Int32 CurrentManagedThreadId
        {
            get;
        }

        #endregion

        #region function (14)
        /// <inheritdoc cref="global::System.Environment.Exit(System.Int32)"/>
        public global::System.Void Exit(global::System.Int32 exitCode);
        /// <inheritdoc cref="global::System.Environment.GetEnvironmentVariable(System.String)"/>
        public global::System.String GetEnvironmentVariable(global::System.String variable);
        /// <inheritdoc cref="global::System.Environment.GetEnvironmentVariables()"/>
        public global::System.Collections.IDictionary GetEnvironmentVariables();
        /// <inheritdoc cref="global::System.Environment.SetEnvironmentVariable(System.String, System.String)"/>
        public global::System.Void SetEnvironmentVariable(global::System.String variable, global::System.String value);
        /// <inheritdoc cref="global::System.Environment.GetLogicalDrives()"/>
        public global::System.String[] GetLogicalDrives();
        /// <inheritdoc cref="global::System.Environment.GetFolderPath(System.Environment.SpecialFolder)"/>
        public global::System.String GetFolderPath(global::System.Environment.SpecialFolder folder);
        /// <inheritdoc cref="global::System.Environment.GetFolderPath(System.Environment.SpecialFolder, System.Environment.SpecialFolderOption)"/>
        public global::System.String GetFolderPath(global::System.Environment.SpecialFolder folder, global::System.Environment.SpecialFolderOption option);
        /// <inheritdoc cref="global::System.Environment.FailFast(System.String)"/>
        public global::System.Void FailFast(global::System.String message);
        /// <inheritdoc cref="global::System.Environment.FailFast(System.String, System.Exception)"/>
        public global::System.Void FailFast(global::System.String message, global::System.Exception exception);
        /// <inheritdoc cref="global::System.Environment.ExpandEnvironmentVariables(System.String)"/>
        public global::System.String ExpandEnvironmentVariables(global::System.String name);
        /// <inheritdoc cref="global::System.Environment.GetEnvironmentVariable(System.String, System.EnvironmentVariableTarget)"/>
        public global::System.String GetEnvironmentVariable(global::System.String variable, global::System.EnvironmentVariableTarget target);
        /// <inheritdoc cref="global::System.Environment.GetEnvironmentVariables(System.EnvironmentVariableTarget)"/>
        public global::System.Collections.IDictionary GetEnvironmentVariables(global::System.EnvironmentVariableTarget target);
        /// <inheritdoc cref="global::System.Environment.SetEnvironmentVariable(System.String, System.String, System.EnvironmentVariableTarget)"/>
        public global::System.Void SetEnvironmentVariable(global::System.String variable, global::System.String value, global::System.EnvironmentVariableTarget target);
        /// <inheritdoc cref="global::System.Environment.GetCommandLineArgs()"/>
        public global::System.String[] GetCommandLineArgs();
        #endregion
    }

    /// <inheritdoc cref="global::System.Environment"/>
    public class DirectEnvironmentProxy
    {
        #region property (20)
        /// <inheritdoc cref="global::System.Environment.TickCount"/>
        public global::System.Int32 TickCount
        {
            get => global::System.Environment.TickCount;
        }

        /// <inheritdoc cref="global::System.Environment.ExitCode"/>
        public global::System.Int32 ExitCode
        {
            get => global::System.Environment.ExitCode;
            set => global::System.Environment.ExitCode = value;
        }

        /// <inheritdoc cref="global::System.Environment.CommandLine"/>
        public global::System.String CommandLine
        {
            get => global::System.Environment.CommandLine;
        }

        /// <inheritdoc cref="global::System.Environment.CurrentDirectory"/>
        public global::System.String CurrentDirectory
        {
            get => global::System.Environment.CurrentDirectory;
            set => global::System.Environment.CurrentDirectory = value;
        }

        /// <inheritdoc cref="global::System.Environment.SystemDirectory"/>
        public global::System.String SystemDirectory
        {
            get => global::System.Environment.SystemDirectory;
        }

        /// <inheritdoc cref="global::System.Environment.MachineName"/>
        public global::System.String MachineName
        {
            get => global::System.Environment.MachineName;
        }

        /// <inheritdoc cref="global::System.Environment.ProcessorCount"/>
        public global::System.Int32 ProcessorCount
        {
            get => global::System.Environment.ProcessorCount;
        }

        /// <inheritdoc cref="global::System.Environment.SystemPageSize"/>
        public global::System.Int32 SystemPageSize
        {
            get => global::System.Environment.SystemPageSize;
        }

        /// <inheritdoc cref="global::System.Environment.NewLine"/>
        public global::System.String NewLine
        {
            get => global::System.Environment.NewLine;
        }

        /// <inheritdoc cref="global::System.Environment.Version"/>
        public global::System.Version Version
        {
            get => global::System.Environment.Version;
        }

        /// <inheritdoc cref="global::System.Environment.WorkingSet"/>
        public global::System.Int64 WorkingSet
        {
            get => global::System.Environment.WorkingSet;
        }

        /// <inheritdoc cref="global::System.Environment.OSVersion"/>
        public global::System.OperatingSystem OSVersion
        {
            get => global::System.Environment.OSVersion;
        }

        /// <inheritdoc cref="global::System.Environment.StackTrace"/>
        public global::System.String StackTrace
        {
            get => global::System.Environment.StackTrace;
        }

        /// <inheritdoc cref="global::System.Environment.Is64BitProcess"/>
        public global::System.Boolean Is64BitProcess
        {
            get => global::System.Environment.Is64BitProcess;
        }

        /// <inheritdoc cref="global::System.Environment.Is64BitOperatingSystem"/>
        public global::System.Boolean Is64BitOperatingSystem
        {
            get => global::System.Environment.Is64BitOperatingSystem;
        }

        /// <inheritdoc cref="global::System.Environment.HasShutdownStarted"/>
        public global::System.Boolean HasShutdownStarted
        {
            get => global::System.Environment.HasShutdownStarted;
        }

        /// <inheritdoc cref="global::System.Environment.UserName"/>
        public global::System.String UserName
        {
            get => global::System.Environment.UserName;
        }

        /// <inheritdoc cref="global::System.Environment.UserInteractive"/>
        public global::System.Boolean UserInteractive
        {
            get => global::System.Environment.UserInteractive;
        }

        /// <inheritdoc cref="global::System.Environment.UserDomainName"/>
        public global::System.String UserDomainName
        {
            get => global::System.Environment.UserDomainName;
        }

        /// <inheritdoc cref="global::System.Environment.CurrentManagedThreadId"/>
        public global::System.Int32 CurrentManagedThreadId
        {
            get => global::System.Environment.CurrentManagedThreadId;
        }

        #endregion

        #region function (14)
        /// <inheritdoc cref="global::System.Environment.Exit(System.Int32)"/>
        public global::System.Void Exit(global::System.Int32 exitCode) =>
            global::System.Environment.Exit(exitCode)
        ;
        /// <inheritdoc cref="global::System.Environment.GetEnvironmentVariable(System.String)"/>
        public global::System.String GetEnvironmentVariable(global::System.String variable) =>
            global::System.Environment.GetEnvironmentVariable(variable)
        ;
        /// <inheritdoc cref="global::System.Environment.GetEnvironmentVariables()"/>
        public global::System.Collections.IDictionary GetEnvironmentVariables() =>
            global::System.Environment.GetEnvironmentVariables()
        ;
        /// <inheritdoc cref="global::System.Environment.SetEnvironmentVariable(System.String, System.String)"/>
        public global::System.Void SetEnvironmentVariable(global::System.String variable, global::System.String value) =>
            global::System.Environment.SetEnvironmentVariable(variable, value)
        ;
        /// <inheritdoc cref="global::System.Environment.GetLogicalDrives()"/>
        public global::System.String[] GetLogicalDrives() =>
            global::System.Environment.GetLogicalDrives()
        ;
        /// <inheritdoc cref="global::System.Environment.GetFolderPath(System.Environment.SpecialFolder)"/>
        public global::System.String GetFolderPath(global::System.Environment.SpecialFolder folder) =>
            global::System.Environment.GetFolderPath(folder)
        ;
        /// <inheritdoc cref="global::System.Environment.GetFolderPath(System.Environment.SpecialFolder, System.Environment.SpecialFolderOption)"/>
        public global::System.String GetFolderPath(global::System.Environment.SpecialFolder folder, global::System.Environment.SpecialFolderOption option) =>
            global::System.Environment.GetFolderPath(folder, option)
        ;
        /// <inheritdoc cref="global::System.Environment.FailFast(System.String)"/>
        public global::System.Void FailFast(global::System.String message) =>
            global::System.Environment.FailFast(message)
        ;
        /// <inheritdoc cref="global::System.Environment.FailFast(System.String, System.Exception)"/>
        public global::System.Void FailFast(global::System.String message, global::System.Exception exception) =>
            global::System.Environment.FailFast(message, exception)
        ;
        /// <inheritdoc cref="global::System.Environment.ExpandEnvironmentVariables(System.String)"/>
        public global::System.String ExpandEnvironmentVariables(global::System.String name) =>
            global::System.Environment.ExpandEnvironmentVariables(name)
        ;
        /// <inheritdoc cref="global::System.Environment.GetEnvironmentVariable(System.String, System.EnvironmentVariableTarget)"/>
        public global::System.String GetEnvironmentVariable(global::System.String variable, global::System.EnvironmentVariableTarget target) =>
            global::System.Environment.GetEnvironmentVariable(variable, target)
        ;
        /// <inheritdoc cref="global::System.Environment.GetEnvironmentVariables(System.EnvironmentVariableTarget)"/>
        public global::System.Collections.IDictionary GetEnvironmentVariables(global::System.EnvironmentVariableTarget target) =>
            global::System.Environment.GetEnvironmentVariables(target)
        ;
        /// <inheritdoc cref="global::System.Environment.SetEnvironmentVariable(System.String, System.String, System.EnvironmentVariableTarget)"/>
        public global::System.Void SetEnvironmentVariable(global::System.String variable, global::System.String value, global::System.EnvironmentVariableTarget target) =>
            global::System.Environment.SetEnvironmentVariable(variable, value, target)
        ;
        /// <inheritdoc cref="global::System.Environment.GetCommandLineArgs()"/>
        public global::System.String[] GetCommandLineArgs() =>
            global::System.Environment.GetCommandLineArgs()
        ;
        #endregion
    }
}


