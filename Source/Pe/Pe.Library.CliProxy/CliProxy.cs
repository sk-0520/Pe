// <auto-generated>
// [T4] build 2024-11-15 13:29:04Z(UTC)
// </auto-generated>
namespace ContentTypeTextNet.Pe.Library.CliProxy.System
{
    /// <inheritdoc cref="global::System.Environment"/>
    public interface IEnvironmentProxy
    {
        #region property (20)

        /// <inheritdoc cref="global::System.Environment.TickCount"/>
        public int TickCount
        {
            get;
        }

        /// <inheritdoc cref="global::System.Environment.ExitCode"/>
        public int ExitCode
        {
            get;
            set;
        }

        /// <inheritdoc cref="global::System.Environment.CommandLine"/>
        public string CommandLine
        {
            get;
        }

        /// <inheritdoc cref="global::System.Environment.CurrentDirectory"/>
        public string CurrentDirectory
        {
            get;
            set;
        }

        /// <inheritdoc cref="global::System.Environment.SystemDirectory"/>
        public string SystemDirectory
        {
            get;
        }

        /// <inheritdoc cref="global::System.Environment.MachineName"/>
        public string MachineName
        {
            get;
        }

        /// <inheritdoc cref="global::System.Environment.ProcessorCount"/>
        public int ProcessorCount
        {
            get;
        }

        /// <inheritdoc cref="global::System.Environment.SystemPageSize"/>
        public int SystemPageSize
        {
            get;
        }

        /// <inheritdoc cref="global::System.Environment.NewLine"/>
        public string NewLine
        {
            get;
        }

        /// <inheritdoc cref="global::System.Environment.Version"/>
        public global::System.Version Version
        {
            get;
        }

        /// <inheritdoc cref="global::System.Environment.WorkingSet"/>
        public long WorkingSet
        {
            get;
        }

        /// <inheritdoc cref="global::System.Environment.OSVersion"/>
        public global::System.OperatingSystem OSVersion
        {
            get;
        }

        /// <inheritdoc cref="global::System.Environment.StackTrace"/>
        public string StackTrace
        {
            get;
        }

        /// <inheritdoc cref="global::System.Environment.Is64BitProcess"/>
        public bool Is64BitProcess
        {
            get;
        }

        /// <inheritdoc cref="global::System.Environment.Is64BitOperatingSystem"/>
        public bool Is64BitOperatingSystem
        {
            get;
        }

        /// <inheritdoc cref="global::System.Environment.HasShutdownStarted"/>
        public bool HasShutdownStarted
        {
            get;
        }

        /// <inheritdoc cref="global::System.Environment.UserName"/>
        public string UserName
        {
            get;
        }

        /// <inheritdoc cref="global::System.Environment.UserInteractive"/>
        public bool UserInteractive
        {
            get;
        }

        /// <inheritdoc cref="global::System.Environment.UserDomainName"/>
        public string UserDomainName
        {
            get;
        }

        /// <inheritdoc cref="global::System.Environment.CurrentManagedThreadId"/>
        public int CurrentManagedThreadId
        {
            get;
        }


        #endregion

        #region function (14)

        /// <inheritdoc cref="global::System.Environment.Exit(int)"/>
        public void Exit(int exitCode);
        /// <inheritdoc cref="global::System.Environment.GetEnvironmentVariable(string)"/>
        public string GetEnvironmentVariable(string variable);
        /// <inheritdoc cref="global::System.Environment.GetEnvironmentVariables()"/>
        public global::System.Collections.IDictionary GetEnvironmentVariables();
        /// <inheritdoc cref="global::System.Environment.SetEnvironmentVariable(string, string)"/>
        public void SetEnvironmentVariable(string variable, string value);
        /// <inheritdoc cref="global::System.Environment.GetLogicalDrives()"/>
        public string[] GetLogicalDrives();
        /// <inheritdoc cref="global::System.Environment.GetFolderPath(global::System.Environment.SpecialFolder)"/>
        public string GetFolderPath(global::System.Environment.SpecialFolder folder);
        /// <inheritdoc cref="global::System.Environment.GetFolderPath(global::System.Environment.SpecialFolder, global::System.Environment.SpecialFolderOption)"/>
        public string GetFolderPath(global::System.Environment.SpecialFolder folder, global::System.Environment.SpecialFolderOption option);
        /// <inheritdoc cref="global::System.Environment.FailFast(string)"/>
        public void FailFast(string message);
        /// <inheritdoc cref="global::System.Environment.FailFast(string, global::System.Exception)"/>
        public void FailFast(string message, global::System.Exception exception);
        /// <inheritdoc cref="global::System.Environment.ExpandEnvironmentVariables(string)"/>
        public string ExpandEnvironmentVariables(string name);
        /// <inheritdoc cref="global::System.Environment.GetEnvironmentVariable(string, global::System.EnvironmentVariableTarget)"/>
        public string GetEnvironmentVariable(string variable, global::System.EnvironmentVariableTarget target);
        /// <inheritdoc cref="global::System.Environment.GetEnvironmentVariables(global::System.EnvironmentVariableTarget)"/>
        public global::System.Collections.IDictionary GetEnvironmentVariables(global::System.EnvironmentVariableTarget target);
        /// <inheritdoc cref="global::System.Environment.SetEnvironmentVariable(string, string, global::System.EnvironmentVariableTarget)"/>
        public void SetEnvironmentVariable(string variable, string value, global::System.EnvironmentVariableTarget target);
        /// <inheritdoc cref="global::System.Environment.GetCommandLineArgs()"/>
        public string[] GetCommandLineArgs();

        #endregion
    }

    /// <inheritdoc cref="global::System.Environment"/>
    public class DirectEnvironmentProxy
    {
        #region property (20)

        /// <inheritdoc cref="global::System.Environment.TickCount"/>
        public int TickCount
        {
            get => global::System.Environment.TickCount;
        }
        /// <inheritdoc cref="global::System.Environment.ExitCode"/>
        public int ExitCode
        {
            get => global::System.Environment.ExitCode;
            set => global::System.Environment.ExitCode = value;
        }
        /// <inheritdoc cref="global::System.Environment.CommandLine"/>
        public string CommandLine
        {
            get => global::System.Environment.CommandLine;
        }
        /// <inheritdoc cref="global::System.Environment.CurrentDirectory"/>
        public string CurrentDirectory
        {
            get => global::System.Environment.CurrentDirectory;
            set => global::System.Environment.CurrentDirectory = value;
        }
        /// <inheritdoc cref="global::System.Environment.SystemDirectory"/>
        public string SystemDirectory
        {
            get => global::System.Environment.SystemDirectory;
        }
        /// <inheritdoc cref="global::System.Environment.MachineName"/>
        public string MachineName
        {
            get => global::System.Environment.MachineName;
        }
        /// <inheritdoc cref="global::System.Environment.ProcessorCount"/>
        public int ProcessorCount
        {
            get => global::System.Environment.ProcessorCount;
        }
        /// <inheritdoc cref="global::System.Environment.SystemPageSize"/>
        public int SystemPageSize
        {
            get => global::System.Environment.SystemPageSize;
        }
        /// <inheritdoc cref="global::System.Environment.NewLine"/>
        public string NewLine
        {
            get => global::System.Environment.NewLine;
        }
        /// <inheritdoc cref="global::System.Environment.Version"/>
        public global::System.Version Version
        {
            get => global::System.Environment.Version;
        }
        /// <inheritdoc cref="global::System.Environment.WorkingSet"/>
        public long WorkingSet
        {
            get => global::System.Environment.WorkingSet;
        }
        /// <inheritdoc cref="global::System.Environment.OSVersion"/>
        public global::System.OperatingSystem OSVersion
        {
            get => global::System.Environment.OSVersion;
        }
        /// <inheritdoc cref="global::System.Environment.StackTrace"/>
        public string StackTrace
        {
            get => global::System.Environment.StackTrace;
        }
        /// <inheritdoc cref="global::System.Environment.Is64BitProcess"/>
        public bool Is64BitProcess
        {
            get => global::System.Environment.Is64BitProcess;
        }
        /// <inheritdoc cref="global::System.Environment.Is64BitOperatingSystem"/>
        public bool Is64BitOperatingSystem
        {
            get => global::System.Environment.Is64BitOperatingSystem;
        }
        /// <inheritdoc cref="global::System.Environment.HasShutdownStarted"/>
        public bool HasShutdownStarted
        {
            get => global::System.Environment.HasShutdownStarted;
        }
        /// <inheritdoc cref="global::System.Environment.UserName"/>
        public string UserName
        {
            get => global::System.Environment.UserName;
        }
        /// <inheritdoc cref="global::System.Environment.UserInteractive"/>
        public bool UserInteractive
        {
            get => global::System.Environment.UserInteractive;
        }
        /// <inheritdoc cref="global::System.Environment.UserDomainName"/>
        public string UserDomainName
        {
            get => global::System.Environment.UserDomainName;
        }
        /// <inheritdoc cref="global::System.Environment.CurrentManagedThreadId"/>
        public int CurrentManagedThreadId
        {
            get => global::System.Environment.CurrentManagedThreadId;
        }
        #endregion

        #region function (14)

        /// <inheritdoc cref="global::System.Environment.Exit(int)"/>
        public void Exit(int exitCode) =>
            global::System.Environment.Exit(exitCode)
        ;
        /// <inheritdoc cref="global::System.Environment.GetEnvironmentVariable(string)"/>
        public string GetEnvironmentVariable(string variable) =>
            global::System.Environment.GetEnvironmentVariable(variable)
        ;
        /// <inheritdoc cref="global::System.Environment.GetEnvironmentVariables()"/>
        public global::System.Collections.IDictionary GetEnvironmentVariables() =>
            global::System.Environment.GetEnvironmentVariables()
        ;
        /// <inheritdoc cref="global::System.Environment.SetEnvironmentVariable(string, string)"/>
        public void SetEnvironmentVariable(string variable, string value) =>
            global::System.Environment.SetEnvironmentVariable(variable, value)
        ;
        /// <inheritdoc cref="global::System.Environment.GetLogicalDrives()"/>
        public string[] GetLogicalDrives() =>
            global::System.Environment.GetLogicalDrives()
        ;
        /// <inheritdoc cref="global::System.Environment.GetFolderPath(global::System.Environment.SpecialFolder)"/>
        public string GetFolderPath(global::System.Environment.SpecialFolder folder) =>
            global::System.Environment.GetFolderPath(folder)
        ;
        /// <inheritdoc cref="global::System.Environment.GetFolderPath(global::System.Environment.SpecialFolder, global::System.Environment.SpecialFolderOption)"/>
        public string GetFolderPath(global::System.Environment.SpecialFolder folder, global::System.Environment.SpecialFolderOption option) =>
            global::System.Environment.GetFolderPath(folder, option)
        ;
        /// <inheritdoc cref="global::System.Environment.FailFast(string)"/>
        public void FailFast(string message) =>
            global::System.Environment.FailFast(message)
        ;
        /// <inheritdoc cref="global::System.Environment.FailFast(string, global::System.Exception)"/>
        public void FailFast(string message, global::System.Exception exception) =>
            global::System.Environment.FailFast(message, exception)
        ;
        /// <inheritdoc cref="global::System.Environment.ExpandEnvironmentVariables(string)"/>
        public string ExpandEnvironmentVariables(string name) =>
            global::System.Environment.ExpandEnvironmentVariables(name)
        ;
        /// <inheritdoc cref="global::System.Environment.GetEnvironmentVariable(string, global::System.EnvironmentVariableTarget)"/>
        public string GetEnvironmentVariable(string variable, global::System.EnvironmentVariableTarget target) =>
            global::System.Environment.GetEnvironmentVariable(variable, target)
        ;
        /// <inheritdoc cref="global::System.Environment.GetEnvironmentVariables(global::System.EnvironmentVariableTarget)"/>
        public global::System.Collections.IDictionary GetEnvironmentVariables(global::System.EnvironmentVariableTarget target) =>
            global::System.Environment.GetEnvironmentVariables(target)
        ;
        /// <inheritdoc cref="global::System.Environment.SetEnvironmentVariable(string, string, global::System.EnvironmentVariableTarget)"/>
        public void SetEnvironmentVariable(string variable, string value, global::System.EnvironmentVariableTarget target) =>
            global::System.Environment.SetEnvironmentVariable(variable, value, target)
        ;
        /// <inheritdoc cref="global::System.Environment.GetCommandLineArgs()"/>
        public string[] GetCommandLineArgs() =>
            global::System.Environment.GetCommandLineArgs()
        ;

        #endregion
    }
}
namespace ContentTypeTextNet.Pe.Library.CliProxy.System.IO
{
    /// <inheritdoc cref="global::System.IO.File"/>
    public interface IFileProxy
    {

        #region function (56)

        /// <inheritdoc cref="global::System.IO.File.OpenText(string)"/>
        public global::System.IO.StreamReader OpenText(string path);
        /// <inheritdoc cref="global::System.IO.File.CreateText(string)"/>
        public global::System.IO.StreamWriter CreateText(string path);
        /// <inheritdoc cref="global::System.IO.File.AppendText(string)"/>
        public global::System.IO.StreamWriter AppendText(string path);
        /// <inheritdoc cref="global::System.IO.File.Copy(string, string)"/>
        public void Copy(string sourceFileName, string destFileName);
        /// <inheritdoc cref="global::System.IO.File.Copy(string, string, bool)"/>
        public void Copy(string sourceFileName, string destFileName, bool overwrite);
        /// <inheritdoc cref="global::System.IO.File.Create(string)"/>
        public global::System.IO.FileStream Create(string path);
        /// <inheritdoc cref="global::System.IO.File.Create(string, int)"/>
        public global::System.IO.FileStream Create(string path, int bufferSize);
        /// <inheritdoc cref="global::System.IO.File.Create(string, int, global::System.IO.FileOptions)"/>
        public global::System.IO.FileStream Create(string path, int bufferSize, global::System.IO.FileOptions options);
        /// <inheritdoc cref="global::System.IO.File.Create(string, int, global::System.IO.FileOptions, global::System.Security.AccessControl.FileSecurity)"/>
        public global::System.IO.FileStream Create(string path, int bufferSize, global::System.IO.FileOptions options, global::System.Security.AccessControl.FileSecurity fileSecurity);
        /// <inheritdoc cref="global::System.IO.File.Delete(string)"/>
        public void Delete(string path);
        /// <inheritdoc cref="global::System.IO.File.Exists(string)"/>
        public bool Exists(string path);
        /// <inheritdoc cref="global::System.IO.File.Open(string, global::System.IO.FileMode)"/>
        public global::System.IO.FileStream Open(string path, global::System.IO.FileMode mode);
        /// <inheritdoc cref="global::System.IO.File.Open(string, global::System.IO.FileMode, global::System.IO.FileAccess)"/>
        public global::System.IO.FileStream Open(string path, global::System.IO.FileMode mode, global::System.IO.FileAccess access);
        /// <inheritdoc cref="global::System.IO.File.Open(string, global::System.IO.FileMode, global::System.IO.FileAccess, global::System.IO.FileShare)"/>
        public global::System.IO.FileStream Open(string path, global::System.IO.FileMode mode, global::System.IO.FileAccess access, global::System.IO.FileShare share);
        /// <inheritdoc cref="global::System.IO.File.SetCreationTime(string, global::System.DateTime)"/>
        public void SetCreationTime(string path, global::System.DateTime creationTime);
        /// <inheritdoc cref="global::System.IO.File.SetCreationTimeUtc(string, global::System.DateTime)"/>
        public void SetCreationTimeUtc(string path, global::System.DateTime creationTimeUtc);
        /// <inheritdoc cref="global::System.IO.File.GetCreationTime(string)"/>
        public global::System.DateTime GetCreationTime(string path);
        /// <inheritdoc cref="global::System.IO.File.GetCreationTimeUtc(string)"/>
        public global::System.DateTime GetCreationTimeUtc(string path);
        /// <inheritdoc cref="global::System.IO.File.SetLastAccessTime(string, global::System.DateTime)"/>
        public void SetLastAccessTime(string path, global::System.DateTime lastAccessTime);
        /// <inheritdoc cref="global::System.IO.File.SetLastAccessTimeUtc(string, global::System.DateTime)"/>
        public void SetLastAccessTimeUtc(string path, global::System.DateTime lastAccessTimeUtc);
        /// <inheritdoc cref="global::System.IO.File.GetLastAccessTime(string)"/>
        public global::System.DateTime GetLastAccessTime(string path);
        /// <inheritdoc cref="global::System.IO.File.GetLastAccessTimeUtc(string)"/>
        public global::System.DateTime GetLastAccessTimeUtc(string path);
        /// <inheritdoc cref="global::System.IO.File.SetLastWriteTime(string, global::System.DateTime)"/>
        public void SetLastWriteTime(string path, global::System.DateTime lastWriteTime);
        /// <inheritdoc cref="global::System.IO.File.SetLastWriteTimeUtc(string, global::System.DateTime)"/>
        public void SetLastWriteTimeUtc(string path, global::System.DateTime lastWriteTimeUtc);
        /// <inheritdoc cref="global::System.IO.File.GetLastWriteTime(string)"/>
        public global::System.DateTime GetLastWriteTime(string path);
        /// <inheritdoc cref="global::System.IO.File.GetLastWriteTimeUtc(string)"/>
        public global::System.DateTime GetLastWriteTimeUtc(string path);
        /// <inheritdoc cref="global::System.IO.File.GetAttributes(string)"/>
        public global::System.IO.FileAttributes GetAttributes(string path);
        /// <inheritdoc cref="global::System.IO.File.SetAttributes(string, global::System.IO.FileAttributes)"/>
        public void SetAttributes(string path, global::System.IO.FileAttributes fileAttributes);
        /// <inheritdoc cref="global::System.IO.File.GetAccessControl(string)"/>
        public global::System.Security.AccessControl.FileSecurity GetAccessControl(string path);
        /// <inheritdoc cref="global::System.IO.File.GetAccessControl(string, global::System.Security.AccessControl.AccessControlSections)"/>
        public global::System.Security.AccessControl.FileSecurity GetAccessControl(string path, global::System.Security.AccessControl.AccessControlSections includeSections);
        /// <inheritdoc cref="global::System.IO.File.SetAccessControl(string, global::System.Security.AccessControl.FileSecurity)"/>
        public void SetAccessControl(string path, global::System.Security.AccessControl.FileSecurity fileSecurity);
        /// <inheritdoc cref="global::System.IO.File.OpenRead(string)"/>
        public global::System.IO.FileStream OpenRead(string path);
        /// <inheritdoc cref="global::System.IO.File.OpenWrite(string)"/>
        public global::System.IO.FileStream OpenWrite(string path);
        /// <inheritdoc cref="global::System.IO.File.ReadAllText(string)"/>
        public string ReadAllText(string path);
        /// <inheritdoc cref="global::System.IO.File.ReadAllText(string, global::System.Text.Encoding)"/>
        public string ReadAllText(string path, global::System.Text.Encoding encoding);
        /// <inheritdoc cref="global::System.IO.File.WriteAllText(string, string)"/>
        public void WriteAllText(string path, string contents);
        /// <inheritdoc cref="global::System.IO.File.WriteAllText(string, string, global::System.Text.Encoding)"/>
        public void WriteAllText(string path, string contents, global::System.Text.Encoding encoding);
        /// <inheritdoc cref="global::System.IO.File.ReadAllBytes(string)"/>
        public global::System.Byte[] ReadAllBytes(string path);
        /// <inheritdoc cref="global::System.IO.File.WriteAllBytes(string, global::System.Byte[])"/>
        public void WriteAllBytes(string path, global::System.Byte[] bytes);
        /// <inheritdoc cref="global::System.IO.File.ReadAllLines(string)"/>
        public string[] ReadAllLines(string path);
        /// <inheritdoc cref="global::System.IO.File.ReadAllLines(string, global::System.Text.Encoding)"/>
        public string[] ReadAllLines(string path, global::System.Text.Encoding encoding);
        /// <inheritdoc cref="global::System.IO.File.ReadLines(string)"/>
        public global::System.Collections.Generic.IEnumerable<string> ReadLines(string path);
        /// <inheritdoc cref="global::System.IO.File.ReadLines(string, global::System.Text.Encoding)"/>
        public global::System.Collections.Generic.IEnumerable<string> ReadLines(string path, global::System.Text.Encoding encoding);
        /// <inheritdoc cref="global::System.IO.File.WriteAllLines(string, string[])"/>
        public void WriteAllLines(string path, string[] contents);
        /// <inheritdoc cref="global::System.IO.File.WriteAllLines(string, string[], global::System.Text.Encoding)"/>
        public void WriteAllLines(string path, string[] contents, global::System.Text.Encoding encoding);
        /// <inheritdoc cref="global::System.IO.File.WriteAllLines(string, global::System.Collections.Generic.IEnumerable<string>)"/>
        public void WriteAllLines(string path, global::System.Collections.Generic.IEnumerable<string> contents);
        /// <inheritdoc cref="global::System.IO.File.WriteAllLines(string, global::System.Collections.Generic.IEnumerable<string>, global::System.Text.Encoding)"/>
        public void WriteAllLines(string path, global::System.Collections.Generic.IEnumerable<string> contents, global::System.Text.Encoding encoding);
        /// <inheritdoc cref="global::System.IO.File.AppendAllText(string, string)"/>
        public void AppendAllText(string path, string contents);
        /// <inheritdoc cref="global::System.IO.File.AppendAllText(string, string, global::System.Text.Encoding)"/>
        public void AppendAllText(string path, string contents, global::System.Text.Encoding encoding);
        /// <inheritdoc cref="global::System.IO.File.AppendAllLines(string, global::System.Collections.Generic.IEnumerable<string>)"/>
        public void AppendAllLines(string path, global::System.Collections.Generic.IEnumerable<string> contents);
        /// <inheritdoc cref="global::System.IO.File.AppendAllLines(string, global::System.Collections.Generic.IEnumerable<string>, global::System.Text.Encoding)"/>
        public void AppendAllLines(string path, global::System.Collections.Generic.IEnumerable<string> contents, global::System.Text.Encoding encoding);
        /// <inheritdoc cref="global::System.IO.File.Move(string, string)"/>
        public void Move(string sourceFileName, string destFileName);
        /// <inheritdoc cref="global::System.IO.File.Replace(string, string, string)"/>
        public void Replace(string sourceFileName, string destinationFileName, string destinationBackupFileName);
        /// <inheritdoc cref="global::System.IO.File.Replace(string, string, string, bool)"/>
        public void Replace(string sourceFileName, string destinationFileName, string destinationBackupFileName, bool ignoreMetadataErrors);
        /// <inheritdoc cref="global::System.IO.File.Decrypt(string)"/>
        public void Decrypt(string path);
        /// <inheritdoc cref="global::System.IO.File.Encrypt(string)"/>
        public void Encrypt(string path);

        #endregion
    }

    /// <inheritdoc cref="global::System.IO.File"/>
    public class DirectFileProxy
    {

        #region function (56)

        /// <inheritdoc cref="global::System.IO.File.OpenText(string)"/>
        public global::System.IO.StreamReader OpenText(string path) =>
            global::System.IO.File.OpenText(path)
        ;
        /// <inheritdoc cref="global::System.IO.File.CreateText(string)"/>
        public global::System.IO.StreamWriter CreateText(string path) =>
            global::System.IO.File.CreateText(path)
        ;
        /// <inheritdoc cref="global::System.IO.File.AppendText(string)"/>
        public global::System.IO.StreamWriter AppendText(string path) =>
            global::System.IO.File.AppendText(path)
        ;
        /// <inheritdoc cref="global::System.IO.File.Copy(string, string)"/>
        public void Copy(string sourceFileName, string destFileName) =>
            global::System.IO.File.Copy(sourceFileName, destFileName)
        ;
        /// <inheritdoc cref="global::System.IO.File.Copy(string, string, bool)"/>
        public void Copy(string sourceFileName, string destFileName, bool overwrite) =>
            global::System.IO.File.Copy(sourceFileName, destFileName, overwrite)
        ;
        /// <inheritdoc cref="global::System.IO.File.Create(string)"/>
        public global::System.IO.FileStream Create(string path) =>
            global::System.IO.File.Create(path)
        ;
        /// <inheritdoc cref="global::System.IO.File.Create(string, int)"/>
        public global::System.IO.FileStream Create(string path, int bufferSize) =>
            global::System.IO.File.Create(path, bufferSize)
        ;
        /// <inheritdoc cref="global::System.IO.File.Create(string, int, global::System.IO.FileOptions)"/>
        public global::System.IO.FileStream Create(string path, int bufferSize, global::System.IO.FileOptions options) =>
            global::System.IO.File.Create(path, bufferSize, options)
        ;
        /// <inheritdoc cref="global::System.IO.File.Create(string, int, global::System.IO.FileOptions, global::System.Security.AccessControl.FileSecurity)"/>
        public global::System.IO.FileStream Create(string path, int bufferSize, global::System.IO.FileOptions options, global::System.Security.AccessControl.FileSecurity fileSecurity) =>
            global::System.IO.File.Create(path, bufferSize, options, fileSecurity)
        ;
        /// <inheritdoc cref="global::System.IO.File.Delete(string)"/>
        public void Delete(string path) =>
            global::System.IO.File.Delete(path)
        ;
        /// <inheritdoc cref="global::System.IO.File.Exists(string)"/>
        public bool Exists(string path) =>
            global::System.IO.File.Exists(path)
        ;
        /// <inheritdoc cref="global::System.IO.File.Open(string, global::System.IO.FileMode)"/>
        public global::System.IO.FileStream Open(string path, global::System.IO.FileMode mode) =>
            global::System.IO.File.Open(path, mode)
        ;
        /// <inheritdoc cref="global::System.IO.File.Open(string, global::System.IO.FileMode, global::System.IO.FileAccess)"/>
        public global::System.IO.FileStream Open(string path, global::System.IO.FileMode mode, global::System.IO.FileAccess access) =>
            global::System.IO.File.Open(path, mode, access)
        ;
        /// <inheritdoc cref="global::System.IO.File.Open(string, global::System.IO.FileMode, global::System.IO.FileAccess, global::System.IO.FileShare)"/>
        public global::System.IO.FileStream Open(string path, global::System.IO.FileMode mode, global::System.IO.FileAccess access, global::System.IO.FileShare share) =>
            global::System.IO.File.Open(path, mode, access, share)
        ;
        /// <inheritdoc cref="global::System.IO.File.SetCreationTime(string, global::System.DateTime)"/>
        public void SetCreationTime(string path, global::System.DateTime creationTime) =>
            global::System.IO.File.SetCreationTime(path, creationTime)
        ;
        /// <inheritdoc cref="global::System.IO.File.SetCreationTimeUtc(string, global::System.DateTime)"/>
        public void SetCreationTimeUtc(string path, global::System.DateTime creationTimeUtc) =>
            global::System.IO.File.SetCreationTimeUtc(path, creationTimeUtc)
        ;
        /// <inheritdoc cref="global::System.IO.File.GetCreationTime(string)"/>
        public global::System.DateTime GetCreationTime(string path) =>
            global::System.IO.File.GetCreationTime(path)
        ;
        /// <inheritdoc cref="global::System.IO.File.GetCreationTimeUtc(string)"/>
        public global::System.DateTime GetCreationTimeUtc(string path) =>
            global::System.IO.File.GetCreationTimeUtc(path)
        ;
        /// <inheritdoc cref="global::System.IO.File.SetLastAccessTime(string, global::System.DateTime)"/>
        public void SetLastAccessTime(string path, global::System.DateTime lastAccessTime) =>
            global::System.IO.File.SetLastAccessTime(path, lastAccessTime)
        ;
        /// <inheritdoc cref="global::System.IO.File.SetLastAccessTimeUtc(string, global::System.DateTime)"/>
        public void SetLastAccessTimeUtc(string path, global::System.DateTime lastAccessTimeUtc) =>
            global::System.IO.File.SetLastAccessTimeUtc(path, lastAccessTimeUtc)
        ;
        /// <inheritdoc cref="global::System.IO.File.GetLastAccessTime(string)"/>
        public global::System.DateTime GetLastAccessTime(string path) =>
            global::System.IO.File.GetLastAccessTime(path)
        ;
        /// <inheritdoc cref="global::System.IO.File.GetLastAccessTimeUtc(string)"/>
        public global::System.DateTime GetLastAccessTimeUtc(string path) =>
            global::System.IO.File.GetLastAccessTimeUtc(path)
        ;
        /// <inheritdoc cref="global::System.IO.File.SetLastWriteTime(string, global::System.DateTime)"/>
        public void SetLastWriteTime(string path, global::System.DateTime lastWriteTime) =>
            global::System.IO.File.SetLastWriteTime(path, lastWriteTime)
        ;
        /// <inheritdoc cref="global::System.IO.File.SetLastWriteTimeUtc(string, global::System.DateTime)"/>
        public void SetLastWriteTimeUtc(string path, global::System.DateTime lastWriteTimeUtc) =>
            global::System.IO.File.SetLastWriteTimeUtc(path, lastWriteTimeUtc)
        ;
        /// <inheritdoc cref="global::System.IO.File.GetLastWriteTime(string)"/>
        public global::System.DateTime GetLastWriteTime(string path) =>
            global::System.IO.File.GetLastWriteTime(path)
        ;
        /// <inheritdoc cref="global::System.IO.File.GetLastWriteTimeUtc(string)"/>
        public global::System.DateTime GetLastWriteTimeUtc(string path) =>
            global::System.IO.File.GetLastWriteTimeUtc(path)
        ;
        /// <inheritdoc cref="global::System.IO.File.GetAttributes(string)"/>
        public global::System.IO.FileAttributes GetAttributes(string path) =>
            global::System.IO.File.GetAttributes(path)
        ;
        /// <inheritdoc cref="global::System.IO.File.SetAttributes(string, global::System.IO.FileAttributes)"/>
        public void SetAttributes(string path, global::System.IO.FileAttributes fileAttributes) =>
            global::System.IO.File.SetAttributes(path, fileAttributes)
        ;
        /// <inheritdoc cref="global::System.IO.File.GetAccessControl(string)"/>
        public global::System.Security.AccessControl.FileSecurity GetAccessControl(string path) =>
            global::System.IO.File.GetAccessControl(path)
        ;
        /// <inheritdoc cref="global::System.IO.File.GetAccessControl(string, global::System.Security.AccessControl.AccessControlSections)"/>
        public global::System.Security.AccessControl.FileSecurity GetAccessControl(string path, global::System.Security.AccessControl.AccessControlSections includeSections) =>
            global::System.IO.File.GetAccessControl(path, includeSections)
        ;
        /// <inheritdoc cref="global::System.IO.File.SetAccessControl(string, global::System.Security.AccessControl.FileSecurity)"/>
        public void SetAccessControl(string path, global::System.Security.AccessControl.FileSecurity fileSecurity) =>
            global::System.IO.File.SetAccessControl(path, fileSecurity)
        ;
        /// <inheritdoc cref="global::System.IO.File.OpenRead(string)"/>
        public global::System.IO.FileStream OpenRead(string path) =>
            global::System.IO.File.OpenRead(path)
        ;
        /// <inheritdoc cref="global::System.IO.File.OpenWrite(string)"/>
        public global::System.IO.FileStream OpenWrite(string path) =>
            global::System.IO.File.OpenWrite(path)
        ;
        /// <inheritdoc cref="global::System.IO.File.ReadAllText(string)"/>
        public string ReadAllText(string path) =>
            global::System.IO.File.ReadAllText(path)
        ;
        /// <inheritdoc cref="global::System.IO.File.ReadAllText(string, global::System.Text.Encoding)"/>
        public string ReadAllText(string path, global::System.Text.Encoding encoding) =>
            global::System.IO.File.ReadAllText(path, encoding)
        ;
        /// <inheritdoc cref="global::System.IO.File.WriteAllText(string, string)"/>
        public void WriteAllText(string path, string contents) =>
            global::System.IO.File.WriteAllText(path, contents)
        ;
        /// <inheritdoc cref="global::System.IO.File.WriteAllText(string, string, global::System.Text.Encoding)"/>
        public void WriteAllText(string path, string contents, global::System.Text.Encoding encoding) =>
            global::System.IO.File.WriteAllText(path, contents, encoding)
        ;
        /// <inheritdoc cref="global::System.IO.File.ReadAllBytes(string)"/>
        public global::System.Byte[] ReadAllBytes(string path) =>
            global::System.IO.File.ReadAllBytes(path)
        ;
        /// <inheritdoc cref="global::System.IO.File.WriteAllBytes(string, global::System.Byte[])"/>
        public void WriteAllBytes(string path, global::System.Byte[] bytes) =>
            global::System.IO.File.WriteAllBytes(path, bytes)
        ;
        /// <inheritdoc cref="global::System.IO.File.ReadAllLines(string)"/>
        public string[] ReadAllLines(string path) =>
            global::System.IO.File.ReadAllLines(path)
        ;
        /// <inheritdoc cref="global::System.IO.File.ReadAllLines(string, global::System.Text.Encoding)"/>
        public string[] ReadAllLines(string path, global::System.Text.Encoding encoding) =>
            global::System.IO.File.ReadAllLines(path, encoding)
        ;
        /// <inheritdoc cref="global::System.IO.File.ReadLines(string)"/>
        public global::System.Collections.Generic.IEnumerable<string> ReadLines(string path) =>
            global::System.IO.File.ReadLines(path)
        ;
        /// <inheritdoc cref="global::System.IO.File.ReadLines(string, global::System.Text.Encoding)"/>
        public global::System.Collections.Generic.IEnumerable<string> ReadLines(string path, global::System.Text.Encoding encoding) =>
            global::System.IO.File.ReadLines(path, encoding)
        ;
        /// <inheritdoc cref="global::System.IO.File.WriteAllLines(string, string[])"/>
        public void WriteAllLines(string path, string[] contents) =>
            global::System.IO.File.WriteAllLines(path, contents)
        ;
        /// <inheritdoc cref="global::System.IO.File.WriteAllLines(string, string[], global::System.Text.Encoding)"/>
        public void WriteAllLines(string path, string[] contents, global::System.Text.Encoding encoding) =>
            global::System.IO.File.WriteAllLines(path, contents, encoding)
        ;
        /// <inheritdoc cref="global::System.IO.File.WriteAllLines(string, global::System.Collections.Generic.IEnumerable<string>)"/>
        public void WriteAllLines(string path, global::System.Collections.Generic.IEnumerable<string> contents) =>
            global::System.IO.File.WriteAllLines(path, contents)
        ;
        /// <inheritdoc cref="global::System.IO.File.WriteAllLines(string, global::System.Collections.Generic.IEnumerable<string>, global::System.Text.Encoding)"/>
        public void WriteAllLines(string path, global::System.Collections.Generic.IEnumerable<string> contents, global::System.Text.Encoding encoding) =>
            global::System.IO.File.WriteAllLines(path, contents, encoding)
        ;
        /// <inheritdoc cref="global::System.IO.File.AppendAllText(string, string)"/>
        public void AppendAllText(string path, string contents) =>
            global::System.IO.File.AppendAllText(path, contents)
        ;
        /// <inheritdoc cref="global::System.IO.File.AppendAllText(string, string, global::System.Text.Encoding)"/>
        public void AppendAllText(string path, string contents, global::System.Text.Encoding encoding) =>
            global::System.IO.File.AppendAllText(path, contents, encoding)
        ;
        /// <inheritdoc cref="global::System.IO.File.AppendAllLines(string, global::System.Collections.Generic.IEnumerable<string>)"/>
        public void AppendAllLines(string path, global::System.Collections.Generic.IEnumerable<string> contents) =>
            global::System.IO.File.AppendAllLines(path, contents)
        ;
        /// <inheritdoc cref="global::System.IO.File.AppendAllLines(string, global::System.Collections.Generic.IEnumerable<string>, global::System.Text.Encoding)"/>
        public void AppendAllLines(string path, global::System.Collections.Generic.IEnumerable<string> contents, global::System.Text.Encoding encoding) =>
            global::System.IO.File.AppendAllLines(path, contents, encoding)
        ;
        /// <inheritdoc cref="global::System.IO.File.Move(string, string)"/>
        public void Move(string sourceFileName, string destFileName) =>
            global::System.IO.File.Move(sourceFileName, destFileName)
        ;
        /// <inheritdoc cref="global::System.IO.File.Replace(string, string, string)"/>
        public void Replace(string sourceFileName, string destinationFileName, string destinationBackupFileName) =>
            global::System.IO.File.Replace(sourceFileName, destinationFileName, destinationBackupFileName)
        ;
        /// <inheritdoc cref="global::System.IO.File.Replace(string, string, string, bool)"/>
        public void Replace(string sourceFileName, string destinationFileName, string destinationBackupFileName, bool ignoreMetadataErrors) =>
            global::System.IO.File.Replace(sourceFileName, destinationFileName, destinationBackupFileName, ignoreMetadataErrors)
        ;
        /// <inheritdoc cref="global::System.IO.File.Decrypt(string)"/>
        public void Decrypt(string path) =>
            global::System.IO.File.Decrypt(path)
        ;
        /// <inheritdoc cref="global::System.IO.File.Encrypt(string)"/>
        public void Encrypt(string path) =>
            global::System.IO.File.Encrypt(path)
        ;

        #endregion
    }
}


