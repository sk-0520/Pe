<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Reflection" #>
<#@ output extension=".cs" #>
<#
var targetDefines = new [] {
    "System.Environment",
};
#>
// <auto-generated>
// [T4] build <#= DateTime.UtcNow.ToString("u") #>(UTC)
// </auto-generated>
<#
foreach(var targetDefine in targetDefines) {
    var targetType = Type.GetType(targetDefine, true);
#>
namespace ContentTypeTextNet.Pe.Library.CliProxy.<#= targetType.Namespace #>
{
<#
    var originalClassName = targetType.Name;
    var originalClassFulleName = "global::" + targetType.FullName;
    var proxyInterfaceName = $"I{originalClassName}Proxy";
    var directProxyName = $"Direct{originalClassName}Proxy";
    var properties = targetType.GetProperties(BindingFlags.Public | BindingFlags.Static | BindingFlags.GetProperty | BindingFlags.SetProperty);
    var methods = targetType.GetMethods(BindingFlags.Public | BindingFlags.Static | BindingFlags.InvokeMethod);
#>
    /// <inheritdoc cref="<#= originalClassFulleName #>"/>
    public interface <#= proxyInterfaceName #>
    {
<# if(properties.Any()) { #>
        #region property (<#= properties.Length #>)
<# foreach(var proeprty in properties) { #>
        /// <inheritdoc cref="<#= originalClassFulleName #>.<#= proeprty.Name #>"/>
        public <#= proeprty.GetAccessors(true)[0].IsStatic ? "static ": "" #>global::<#= proeprty.PropertyType.FullName #> <#= proeprty.Name #> {
<# if(proeprty.CanRead) { #>
            get;
<# } #>
<# if(proeprty.CanWrite) { #>
            set;
<# } #>
        }

<# } #>
        #endregion
<# } #>

<# if(methods.Any()) { #>
        #region function (<#= methods.Length #>)
<# foreach(var method in methods) { #>
        /// <inheritdoc cref="<#= originalClassFulleName #>.<#= method.Name #>(<#= string.Join(", ", method.GetParameters().Select(a => a.ParameterType.FullName)) #>)"/>
<# } #>
        #endregion
<# } #>
    }

    /// <inheritdoc cref="<#= originalClassFulleName #>"/>
    public class <#= directProxyName #>
    {
    }
}
<#
}
#>


<#+

#>
