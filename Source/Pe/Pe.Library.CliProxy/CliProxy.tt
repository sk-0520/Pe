<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Reflection" #>
<#@ output extension=".cs" #>
<#
var targetDefines = new [] {
    "System.Environment",
};
#>
// <auto-generated>
// [T4] build <#= DateTime.UtcNow.ToString("u") #>(UTC)
// </auto-generated>
<#
foreach(var targetDefine in targetDefines) {
    var targetType = Type.GetType(targetDefine, true);
#>
namespace ContentTypeTextNet.Pe.Library.CliProxy.<#= targetType.Namespace #>
{
<#
    var originalClassName = targetType.Name;
    var originalClassFulleName = "global::" + targetType.FullName;
    var proxyInterfaceName = $"I{originalClassName}Proxy";
    var directProxyName = $"Direct{originalClassName}Proxy";
    var properties = targetType.GetProperties(BindingFlags.Public | BindingFlags.Static | BindingFlags.GetProperty | BindingFlags.SetProperty);
    var methods = targetType.GetMethods(BindingFlags.Public | BindingFlags.Static | BindingFlags.InvokeMethod)
        .Where(a => !(a.Name.StartsWith("get_") || a.Name.StartsWith("set_")))
        .ToArray()
    ;
#>
    /// <inheritdoc cref="<#= originalClassFulleName #>"/>
    public interface <#= proxyInterfaceName #>
    {
<# if(properties.Any()) { #>
        #region property (<#= properties.Length #>)

<# foreach(var proeprty in properties) { #>
        /// <inheritdoc cref="<#= originalClassFulleName #>.<#= proeprty.Name #>"/>
        public <#= Proxy.ToSourceType(proeprty.PropertyType) #> <#= proeprty.Name #>
        {
<# if(proeprty.CanRead) { #>
            get;
<# } #>
<# if(proeprty.CanWrite) { #>
            set;
<# } #>
        }

<# } #>

        #endregion
<# } #>

<# if(methods.Any()) { #>
        #region function (<#= methods.Length #>)

<# foreach(var method in methods) { #>
        /// <inheritdoc cref="<#= originalClassFulleName #>.<#= method.Name #>(<#= string.Join(", ", method.GetParameters().Select(a => Proxy.ToDocumentParameter(a))) #>)"/>
        public <#= Proxy.ToSourceType(method.ReturnType) #> <#= method.Name #>(<#= string.Join(", ", method.GetParameters().Select(a => Proxy.ToSignatureParameter(a))) #>);
<# } #>

        #endregion
<# } #>
    }

    /// <inheritdoc cref="<#= originalClassFulleName #>"/>
    public class <#= directProxyName #>
    {
<# if(properties.Any()) { #>
        #region property (<#= properties.Length #>)

<# foreach(var proeprty in properties) { #>
        /// <inheritdoc cref="<#= originalClassFulleName #>.<#= proeprty.Name #>"/>
        public <#= Proxy.ToSourceType(proeprty.PropertyType) #> <#= proeprty.Name #>
        {
<# if(proeprty.CanRead) { #>
            get => <#= originalClassFulleName #>.<#= proeprty.Name #>;
<# } #>
<# if(proeprty.CanWrite) { #>
            set => <#= originalClassFulleName #>.<#= proeprty.Name #> = value;
<# } #>
        }
<# } #>
        #endregion
<# } #>

<# if(methods.Any()) { #>
        #region function (<#= methods.Length #>)

<# foreach(var method in methods) { #>
        /// <inheritdoc cref="<#= originalClassFulleName #>.<#= method.Name #>(<#= string.Join(", ", method.GetParameters().Select(a => Proxy.ToDocumentParameter(a))) #>)"/>
        public <#= Proxy.ToSourceType(method.ReturnType) #> <#= method.Name #>(<#= string.Join(", ", method.GetParameters().Select(a => Proxy.ToSignatureParameter(a))) #>) =>
            <#= originalClassFulleName #>.<#= method.Name #>(<#= string.Join(", ", method.GetParameters().Select(a => Proxy.ToMethodParameter(a)))#>)
        ;
<# } #>

        #endregion
<# } #>
    }
}
<#
}
#>


<#+
    public static class Proxy
    {
        #region function

        private static string ToCSharpType(Type type)
        {
            switch(type.FullName) {
                case "System.Void": return "void";
                case "System.Int32": return "int";
                case "System.Int64": return "long";
                case "System.Boolean": return "bool";
                case "System.String": return "string";
            }

            return string.Empty;
        }

        public static string ToSourceType(Type type)
        {
            var cstype = ToCSharpType(type);
            if(cstype.Length != 0) {
                return cstype;
            }

            if(type.IsArray) {
                var elementType = type.GetElementType();
                var csArrayType = ToCSharpType(elementType);
                if(csArrayType.Length != 0) {
                    return csArrayType + "[]";
                }
            }

            return "global::" + type.FullName.Replace('+', '.');
        }

        public static string ToDocumentParameter(ParameterInfo parameter)
        {
            return ToSourceType(parameter.ParameterType);
        }

        public static string ToSignatureParameter(ParameterInfo parameter)
        {
            return $"{ToSourceType(parameter.ParameterType)} {parameter.Name}";
        }

        public static string ToMethodParameter(ParameterInfo parameter)
        {
            return $"{parameter.Name}";
        }

        #endregion
    }
#>
