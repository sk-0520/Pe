{"version":3,"sources":["script/dev-table.ts"],"names":[],"mappings":"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","file":"dev-table.409a6030.js","sourceRoot":"..\\..\\..\\..\\Documents\\source","sourcesContent":["// カラム名変更とか追加とか削除とかはキッツいので手動対応\r\n\r\ninterface BlockElements {\r\n\troot: HTMLDivElement;\r\n\ttable: HTMLDivElement;\r\n\tlayout: HTMLDivElement;\r\n\tindex: HTMLDivElement;\r\n}\r\n\r\ninterface EntityDefine {\r\n\ttable: string;\r\n\tlayout: ReadonlyArray<string>;\r\n\tindex: ReadonlyArray<string>;\r\n}\r\n\r\ninterface LayoutRowData {\r\n\tisPrimary: boolean,\r\n\tisNotNull: boolean,\r\n\tforeignTable: string,\r\n\tforeignColumn: string,\r\n\tcolumnName: string,\r\n\tlogicalName: string,\r\n\tdatabaseType: string,\r\n\tclrType: string,\r\n\tcheck: string,\r\n\tcomment: string,\r\n}\r\n\r\ninterface IndexRowData {\r\n\tisUnique: boolean,\r\n\tcolumns: Array<string>;\r\n}\r\n\r\ninterface ExportData {\r\n\tmarkdown: string,\r\n\tdatabase: string,\r\n}\r\n\r\nenum MarkdownTablePosition {\r\n\tleft,\r\n\tcenter,\r\n\tright\r\n}\r\n\r\nconst DatabaseTypeMap = new Map([\r\n\t// 通常\r\n\t['integer', 'integer'],\r\n\t['real', 'real'],\r\n\t['text', 'text'],\r\n\t['blob', 'blob'],\r\n\t// 意味だけ\r\n\t['datetime', 'text'],\r\n\t['boolean', 'integer'],\r\n]) as ReadonlyMap<string, string>;\r\n\r\nconst ClrMap = new Map([\r\n\t['integer', ['System.Int64']],\r\n\t['real', ['System.Decimal', 'System.Single', 'System.Double']],\r\n\t['text', ['System.String', 'System.Guid', 'System.Version', 'System.TimeSpan']],\r\n\t['blob', ['System.Byte[]']],\r\n\t['datetime', ['System.DateTime', 'System.String']],\r\n\t['boolean', ['System.Boolean', 'System.Int64']],\r\n]) as ReadonlyMap<string, ReadonlyArray<string>>;\r\n\r\nconst CommonCreatedColumns = [\r\n\t'CreatedTimestamp',\r\n\t'CreatedAccount',\r\n\t'CreatedProgramName',\r\n\t'CreatedProgramVersion',\r\n] as ReadonlyArray<string>;\r\nconst CommonUpdatedColumns = [\r\n\t'UpdatedTimestamp',\r\n\t'UpdatedAccount',\r\n\t'UpdatedProgramName',\r\n\t'UpdatedProgramVersion',\r\n\t'UpdatedCount',\r\n] as ReadonlyArray<string>;\r\n\r\nenum LayoutColumn {\r\n\tPrimaryKey = 0,\r\n\tNotNull = 1,\r\n\tForeignKey = 2,\r\n\tLogicalColumnName = 3,\r\n\tPhysicalColumnName = 4,\r\n\tLogicalType = 5,\r\n\tClrType = 6,\r\n\tCheckConstraint = 7,\r\n\tComment = 8,\r\n}\r\n\r\nconst LayoutMarkdownHeaders = function() {\r\n\tvar map = new Map<LayoutColumn, string>([\r\n\t\t[LayoutColumn.PrimaryKey, 'PK'],\r\n\t\t[LayoutColumn.NotNull, 'NN'],\r\n\t\t[LayoutColumn.ForeignKey, 'FK'],\r\n\t\t[LayoutColumn.LogicalColumnName, '論理カラム名'],\r\n\t\t[LayoutColumn.PhysicalColumnName, '物理カラム名'],\r\n\t\t[LayoutColumn.LogicalType, '論理データ型'],\r\n\t\t[LayoutColumn.ClrType, 'マッピング型'],\r\n\t\t[LayoutColumn.CheckConstraint, 'チェック制約'],\r\n\t\t[LayoutColumn.Comment, 'コメント'],\r\n\t]);\r\n\treturn [ ...map.keys() ]\r\n\t\t.sort()\r\n\t\t.map(i => map.get(i)!)\r\n\t;\r\n}();\r\n\r\nconst IndexMarkdownHeaders = ['UK', 'カラム(CSV)'];\r\n\r\nenum TableBlockName {\r\n\tTableName = 'table-name',\r\n}\r\n\r\nenum LayoutBlockName {\r\n\tLayoutRowRoot = 'layout-row-root',\r\n\tLayoutRowAdd = 'add',\r\n\tPrimaryKey = 'pk',\r\n\tNotNull = 'nn',\r\n\tForeignKeyRoot = 'fk-root',\r\n\tForeignKey = 'fk',\r\n\tForeignKeyTable = 'fk-table',\r\n\tForeignKeyColumn = 'fk-column',\r\n\tLogicalColumnName = 'name-logical',\r\n\tPhysicalColumnName = 'name-physical',\r\n\tLogicalType = 'data-logical',\r\n\tPhysicalType = 'data-physical',\r\n\tClrType = 'data-clr',\r\n\tCheckConstraint = 'check',\r\n\tComment = 'comment',\r\n\tDelete = 'delete',\r\n}\r\n\r\nenum IndexBlockName {\r\n\tIndexRowRoot = 'index-row-root',\r\n\tIndexRowAdd = 'add',\r\n\tColumnAdd = 'add-col',\r\n\tIndexRowColumnRoot = 'index-row-column-root',\r\n\tColumnName = 'c',\r\n\tUniqueKey = 'uk',\r\n\tColumns = 'columns',\r\n\tColumn = 'column',\r\n\tDeleteColumn = 'delete-col',\r\n\tDeleteIndex = 'delete',\r\n}\r\n\r\nfunction getElementByName<THTMLElement extends HTMLElement>(node: ParentNode, name: string): THTMLElement {\r\n\treturn node.querySelector('[name=\"' + name + '\"]') as THTMLElement;\r\n}\r\n\r\nfunction getElementsByName<THTMLElement extends HTMLElement>(node: ParentNode, name: string): NodeListOf<THTMLElement> {\r\n\treturn node.querySelectorAll('[name=\"' + name + '\"]');\r\n}\r\n\r\nfunction getClosest(element: HTMLElement, func: (target: HTMLElement) => boolean): HTMLElement | null {\r\n\twhile(element.parentElement) {\r\n\t\tif(func(element.parentElement)) {\r\n\t\t\treturn element.parentElement;\r\n\t\t}\r\n\r\n\t\telement = element.parentElement;\r\n\t}\r\n\treturn null;\r\n}\r\n\r\nfunction isCheckMark(value: string) {\r\n\treturn value === 'o';\r\n}\r\nfunction toCheckMark(value: boolean) {\r\n\treturn value ? 'o': '';\r\n}\r\n\r\nfunction countSingleChar(s: string): number {\r\n\tif(!s || !s.length) {\r\n\t\treturn 0;\r\n\t}\r\n\tvar chars = s.match(/[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]|[^\\uD800-\\uDFFF]/g) || [];\r\n\tvar length = 0;\r\n\tfor(var c of chars) {\r\n\t\tif(c.length == 1) {\r\n\t\t\tif(!c.match(/[^\\x01-\\x7E]/) || !c.match(/[^\\uFF65-\\uFF9F]/)) {\r\n\t\t\t\tlength += 1;\r\n\t\t\t}  else {\r\n\t\t\t\tlength += 2;\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\t\t\t// もういいでしょ\r\n\t\t\tlength += 2;\r\n\t\t}\r\n\t}\r\n\treturn length;\r\n}\r\n\r\nclass Entity {\r\n\tprivate readonly tableNamePrefix = '## ';\r\n\tprivate blockElements: BlockElements;\r\n\tprivate entities: ReadonlyArray<Entity> = [];\r\n\r\n\tconstructor(blockElements: BlockElements) {\r\n\t\tthis.blockElements = blockElements;\r\n\t}\r\n\r\n\tprivate getIndex(lines: ReadonlyArray<string>) {\r\n\t\tvar regLayout = /^###\\s*layout\\s*/;\r\n\t\tvar regIndex = /^###\\s*index\\s*/;\r\n\r\n\t\tenum State {\r\n\t\t\tTable,\r\n\t\t\tLayout,\r\n\t\t\tIndex,\r\n\t\t};\r\n\r\n\t\tvar state = State.Table;\r\n\r\n\t\tvar lineIndex = {\r\n\t\t\ttable: -1,\r\n\t\t\tlayout: {\r\n\t\t\t\thead: -1,\r\n\t\t\t\ttail: -1\r\n\t\t\t},\r\n\t\t\tindex: {\r\n\t\t\t\thead: -1,\r\n\t\t\t\ttail: -1\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tfor (var i = 0; i < lines.length; i++) {\r\n\t\t\tvar line = lines[i];\r\n\r\n\t\t\tswitch (state) {\r\n\t\t\t\tcase State.Table:\r\n\t\t\t\t\tif (line.startsWith(this.tableNamePrefix)) {\r\n\t\t\t\t\t\tlineIndex.table = i;\r\n\t\t\t\t\t\tstate = State.Layout;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase State.Layout:\r\n\t\t\t\t\tif (regLayout.test(line)) {\r\n\t\t\t\t\t\tlineIndex.layout.head = i + 1;\r\n\t\t\t\t\t\tstate = State.Index;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase State.Index:\r\n\t\t\t\t\tif (regIndex.test(line)) {\r\n\t\t\t\t\t\tlineIndex.layout.tail = i;\r\n\t\t\t\t\t\tlineIndex.index.head = i + 1;\r\n\t\t\t\t\t\tlineIndex.index.tail = lines.length;\r\n\t\t\t\t\t\treturn lineIndex;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tthrow 'こねーよ！';\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthrow 'はい、定義ミス';\r\n\t}\r\n\r\n\tprivate trimMarkdownTable(lines: ReadonlyArray<string>): ReadonlyArray<string> {\r\n\t\treturn lines\r\n\t\t\t.map(s => s.trim())\r\n\t\t\t.filter(s => s.startsWith('|') && s.endsWith('|'))\r\n\t\t\t;\r\n\t}\r\n\r\n\tprivate trimDefine(rawDefine: EntityDefine): EntityDefine {\r\n\t\tvar result = {\r\n\t\t\ttable: rawDefine.table.substr(this.tableNamePrefix.length),\r\n\t\t\tlayout: this.trimMarkdownTable(rawDefine.layout),\r\n\t\t\tindex: this.trimMarkdownTable(rawDefine.index),\r\n\t\t} as EntityDefine;\r\n\r\n\t\treturn result;\r\n\t}\r\n\r\n\tprivate convertRowLines(markdownTableLines: ReadonlyArray<string>): ReadonlyArray<ReadonlyArray<string>> {\r\n\t\tvar rows = markdownTableLines\r\n\t\t\t.map(i => i.replace(/(^\\|)|(|$)/, ''))\r\n\t\t\t.map(i => i.split('|').map(s => s.trim()))\r\n\t\t\t;\r\n\t\tif (2 < rows.length) {\r\n\t\t\treturn rows.slice(2);\r\n\t\t}\r\n\r\n\t\treturn [];\r\n\t}\r\n\r\n\tprivate buildTable(parentElement: HTMLDivElement, tableName: string) {\r\n\t\tvar tableTemplate = document.getElementById('template-table') as HTMLTemplateElement;\r\n\t\tvar clonedTemplate = document.importNode(tableTemplate.content, true);\r\n\r\n\t\tvar tableNameElement = getElementByName<HTMLInputElement>(clonedTemplate, TableBlockName.TableName);\r\n\t\ttableNameElement.value = tableName;\r\n\r\n\t\tparentElement.appendChild(clonedTemplate);\r\n\t}\r\n\r\n\tprivate createLayoutRowNode(columns: ReadonlyArray<string>) {\r\n\t\tvar layoutRowTemplate = document.getElementById('template-layout-row') as HTMLTemplateElement;\r\n\t\tvar clonedTemplate = document.importNode(layoutRowTemplate.content, true);\r\n\r\n\t\tvar primaryElement = getElementByName<HTMLInputElement>(clonedTemplate, LayoutBlockName.PrimaryKey);\r\n\t\tvar notNullElement = getElementByName<HTMLInputElement>(clonedTemplate, LayoutBlockName.NotNull)\r\n\t\tprimaryElement.checked = isCheckMark(columns[LayoutColumn.PrimaryKey]);\r\n\t\tnotNullElement.checked = isCheckMark(columns[LayoutColumn.NotNull]);\r\n\t\tprimaryElement.addEventListener('change', ev => {\r\n\t\t\tnotNullElement.disabled = primaryElement.checked;\r\n\t\t\tif(primaryElement.checked) {\r\n\t\t\t\tnotNullElement.checked =true;\r\n\t\t\t}\r\n\t\t});\r\n\t\tprimaryElement.dispatchEvent(new Event('change'));\r\n\r\n\t\tgetElementByName<HTMLInputElement>(clonedTemplate, LayoutBlockName.ForeignKey).value = columns[LayoutColumn.ForeignKey];\r\n\r\n\t\tgetElementByName<HTMLInputElement>(clonedTemplate, LayoutBlockName.LogicalColumnName).value = columns[LayoutColumn.LogicalColumnName];\r\n\t\tgetElementByName<HTMLInputElement>(clonedTemplate, LayoutBlockName.PhysicalColumnName).value = columns[LayoutColumn.PhysicalColumnName];\r\n\r\n\t\tvar logicalDataElement = getElementByName<HTMLSelectElement>(clonedTemplate, LayoutBlockName.LogicalType);\r\n\t\tvar physicalDataElement = getElementByName<HTMLInputElement>(clonedTemplate, LayoutBlockName.PhysicalType); // 一方通行イベントで使うのでキャプチャしとく。メモリは無限\r\n\t\tvar clrDataElement = getElementByName<HTMLSelectElement>(clonedTemplate, LayoutBlockName.ClrType);\r\n\t\tlogicalDataElement.value = columns[LayoutColumn.LogicalType];\r\n\t\tclrDataElement.value = columns[LayoutColumn.ClrType];\r\n\t\tlogicalDataElement.addEventListener('change', ev => {\r\n\t\t\tvar physicalValue = DatabaseTypeMap.get(logicalDataElement.value);\r\n\t\t\tphysicalDataElement.value = physicalValue || 'なんかデータ変';\r\n\r\n\t\t\t// CLR に対して Pe で出来る範囲で型を限定\r\n\t\t\tvar optionElements = clrDataElement.querySelectorAll('option');\r\n\t\t\tvar selectedElement: HTMLOptionElement | null = null;\r\n\t\t\tvar defaultElement: HTMLOptionElement | null = null;\r\n\t\t\tfor (var optionElement of optionElements) {\r\n\t\t\t\tvar clrValues = ClrMap.get(logicalDataElement.value)!;\r\n\t\t\t\toptionElement.disabled = !clrValues.some(i => i === optionElement.value);\r\n\t\t\t\tif (!optionElement.disabled && !defaultElement) {\r\n\t\t\t\t\tif(clrValues[0] === optionElement.value) {\r\n\t\t\t\t\t\tdefaultElement = optionElement;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif (optionElement.selected) {\r\n\t\t\t\t\tselectedElement = optionElement;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (selectedElement && selectedElement.disabled) {\r\n\t\t\t\tdefaultElement!.selected = true;\r\n\t\t\t}\r\n\t\t});\r\n\t\tlogicalDataElement.dispatchEvent(new Event('change'));\r\n\r\n\r\n\t\tgetElementByName<HTMLInputElement>(clonedTemplate, LayoutBlockName.CheckConstraint).value = columns[LayoutColumn.CheckConstraint];\r\n\t\tgetElementByName<HTMLInputElement>(clonedTemplate, LayoutBlockName.Comment).value = columns[LayoutColumn.Comment];\r\n\r\n\t\tgetElementByName<HTMLButtonElement>(clonedTemplate, LayoutBlockName.Delete).addEventListener('click', ev => {\r\n\t\t\tvar element = ev.srcElement as HTMLElement;\r\n\t\t\twhile(element.getAttribute('name') !== LayoutBlockName.LayoutRowRoot) {\r\n\t\t\t\telement = element.parentElement as HTMLElement;\r\n\t\t\t}\r\n\t\t\telement.remove();\r\n\t\t});\r\n\r\n\t\treturn clonedTemplate;\r\n\t}\r\n\r\n\tprivate createEmptyLayout(): ReadonlyArray<string> {\r\n\t\tvar defaultDatabaseType = 'integer';\r\n\r\n\t\tvar map = new Map<LayoutColumn, string>([\r\n\t\t\t[LayoutColumn.PrimaryKey, ''],\r\n\t\t\t[LayoutColumn.NotNull, ''],\r\n\t\t\t[LayoutColumn.ForeignKey, ''],\r\n\t\t\t[LayoutColumn.LogicalColumnName, ''],\r\n\t\t\t[LayoutColumn.PhysicalColumnName, ''],\r\n\t\t\t[LayoutColumn.LogicalType, defaultDatabaseType],\r\n\t\t\t[LayoutColumn.ClrType, ClrMap.get(defaultDatabaseType)![0]],\r\n\t\t\t[LayoutColumn.CheckConstraint, ''],\r\n\t\t\t[LayoutColumn.Comment, ''],\r\n\t\t]);\r\n\r\n\t\treturn [ ...map.keys() ]\r\n\t\t\t.sort()\r\n\t\t\t.map(i => map.get(i)!)\r\n\t\t;\r\n\t}\r\n\r\n\tprivate buildLayout(parentElement: HTMLDivElement, layoutRows: ReadonlyArray<ReadonlyArray<string>>) {\r\n\t\tvar layoutTemplate = document.getElementById('template-layout') as HTMLTemplateElement;\r\n\t\tvar clonedTemplate = document.importNode(layoutTemplate.content, true);\r\n\r\n\t\tvar rowsElement = clonedTemplate.querySelector('tbody') as HTMLElement;\r\n\r\n\t\tfor (var layoutRow of layoutRows) {\r\n\t\t\tvar rowElement = this.createLayoutRowNode(layoutRow);\r\n\t\t\trowsElement.appendChild(rowElement)\r\n\t\t}\r\n\r\n\t\tgetElementByName<HTMLButtonElement>(clonedTemplate, LayoutBlockName.LayoutRowAdd).addEventListener('click', ev => {\r\n\t\t\tvar element = ev.srcElement as HTMLElement;\r\n\t\t\twhile(element.tagName !== 'TABLE') {\r\n\t\t\t\telement = element.parentElement as HTMLElement;\r\n\t\t\t}\r\n\r\n\t\t\tvar emptyLayout = this.createEmptyLayout();\r\n\t\t\tvar rowElement = this.createLayoutRowNode(emptyLayout);\r\n\r\n\t\t\trowsElement.appendChild(rowElement);\r\n\t\t\tvar newRowElement = rowsElement.lastElementChild as HTMLElement;\r\n\t\t\tvar tableElement = getElementByName<HTMLSelectElement>(newRowElement, LayoutBlockName.ForeignKeyTable);\r\n\t\t\tvar targetEntities = this.filterMyself(this.entities);\r\n\t\t\tvar targetTableNames = this.getTableNamesFromEntities(targetEntities);\r\n\t\t\tthis.buildForeignKeyTable(tableElement, targetTableNames);\r\n\t\t\ttableElement.addEventListener('change', ev => this.changedTableElement(ev, targetEntities));\r\n\t\t});\r\n\r\n\r\n\t\tparentElement.appendChild(clonedTemplate);\r\n\t}\r\n\r\n\tprivate createIndexRowColumnNode(column: string) {\r\n\t\tvar indexRowColumnTemplate = document.getElementById('template-index-row-column') as HTMLTemplateElement;\r\n\t\tvar clonedTemplate = document.importNode(indexRowColumnTemplate.content, true);\r\n\r\n\t\tgetElementByName<HTMLInputElement>(clonedTemplate, IndexBlockName.ColumnName).value = column;\r\n\t\tgetElementByName<HTMLButtonElement>(clonedTemplate, IndexBlockName.DeleteColumn).addEventListener('click', ev => {\r\n\t\t\tvar parent = getClosest(ev.srcElement as HTMLElement, e => e.getAttribute('name') === IndexBlockName.IndexRowColumnRoot);\r\n\t\t\tparent!.remove();\r\n\t\t});\r\n\r\n\t\treturn clonedTemplate;\r\n\t}\r\n\r\n\tprivate createIndexRowNode(isUnique: boolean, columns: ReadonlyArray<string>): Node {\r\n\t\tvar indexRowTemplate = document.getElementById('template-index-row') as HTMLTemplateElement;\r\n\t\tvar clonedTemplate = document.importNode(indexRowTemplate.content, true);\r\n\r\n\t\tgetElementByName<HTMLInputElement>(clonedTemplate, IndexBlockName.UniqueKey).checked = isUnique;\r\n\r\n\t\tvar columnsElement = getElementByName(clonedTemplate, IndexBlockName.Columns);\r\n\t\tfor (var column of columns) {\r\n\t\t\tvar columnElement = this.createIndexRowColumnNode(column);\r\n\t\t\tcolumnsElement.appendChild(columnElement);\r\n\t\t}\r\n\r\n\t\tgetElementByName<HTMLButtonElement>(clonedTemplate, IndexBlockName.ColumnAdd).addEventListener('click', ev => {\r\n\t\t\tvar columnElement = this.createIndexRowColumnNode(this.getColumnNames(true)[0]);\r\n\t\t\tcolumnsElement.appendChild(columnElement);\r\n\r\n\t\t\tvar columnNames = this.getColumnNames(true);\r\n\t\t\tvar targetElement = getElementByName<HTMLSelectElement>(columnsElement.lastElementChild!, IndexBlockName.Column)\r\n\t\t\tthis.setIndexColumnNames(targetElement, columnNames);\r\n\t\t});\r\n\r\n\t\tgetElementByName<HTMLButtonElement>(clonedTemplate, IndexBlockName.DeleteIndex).addEventListener('click', ev => {\r\n\t\t\tvar parent = getClosest(ev.srcElement as HTMLElement, e => e.getAttribute('name') === IndexBlockName.IndexRowRoot);\r\n\t\t\tparent!.remove();\r\n\t\t});\r\n\r\n\t\treturn clonedTemplate;\r\n\t}\r\n\r\n\tprivate buildIndex(parentElement: HTMLDivElement, indexRows: ReadonlyArray<ReadonlyArray<string>>) {\r\n\t\tvar indexTemplate = document.getElementById('template-index') as HTMLTemplateElement;\r\n\t\tvar clonedTemplate = document.importNode(indexTemplate.content, true);\r\n\r\n\t\tvar rowsElement = clonedTemplate.querySelector('tbody') as HTMLElement;\r\n\r\n\t\tfor (var indexRow of indexRows) {\r\n\t\t\tvar isUnique = isCheckMark(indexRow[0]);\r\n\t\t\tvar columns = indexRow[1].split(',').map(s => s.trim());\r\n\t\t\tvar rowElement = this.createIndexRowNode(isUnique, columns);\r\n\t\t\trowsElement.appendChild(rowElement)\r\n\t\t}\r\n\r\n\t\tgetElementByName<HTMLButtonElement>(clonedTemplate, IndexBlockName.IndexRowAdd).addEventListener('click', ev => {\r\n\t\t\tvar rowElement = this.createIndexRowNode(false, [this.getColumnNames(true)[0]]);\r\n\t\t\trowsElement.appendChild(rowElement);\r\n\r\n\t\t\tvar columnElement = getElementByName<HTMLSelectElement>(rowsElement.lastElementChild!, IndexBlockName.Column);\r\n\t\t\tvar columnNames = this.getColumnNames(true);\r\n\t\t\tthis.setIndexColumnNames(columnElement, columnNames);\r\n\t\t});\r\n\r\n\t\tparentElement.appendChild(clonedTemplate);\r\n\t}\r\n\r\n\tpublic build(rawDefine: string) {\r\n\t\tvar lines = rawDefine.split(/\\r?\\n/mg);\r\n\t\tvar index = this.getIndex(lines);\r\n\r\n\t\tvar define = this.trimDefine({\r\n\t\t\ttable: lines[index.table],\r\n\t\t\tlayout: lines.slice(index.layout.head, index.layout.tail),\r\n\t\t\tindex: lines.slice(index.index.head, index.index.tail)\r\n\t\t});\r\n\r\n\t\tthis.buildTable(this.blockElements.table, define.table);\r\n\t\tthis.buildLayout(this.blockElements.layout, this.convertRowLines(define.layout));\r\n\t\tthis.buildIndex(this.blockElements.index, this.convertRowLines(define.index));\r\n\t}\r\n\r\n\tpublic getTableName(): string {\r\n\t\treturn getElementByName<HTMLInputElement>(this.blockElements.table, TableBlockName.TableName).value;\r\n\t}\r\n\r\n\tprivate buildForeignKeyTable(parentElement: HTMLSelectElement, tableNames: ReadonlyArray<string>) {\r\n\t\tparentElement.appendChild(document.createElement('option'));\r\n\t\tfor(var tableName of tableNames) {\r\n\t\t\tvar optionElement = document.createElement('option') as HTMLOptionElement;\r\n\t\t\toptionElement.value = tableName;\r\n\t\t\toptionElement.textContent = tableName;\r\n\r\n\t\t\tparentElement.appendChild(optionElement);\r\n\t\t}\r\n\t}\r\n\r\n\tpublic getColumnNames(ignoreCommonColumn: boolean): ReadonlyArray<string> {\r\n\t\tvar isIgnoreColumn = (s:string) => {\r\n\t\t\tif(CommonCreatedColumns.some(i => i === s)) {\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t\tif(CommonUpdatedColumns.some(i => i === s)) {\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tvar columnElements = getElementsByName<HTMLInputElement>(this.blockElements.layout, LayoutBlockName.PhysicalColumnName);\r\n\t\tvar result = new Array<string>();\r\n\t\tfor(var columnElement of columnElements) {\r\n\t\t\tif(ignoreCommonColumn && isIgnoreColumn(columnElement.value)) {\r\n\t\t\t\t\tcontinue;\r\n\t\t\t}\r\n\t\t\tresult.push(columnElement.value);\r\n\t\t}\r\n\t\treturn result;\r\n\t}\r\n\r\n\tprivate buildForeignKeyColumns(parentElement: HTMLSelectElement, targetEntity: Entity) {\r\n\t\tparentElement.textContent = '';\r\n\r\n\t\tvar columnNames = targetEntity.getColumnNames(true);\r\n\t\tfor(var columnName of columnNames) {\r\n\t\t\tvar optionElement = document.createElement('option');\r\n\t\t\toptionElement.value = columnName;\r\n\t\t\toptionElement.textContent = columnName;\r\n\t\t\tparentElement.appendChild(optionElement);\r\n\t\t}\r\n\t}\r\n\r\n\tprivate filterMyself(entities: ReadonlyArray<Entity>): ReadonlyArray<Entity> {\r\n\t\tvar targetEntities = entities\r\n\t\t\t.filter(i => i !== this)\r\n\t\t;\r\n\r\n\t\treturn targetEntities;\r\n\t}\r\n\r\n\tprivate getTableNamesFromEntities(entities: ReadonlyArray<Entity>) {\r\n\t\treturn entities\r\n\t\t\t.map(i => i.getTableName())\r\n\t\t\t.sort()\r\n\t\t;\r\n\t}\r\n\r\n\tprivate changedTableElement(ev: Event, targetEntities: ReadonlyArray<Entity>) {\r\n\t\tvar currentTableElement = (ev.srcElement as HTMLSelectElement);\r\n\t\tvar currentColumnElement =  getElementByName<HTMLSelectElement>(currentTableElement.parentElement!, LayoutBlockName.ForeignKeyColumn);\r\n\t\tvar targetEntity = targetEntities\r\n\t\t\t.find(i => i.getTableName() == currentTableElement.value)\r\n\t\t;\r\n\r\n\t\tif(targetEntity) {\r\n\t\t\tcurrentColumnElement.disabled = false;\r\n\t\t\tthis.buildForeignKeyColumns(currentColumnElement, targetEntity);\r\n\t\t} else {\r\n\t\t\tcurrentColumnElement.disabled = true;\r\n\t\t\tcurrentColumnElement.textContent = '';\r\n\t\t}\r\n\t}\r\n\r\n\tprivate buildEntityForeignKey(entities: ReadonlyArray<Entity>){\r\n\t\tvar foreignKeyRootElements = getElementsByName(this.blockElements.layout, LayoutBlockName.ForeignKeyRoot);\r\n\t\tfor(var foreignKeyRootElement of foreignKeyRootElements) {\r\n\r\n\t\t\tvar tableElement = getElementByName<HTMLSelectElement>(foreignKeyRootElement, LayoutBlockName.ForeignKeyTable);\r\n\t\t\tvar columnElement = getElementByName<HTMLSelectElement>(foreignKeyRootElement, LayoutBlockName.ForeignKeyColumn);\r\n\r\n\t\t\tvar targetEntities = this.filterMyself(entities);\r\n\t\t\tvar targetTableNames = this.getTableNamesFromEntities(targetEntities);\r\n\r\n\t\t\tthis.buildForeignKeyTable(tableElement, targetTableNames);\r\n\t\t\ttableElement.addEventListener('change', ev => this.changedTableElement(ev, targetEntities));\r\n\r\n\t\t\tvar kfElement = getElementByName<HTMLInputElement>(foreignKeyRootElement, LayoutBlockName.ForeignKey);\r\n\t\t\tif(kfElement.value) {\r\n\t\t\t\tvar v = kfElement.value.split('.');\r\n\t\t\t\tvar kfPair = {\r\n\t\t\t\t\ttable: v[0].trim(),\r\n\t\t\t\t\tcolumn: v[1].trim(),\r\n\t\t\t\t};\r\n\t\t\t\ttableElement.value = kfPair.table;\r\n\t\t\t\ttableElement.dispatchEvent(new Event('change'));\r\n\t\t\t\tcolumnElement.value = kfPair.column;\r\n\t\t\t} else {\r\n\t\t\t\ttableElement.dispatchEvent(new Event('change'));\r\n\t\t\t}\r\n\t\t\tkfElement.value = '';\r\n\t\t}\r\n\t}\r\n\r\n\tprivate setIndexColumnNames(parentElement: HTMLSelectElement, columnNames: ReadonlyArray<string>) {\r\n\t\tfor(var columnName of columnNames) {\r\n\t\t\tvar optionElement = document.createElement('option');\r\n\t\t\toptionElement.value = columnName;\r\n\t\t\toptionElement.textContent = columnName;\r\n\r\n\t\t\tparentElement.appendChild(optionElement);\r\n\t\t}\r\n}\r\n\r\n\tprivate buildEntityIndex() {\r\n\t\tvar columnNames = this.getColumnNames(true);\r\n\t\tvar indexRowRootElements = getElementsByName(this.blockElements.index, IndexBlockName.IndexRowRoot);\r\n\t\tfor(var indexRowRootElement of indexRowRootElements) {\r\n\t\t\tvar columnsElements = getElementsByName<HTMLSelectElement>(indexRowRootElement, IndexBlockName.Column);\r\n\t\t\tfor(var columnsElement of columnsElements) {\r\n\t\t\t\t/*\r\n\t\t\t\tfor(var columnName of columnNames) {\r\n\t\t\t\t\tvar optionElement = document.createElement('option');\r\n\t\t\t\t\toptionElement.value = columnName;\r\n\t\t\t\t\toptionElement.textContent = columnName;\r\n\r\n\t\t\t\t\tcolumnsElement.appendChild(optionElement);\r\n\t\t\t\t}\r\n\t\t\t\t*/\r\n\t\t\t\tthis.setIndexColumnNames(columnsElement, columnNames);\r\n\t\t\t\tcolumnsElement.value = getElementByName<HTMLInputElement>(columnsElement.parentElement!, IndexBlockName.ColumnName).value;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tpublic buildEntities(entities: ReadonlyArray<Entity>) {\r\n\t\tthis.entities = entities;\r\n\t\tthis.buildEntityForeignKey(this.entities);\r\n\t\tthis.buildEntityIndex();\r\n\t}\r\n\r\n}\r\n\r\nclass EntityRelationManager {\r\n\tviewElement: HTMLDivElement;\r\n\tcommandElement: HTMLDivElement;\r\n\tdefineElement: HTMLTextAreaElement;\r\n\tsqlElement: HTMLTextAreaElement;\r\n\r\n\tentities: Array<Entity> = [];\r\n\r\n\tconstructor(viewElement: HTMLDivElement, commandElement: HTMLDivElement, defineElement: HTMLTextAreaElement, sqlElement: HTMLTextAreaElement) {\r\n\t\tthis.viewElement = viewElement;\r\n\t\tthis.commandElement = commandElement;\r\n\t\tthis.defineElement = defineElement;\r\n\t\tthis.sqlElement = sqlElement;\r\n\t}\r\n\r\n\tprivate createBlockElements(): BlockElements {\r\n\t\tvar blockTemplate = document.getElementById('template-block') as HTMLTemplateElement;\r\n\t\tvar clonedTemplate = document.importNode(blockTemplate.content, true);\r\n\t\tvar block = {\r\n\t\t\troot: clonedTemplate.querySelector('[name=\"block-root\"]'),\r\n\t\t\ttable: clonedTemplate.querySelector('[name=\"block-table\"]'),\r\n\t\t\tlayout: clonedTemplate.querySelector('[name=\"block-layout\"]'),\r\n\t\t\tindex: clonedTemplate.querySelector('[name=\"block-index\"]'),\r\n\t\t} as BlockElements;\r\n\r\n\t\treturn block;\r\n\t}\r\n\r\n\tprivate buildCommand(parentElement: HTMLDivElement) {\r\n\t\tvar indexTemplate = document.getElementById('template-command') as HTMLTemplateElement;\r\n\t\tvar clonedTemplate = document.importNode(indexTemplate.content, true);\r\n\r\n\t\t// var importElement = clonedTemplate.querySelector('[name=\"command-import\"]') as HTMLButtonElement;\r\n\t\t// importElement.addEventListener('click', ev => {\r\n\t\t// \tthis.reset();\r\n\t\t// \tthis.build();\r\n\t\t// });\r\n\r\n\t\tvar exportElement = clonedTemplate.querySelector('[name=\"command-export\"]') as HTMLButtonElement;\r\n\t\texportElement.addEventListener('click', ev => {\r\n\t\t\tthis.export();\r\n\t\t});\r\n\r\n\t\tvar copyDefineElement = clonedTemplate.querySelector('[name=\"command-copy-define\"]') as HTMLButtonElement;\r\n\t\tcopyDefineElement.addEventListener('click', ev => {\r\n\t\t\tthis.copyDefine();\r\n\t\t});\r\n\r\n\t\tvar copyDefineElement = clonedTemplate.querySelector('[name=\"command-copy-sql\"]') as HTMLButtonElement;\r\n\t\tcopyDefineElement.addEventListener('click', ev => {\r\n\t\t\tthis.copySql();\r\n\t\t});\r\n\r\n\t\tparentElement.appendChild(clonedTemplate);\r\n\t}\r\n\r\n\tprivate buildEntityMapping(entities: ReadonlyArray<Entity>) {\r\n\t\tfor(var entity of entities) {\r\n\t\t\tentity.buildEntities(entities);\r\n\t\t}\r\n\t}\r\n\r\n\tpublic build() {\r\n\t\tthis.buildCommand(this.commandElement);\r\n\r\n\t\tvar defines = this.defineElement.value.split('___');\r\n\t\tdefines.shift();\r\n\r\n\t\tfor (var define of defines) {\r\n\t\t\tvar blockElements = this.createBlockElements();\r\n\t\t\tvar entity = new Entity(blockElements);\r\n\t\t\tentity.build(define);\r\n\r\n\t\t\tthis.entities.push(entity);\r\n\r\n\t\t\tthis.viewElement.appendChild(blockElements.root);\r\n\t\t}\r\n\r\n\t\tthis.buildEntityMapping(this.entities);\r\n\t}\r\n\r\n\treset() {\r\n\t\tthis.entities = [];\r\n\t\tthis.viewElement.textContent = '';\r\n\t\tthis.commandElement.textContent = '';\r\n\t}\r\n\r\n\tprivate exportTable(tableElement: HTMLElement): string {\r\n\t\tvar tableNameElement = getElementByName<HTMLInputElement>(tableElement, TableBlockName.TableName);\r\n\t\treturn tableNameElement.value;\r\n\t}\r\n\r\n\tprivate getLayoutRowData(rowElement: HTMLTableRowElement): LayoutRowData {\r\n\t\tvar data = {\r\n\t\t\tisPrimary: getElementByName<HTMLInputElement>(rowElement, LayoutBlockName.PrimaryKey).checked,\r\n\t\t\tisNotNull: getElementByName<HTMLInputElement>(rowElement, LayoutBlockName.NotNull).checked,\r\n\t\t\tforeignTable: '',\r\n\t\t\tforeignColumn: '',\r\n\t\t\tcolumnName: getElementByName<HTMLInputElement>(rowElement, LayoutBlockName.PhysicalColumnName).value,\r\n\t\t\tlogicalName: getElementByName<HTMLInputElement>(rowElement, LayoutBlockName.LogicalColumnName).value,\r\n\t\t\tdatabaseType: getElementByName<HTMLSelectElement>(rowElement, LayoutBlockName.LogicalType).value,\r\n\t\t\tclrType: getElementByName<HTMLSelectElement>(rowElement, LayoutBlockName.ClrType).value,\r\n\t\t\tcheck: getElementByName<HTMLInputElement>(rowElement, LayoutBlockName.CheckConstraint).value,\r\n\t\t\tcomment: getElementByName<HTMLInputElement>(rowElement, LayoutBlockName.Comment).value,\r\n\t\t} as LayoutRowData;\r\n\r\n\t\tvar ft = getElementByName<HTMLInputElement>(rowElement, LayoutBlockName.ForeignKeyTable).value\r\n\t\tvar fc = getElementByName<HTMLInputElement>(rowElement, LayoutBlockName.ForeignKeyColumn).value\r\n\t\tif(ft.length && fc.length) {\r\n\t\t\tdata.foreignTable = ft;\r\n\t\t\tdata.foreignColumn = fc;\r\n\t\t}\r\n\r\n\t\treturn data;\r\n\t}\r\n\r\n\tprivate toLayoutMarkdown(row: LayoutRowData): ReadonlyArray<string> {\r\n\t\tvar map = new Map<LayoutColumn, string>([\r\n\t\t\t[LayoutColumn.PrimaryKey, toCheckMark(row.isPrimary)],\r\n\t\t\t[LayoutColumn.NotNull, toCheckMark(row.isNotNull)],\r\n\t\t\t[LayoutColumn.ForeignKey, row.foreignTable.length && row.foreignColumn.length ? `${row.foreignTable}.${row.foreignColumn}`: ''],\r\n\t\t\t[LayoutColumn.LogicalColumnName, row.logicalName],\r\n\t\t\t[LayoutColumn.PhysicalColumnName, row.columnName],\r\n\t\t\t[LayoutColumn.LogicalType, row.databaseType],\r\n\t\t\t[LayoutColumn.ClrType, row.clrType],\r\n\t\t\t[LayoutColumn.CheckConstraint, row.check],\r\n\t\t\t[LayoutColumn.Comment, row.comment],\r\n\t\t]);\r\n\t\treturn [ ...map.keys() ]\r\n\t\t\t.sort()\r\n\t\t\t.map(i => map.get(i)!)\r\n\t\t;\r\n\t}\r\n\r\n\tprivate toLayoutDatabase(row: LayoutRowData): string {\r\n\t\tvar sql = `[${row.columnName}] ${row.databaseType}`;\r\n\t\tif(row.isNotNull) {\r\n\t\t\tsql += \" not null\";\r\n\t\t}\r\n\t\tif(row.check.length) {\r\n\t\t\tsql += ` check( ${row.check} )`\r\n\t\t}\r\n\r\n\t\tif(row.logicalName.length || row.comment.length) {\r\n\t\t\tsql += ` /* ${row.logicalName}`;\r\n\t\t\tif(row.logicalName.length) {\r\n\t\t\t\tsql += ' ';\r\n\t\t\t}\r\n\t\t\tsql += row.comment;\r\n\t\t\tsql += \" */\";\r\n\t\t}\r\n\r\n\t\treturn sql;\r\n\t}\r\n\r\n\tprivate getMarkdownCellSpace(data:ReadonlyArray<ReadonlyArray<string>>): ReadonlyArray<number> {\r\n\r\n\t\tvar result = new Array<number>(data[0].length).fill(0);\r\n\r\n\t\tfor(var col = 0; col < data[0].length; col++) {\r\n\t\t\tfor(var row of data) {\r\n\t\t\t\tvar colLength = countSingleChar(row[col]);\r\n\t\t\t\tresult[col] = Math.max(result[col], colLength);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn result;\r\n\t}\r\n\r\n\tprivate toMarkdownCell(value: string, length: number, position: MarkdownTablePosition) {\r\n\t\tvar valueLength = countSingleChar(value);\r\n\r\n\t\tif(valueLength == length) {\r\n\t\t\treturn value;\r\n\t\t}\r\n\t\tswitch(position) {\r\n\t\t\tcase MarkdownTablePosition.left:\r\n\t\t\t\treturn value + ' '.repeat(length - valueLength);\r\n\r\n\t\t\tcase MarkdownTablePosition.right:\r\n\t\t\t\treturn ' '.repeat(length - valueLength) + value;\r\n\r\n\t\t\tcase MarkdownTablePosition.center:\r\n\t\t\treturn ' '.repeat((length - valueLength) / 2) + value + ' '.repeat(((length - valueLength) / 2) + ((length - valueLength) % 2));\r\n\t\t}\r\n\t}\r\n\r\n\tprivate toMarkdownTableCells(cells: ReadonlyArray<string>, positions: Map<number, MarkdownTablePosition>, space: ReadonlyArray<number>):ReadonlyArray<string> {\r\n\t\tvar result = new Array<string>(cells.length);\r\n\t\tfor(var i = 0; i < cells.length; i++) {\r\n\t\t\tvar position = positions.get(i) || MarkdownTablePosition.left;\r\n\t\t\tvar value = this.toMarkdownCell(cells[i], space[i], position);\r\n\t\t\tresult[i] = value;\r\n\t\t}\r\n\r\n\t\treturn result;\r\n\t}\r\n\r\n\tprivate toMarkdown(header: ReadonlyArray<string>, positions: Map<number, MarkdownTablePosition>, contents: ReadonlyArray<ReadonlyArray<string>>) {\r\n\t\tvar cellSpace = this.getMarkdownCellSpace([header].concat(contents));\r\n\r\n\t\tvar lines = new Array<string>();\r\n\t\tlines.push('| ' + this.toMarkdownTableCells(header, positions, cellSpace).join(' | ') + ' |');\r\n\t\tvar sep = '|'\r\n\t\tfor(var i = 0; i < header.length; i++) {\r\n\t\t\tvar position = positions.get(i) ||  MarkdownTablePosition.left;\r\n\t\t\tswitch(position) {\r\n\t\t\t\tcase MarkdownTablePosition.center:\r\n\t\t\t\t\tsep += ':' + '-'.repeat(cellSpace[i]) + ':';\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase MarkdownTablePosition.right:\r\n\t\t\t\t\tsep += '-'.repeat(cellSpace[i] + 1) + ':';\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase MarkdownTablePosition.left:\r\n\t\t\t\t\tsep += ':' + '-'.repeat(cellSpace[i] + 1);\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tsep += '|';\r\n\t\t}\r\n\t\tlines.push(sep);\r\n\r\n\t\tfor(var content of contents) {\r\n\t\t\tlines.push('| ' + this.toMarkdownTableCells(content, positions, cellSpace).join(' | ') + ' |');\r\n\t\t}\r\n\r\n\t\treturn lines.join(\"\\r\\n\");\r\n\t}\r\n\r\n\tprivate exportLayout(tableName: string, layoutElement: HTMLElement):ExportData {\r\n\t\tvar rowElements = getElementsByName<HTMLTableRowElement>(layoutElement, LayoutBlockName.LayoutRowRoot);\r\n\r\n\t\tvar markdownColumns = new Array<ReadonlyArray<string>>();\r\n\t\tvar databaseColumns = new Array<string>();\r\n\r\n\t\tvar primaryKeys = new Array<string>();\r\n\t\tvar foreingKeys = new Map<string, Array<{column:string, targetColumn:string}>>();\r\n\t\tfor(var rowElement of rowElements) {\r\n\t\t\tvar rowData = this.getLayoutRowData(rowElement);\r\n\r\n\t\t\tvar layoutRow = this.toLayoutMarkdown(rowData);\r\n\t\t\tmarkdownColumns.push(layoutRow);\r\n\r\n\t\t\tvar databaseCol = this.toLayoutDatabase(rowData);\r\n\t\t\tdatabaseColumns.push(databaseCol);\r\n\r\n\t\t\tif(rowData.isPrimary) {\r\n\t\t\t\tprimaryKeys.push(rowData.columnName);\r\n\t\t\t}\r\n\t\t\tif(rowData.foreignTable.length && rowData.foreignColumn.length) {\r\n\t\t\t\tif(!foreingKeys.has(rowData.foreignTable)) {\r\n\t\t\t\t\tforeingKeys.set(rowData.foreignTable, new Array<{column:string, targetColumn:string}>());\r\n\t\t\t\t}\r\n\t\t\t\tvar table = foreingKeys.get(rowData.foreignTable)!;\r\n\t\t\t\ttable.push({column: rowData.columnName, targetColumn: rowData.foreignColumn});\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tvar exportData = {\r\n\t\t\tmarkdown: this.toMarkdown(\r\n\t\t\t\tLayoutMarkdownHeaders,\r\n\t\t\t\tnew Map([\r\n\t\t\t\t\t[LayoutColumn.PrimaryKey, MarkdownTablePosition.center],\r\n\t\t\t\t\t[LayoutColumn.NotNull, MarkdownTablePosition.center],\r\n\t\t\t\t]),\r\n\t\t\t\tmarkdownColumns\r\n\t\t\t),\r\n\t\t\tdatabase: '',\r\n\t\t} as ExportData;\r\n\r\n\t\tvar sql = `create table [${tableName}] (\\r\\n`;\r\n\t\tsql += \"\\t\" + databaseColumns.join(\",\\r\\n\\t\");\r\n\t\tif(primaryKeys.length) {\r\n\t\t\tsql += \",\\r\\n\";\r\n\t\t\tsql += \"\\tprimary key(\\r\\n\"\r\n\t\t\tsql += \"\\t\\t\" + primaryKeys.map(i => `[${i}]`).join(\",\\r\\n\\t\\t\")\r\n\t\t\tsql += \"\\r\\n\\t)\";\r\n\t\t};\r\n\t\tif(foreingKeys.size) {\r\n\t\t\tfor(var [targetTableName, column] of foreingKeys) {\r\n\t\t\t\tsql += \",\\r\\n\";\r\n\t\t\t\tsql += `\\tforeign key(${column.map(i => `[${i.column}]`).join(', ')}) references [${targetTableName}](${column.map(i => `[${i.targetColumn}]`).join(', ')})`\r\n\t\t\t}\r\n\t\t}\r\n\t\tsql += \"\\r\\n)\\r\\n\";\r\n\t\tsql += \";\\r\\n\";\r\n\r\n\t\texportData.database = sql;\r\n\r\n\t\treturn exportData;\r\n\t}\r\n\r\n\tprivate getIndexRowData(rowElement: HTMLTableRowElement):IndexRowData {\r\n\t\tvar row = {\r\n\t\t\tisUnique: getElementByName<HTMLInputElement>(rowElement, IndexBlockName.UniqueKey).checked,\r\n\t\t\tcolumns: [ ...getElementsByName<HTMLInputElement>(rowElement, IndexBlockName.ColumnName)]\r\n\t\t\t\t.map(i => i.value)\r\n\t\t\t,\r\n\t\t} as IndexRowData;\r\n\r\n\t\treturn row;\r\n\t}\r\n\r\n\tprivate toIndexMarkdown(row:IndexRowData): ReadonlyArray<string> {\r\n\t\tvar result = [toCheckMark(row.isUnique)];\r\n\t\tresult.push(...row.columns);\r\n\t\treturn result;\r\n\t}\r\n\r\n\tprivate toIndexDatabase(tableName: string, counter: number, row:IndexRowData): string {\r\n\t\tvar sql = `--// index: idx_${tableName}_${counter}\\r\\n`;\r\n\t\tsql += \"create\";\r\n\t\tif(row.isUnique) {\r\n\t\t\tsql += \" unique\";\r\n\t\t}\r\n\t\tsql += \" index\";\r\n\t\tsql += ` [idx_${tableName}_${counter}]`;\r\n\t\tsql += \" on\";\r\n\t\tsql += ` ${tableName}(\\r\\n`;\r\n\t\tsql += row.columns.map(i => `\\t[${i}]`).join(\",\\r\\n\") + \"\\r\\n\";\r\n\t\tsql += \")\\r\\n\";\r\n\t\tsql += \";\\r\\n\";\r\n\r\n\t\treturn sql;\r\n\t}\r\n\r\n\tprivate exportIndex(tableName: string, indexElement: HTMLElement):ExportData {\r\n\t\tvar rowElements = getElementsByName<HTMLTableRowElement>(indexElement, IndexBlockName.IndexRowRoot);\r\n\r\n\t\tvar markdownColumns = new Array<ReadonlyArray<string>>();\r\n\t\tvar databaseStatements = new Array<string>();\r\n\r\n\t\tif(!rowElements.length) {\r\n\t\t\treturn {\r\n\t\t\t\tmarkdown: '',\r\n\t\t\t\tdatabase: '',\r\n\t\t\t} as ExportData;\r\n\t\t}\r\n\r\n\t\tvar indexCounter = 1;\r\n\t\tfor(var rowElement of rowElements) {\r\n\t\t\tvar rowData = this.getIndexRowData(rowElement);\r\n\r\n\t\t\tvar markdownRow = this.toIndexMarkdown(rowData);\r\n\t\t\tmarkdownColumns.push(markdownRow);\r\n\r\n\t\t\tvar databaseIndex = this.toIndexDatabase(tableName, indexCounter++, rowData);\r\n\t\t\tdatabaseStatements.push(databaseIndex);\r\n\t\t}\r\n\t\tvar exportData = {\r\n\t\t\tmarkdown: this.toMarkdown(\r\n\t\t\t\tIndexMarkdownHeaders,\r\n\t\t\t\tnew Map([\r\n\t\t\t\t\t[0, MarkdownTablePosition.center]\r\n\t\t\t\t]),\r\n\t\t\t\tmarkdownColumns\r\n\t\t\t),\r\n\t\t\tdatabase: databaseStatements.join(\"\\r\\n\"),\r\n\t\t} as ExportData;\r\n\r\n\t\treturn exportData;\r\n\t}\r\n\r\n\tprivate exportBlock(blockElement: HTMLElement) {\r\n\t\tvar tableBlockElement = getElementByName<HTMLInputElement>(blockElement, 'block-table');\r\n\t\tvar tableName = this.exportTable(tableBlockElement);\r\n\r\n\t\tvar layoutElement = getElementByName<HTMLInputElement>(blockElement, 'block-layout');\r\n\t\tvar layout = this.exportLayout(tableName, layoutElement);\r\n\r\n\t\tvar indexElement = getElementByName<HTMLInputElement>(blockElement, 'block-index');\r\n\t\tvar index = this.exportIndex(tableName, indexElement);\r\n\r\n\t\treturn {\r\n\t\t\ttable: tableName,\r\n\t\t\tlayout: layout,\r\n\t\t\tindex: index,\r\n\t\t}\r\n\t}\r\n\r\n\tpublic export() {\r\n\t\tvar markdowns = Array<string>();\r\n\t\tvar databaseTables = Array<string>();\r\n\t\tvar databaseIndexs = Array<string>();\r\n\r\n\t\tvar exportItems = [...getElementsByName(this.viewElement, 'block-root')]\r\n\t\t\t.map(i => this.exportBlock(i))\r\n\t\t;\r\n\r\n\t\tfor(var exportItem of exportItems) {\r\n\t\t\tvar markdown = \"\\r\\n___\\r\\n\\r\\n\";\r\n\t\t\tmarkdown += `## ${exportItem.table}\\r\\n`;\r\n\t\t\tmarkdown += \"\\r\\n\";\r\n\r\n\t\t\tmarkdown += \"### layout\\r\\n\";\r\n\t\t\tmarkdown += \"\\r\\n\";\r\n\t\t\tmarkdown += exportItem.layout.markdown;\r\n\t\t\tmarkdown += \"\\r\\n\";\r\n\t\t\tmarkdown += \"\\r\\n\";\r\n\r\n\t\t\tmarkdown += \"### index\\r\\n\";\r\n\t\t\tmarkdown += \"\\r\\n\";\r\n\t\t\tif(exportItem.index.markdown.length) {\r\n\t\t\t\tmarkdown += exportItem.index.markdown;\r\n\t\t\t} else {\r\n\t\t\t\tmarkdown += \"*NONE*\";\r\n\t\t\t}\r\n\t\t\tmarkdown += \"\\r\\n\";\r\n\t\t\tmarkdown += \"\\r\\n\";\r\n\r\n\t\t\tmarkdowns.push(markdown);\r\n\r\n\t\t\tvar databaseTable = `--// table: ${exportItem.table}\\r\\n`;\r\n\t\t\tdatabaseTable += exportItem.layout.database;\r\n\r\n\t\t\tdatabaseTables.push(databaseTable);\r\n\r\n\t\t\tdatabaseIndexs.push(exportItem.index.database);\r\n\t\t}\r\n\r\n\t\tthis.defineElement.value = markdowns.join(\"\\r\\n\");\r\n\t\tthis.sqlElement.value = databaseTables.join(\"\\r\\n\") + \"\\r\\n\" + databaseIndexs.join(\"\\r\\n\");\r\n\r\n\t}\r\n\r\n\tprivate copyElement(element: HTMLTextAreaElement) {\r\n\t\telement.focus();\r\n\t\telement.select();\r\n\t\tdocument.execCommand('copy');\r\n\t}\r\n\tpublic copyDefine() {\r\n\t\tthis.copyElement(this.defineElement);\r\n\t}\r\n\tpublic copySql() {\r\n\t\tthis.copyElement(this.sqlElement);\r\n\t}\r\n}\r\n\r\n// ぶんかつがだるい\r\nconst baseIds = ['main', 'file'];\r\nfor(var baseId of baseIds) {\r\n\tvar viewElement = document.getElementById(`view-${baseId}`);\r\n\tif(viewElement) {\r\n\t\tvar erm = new EntityRelationManager(\r\n\t\t\tviewElement as HTMLDivElement,\r\n\t\t\tdocument.getElementById(`command-${baseId}`) as HTMLDivElement,\r\n\t\t\tdocument.getElementById(`define-${baseId}`) as HTMLTextAreaElement,\r\n\t\t\tdocument.getElementById(`sql-${baseId}`) as HTMLTextAreaElement\r\n\t\t);\r\n\t\term.build();\r\n\t\term.export();\r\n\t}\r\n}\r\n"]}