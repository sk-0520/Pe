<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output encoding="utf-8" extension="" #>
<#
    var items = TokenLoader.ParseFromDefault(Host).ToList();

    var symbolItems = items
        .Where(i => i.IsOperator || i.IsBracket || i.IsComment)
        .ToArray()
    ;

    // 複数記号のトークン
    var multiSymbolItems = symbolItems
        .Where(i => i.Value.Length > 1)
        .ToList()
    ;

    var multiSymbolMaxCount = multiSymbolItems
        .Max(i => i.Value.Length)
    ;

    // 複数記号に含まれない単体記号のトークン寄せ集め
    var singleSymbolItems = symbolItems
        .Where(i => i.Value.Length == 1)
        .Where(i => !multiSymbolItems.Any(j => j.Value.StartsWith(i.Value)))
    ;

    var singleSymbolItemCharacters = symbolItems
        .Where(i => i.Value.Length == 1)
        .Select(i => i.ToSingleSymbolCharacter())
        .Distinct()
        .ToList()
    ;

#>
/* 自動生成: lexical_analyzer.z.token.gen.c.tt */
#include "../Pe.Library/common.h"

#include "lexical_analyzer.h"
#include "lexical_analyzer.z.token.h"

#define MULTI_CHAR_SYMBOL_COUNT (<#= multiSymbolMaxCount #>)
typedef struct tag_MULTI_SYMBOL_TOKEN
{
    TCHAR symbols[MULTI_CHAR_SYMBOL_COUNT];
    /// <summary>
    /// 順々のトークン種別。
    /// </summary>
    /// <list type="number">
    ///     <listheader>
    ///         <term>【定義見出し・見出し】</term>
    ///         <description>【説明見出し】</description>
    ///     </listheader>
    ///     <item>
    ///         <description>symbols[0] のみのトークン</description>
    ///     </item>
    ///     <item>
    ///         <description>symbols[0][1]のトークン</description>
    ///     </item>
    ///     <item>
    ///         <description>symbols[0][1][N..]のトークン</description>
    ///     </item>
    /// </list>
    TOKEN_KIND kinds[MULTI_CHAR_SYMBOL_COUNT];
    /// <summary>
    /// 真の場合にコメント中は無視する
    /// </summary>
    bool skip_comments[MULTI_CHAR_SYMBOL_COUNT];
} MULTI_SYMBOL_TOKEN;

static const SINGLE_SYMBOL_TOKEN script_single_symbol_tokens[] = {
<# foreach(var item in singleSymbolItems) { #>
    {
        .symbol = '<#= item.ToSingleSymbolCharacter() #>',
        .kind = <#= TokenUtility.ToDefineKind(item, 0, false) #>,
    },
<# } #>
};

static const MULTI_SYMBOL_TOKEN script_multi_symbol_tokens[] = {
<# foreach(var group in multiSymbolItems.GroupBy(i => i.Value[0])) { #>
<#
    var groupItems = group.ToList();
#>
    // <#= group.Key #>
<# for(var i = 0; i < groupItems.Count; i++) { #>
<#
    var item = groupItems[i];
    var isLast = i == groupItems.Count - 1;

    var multiSymbolChars = item.ToMultiSymbolCharacters().ToList();
    for(var j = multiSymbolChars.Count; j < multiSymbolMaxCount; j++) {
        multiSymbolChars.Add("\\0");
    }

    var multiSymbolTokens = new string[multiSymbolMaxCount];
    for(var j = 0; j < multiSymbolMaxCount; j++) {
        if(item.Value.Length <= j) {
            multiSymbolTokens[j] = TokenUtility.None;
            continue;
        }

        var s = item.Value.Substring(0, j + 1);
        var existsItem = symbolItems.First(x => x.Value == s);
        if(j == 0 && !isLast) {
            multiSymbolTokens[j] = TokenUtility.None;
            continue;
        }
        var existsKind = TokenUtility.ToDefineKind(existsItem, 0, false);
        multiSymbolTokens[j] = existsKind;
    }

    var skipComments = Enumerable.Repeat(true, multiSymbolMaxCount).ToArray();
    if(item.CommentDelimiter) {
        skipComments[item.Value.Length - 1] = false;
    }
#>
    {
        .symbols = { <#= string.Join(", ", multiSymbolChars.Select(x => "\'" + x + "\'"))  #> },
        .kinds = { <#= string.Join(", ", multiSymbolTokens) #> },
        .skip_comments = { <#= string.Join(", ", skipComments.Select(x => x.ToString().ToLowerInvariant())) #> },
    },
<# } #>
<# } #>
};

static const TCHAR script_symbol_tokens[] = {
<# foreach(var c in singleSymbolItemCharacters) { #>
    '<#= c #>',
<# } #>
};

bool is_comment_token_kind(TOKEN_KIND kind)
{
    return
        kind == TOKEN_KIND_COMMENT_LINE
        ||
        kind == TOKEN_KIND_COMMENT_BLOCK_BEGIN
        ;
}

bool is_synbol_token(TCHAR c)
{
    for (size_t i = 0; i < SIZEOF_ARRAY(script_symbol_tokens); i++) {
        if (c == script_symbol_tokens[i]) {
            return true;
        }
    }

    return false;
}

const SINGLE_SYMBOL_TOKEN* find_single_symbol_token(TCHAR c)
{
    for (size_t i = 0; i < SIZEOF_ARRAY(script_single_symbol_tokens); i++) {
        if (script_single_symbol_tokens[i].symbol == c) {
            return script_single_symbol_tokens + i;
        }
    }

    return NULL;
}

size_t read_multi_symbol_token(TOKEN_RESULT* token_result, const TEXT* source, size_t start_index, TOKEN_KIND last_token_kind, const SOURCE_POSITION* source_position, const PROJECT_SETTING* project_setting)
{
    TCHAR symbols[MULTI_CHAR_SYMBOL_COUNT];
    const size_t symbols_length = SIZEOF_ARRAY(symbols);
    for (size_t i = 0; i < symbols_length; i++) {
        symbols[i] = get_relative_character(source, start_index, i);
    }

    for (size_t i = 0; i < SIZEOF_ARRAY(script_multi_symbol_tokens); i++) {
        const MULTI_SYMBOL_TOKEN* multi_symbol_token = script_multi_symbol_tokens + i;

        // 一文字目が合致しないのであればどう頑張っても比較する意味がない
        if (multi_symbol_token->symbols[0] != symbols[0]) {
            continue;
        }

        // 終端から最初に向かって戻していく
        for (size_t j = symbols_length; j; j--) {
            size_t index = j - 1;
            if (!symbols[index] || multi_symbol_token->kinds[index] == TOKEN_KIND_NONE) {
                continue;
            }

            bool all_symbols_match = true;
            for (size_t k = 0; all_symbols_match && k < j; k++) {
                all_symbols_match &= symbols[k] == multi_symbol_token->symbols[k];
            }
            if (!all_symbols_match) {
                continue;
            }

            if (!is_comment_token_kind(last_token_kind) || !multi_symbol_token->skip_comments[index]) {
                add_token_kind(&token_result->token, multi_symbol_token->kinds[index], source_position);
                return j;
            }
        }
    }

    return 0;
}

<#@ include file="lexical_token.t4" once="true" #>
