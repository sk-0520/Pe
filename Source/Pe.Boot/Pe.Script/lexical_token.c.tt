<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output encoding="utf-8" extension="" #>
<#
    var items = TokenLoader.ParseFromDefault(Host).ToList();
#>
/* 自動生成: lexical_token.c.tt */
#include "../Pe.Library/debug.h"
#include "../Pe.Library/object_list.h"
#include "lexical_token.h"

static const TEXT script__token_kind_member_names[] = {
<# foreach(var item in items) { #>
    static_text("<#= TokenUtility.ToDefineKind(item, 0, false) #>"),
<# } #>
};

const TEXT* get_member_name_by_token_kind(<#= TokenUtility.TokenKind #> kind)
{
    assert(kind < SIZEOF_ARRAY(script__token_kind_member_names));

    return script__token_kind_member_names + kind;
}


void add_token_kind(OBJECT_LIST* tokens, <#= TokenUtility.TokenKind #> kind, const SOURCE_POSITION* source_position)
{
    TOKEN token = {
        .kind = kind,
        .position = *source_position,
        .type = TOKEN_VALUE_TYPE_NONE,
        .value = {
            .none = NULL,
        },
    };

    push_object_list(tokens, &token);
}

static void add_token_value_core(OBJECT_LIST* tokens, <#= TokenUtility.TokenKind #> kind, TOKEN_VALUE_TYPE type, TOKEN_VALUE value, const SOURCE_POSITION* source_position)
{
    TOKEN token = {
        .kind = kind,
        .position = *source_position,
        .type = type,
        .value = value,
    };

    push_object_list(tokens, &token);
}

void add_token_word(OBJECT_LIST* tokens, <#= TokenUtility.TokenKind #> kind, const TEXT* word, const SOURCE_POSITION* source_position)
{
    TOKEN_VALUE token_value = {
        .word = clone_text(word, SCRIPT_MEMORY),
    };
    add_token_value_core(tokens, kind, TOKEN_VALUE_TYPE_STRING, token_value, source_position);
}

void add_token_integer(OBJECT_LIST* tokens, <#= TokenUtility.TokenKind #> kind, ssize_t value, const SOURCE_POSITION* source_position)
{
    TOKEN_VALUE token_value = {
        .integer = value,
    };
    add_token_value_core(tokens, kind, TOKEN_VALUE_TYPE_INTEGER, token_value, source_position);
}

void add_token_decimal(OBJECT_LIST* tokens, <#= TokenUtility.TokenKind #> kind, double value, const SOURCE_POSITION* source_position)
{
    TOKEN_VALUE token_value = {
        .decimal = value,
    };
    add_token_value_core(tokens, kind, TOKEN_VALUE_TYPE_DECIMAL, token_value, source_position);
}

<#@ include file="lexical_token.t4" once="true" #>
