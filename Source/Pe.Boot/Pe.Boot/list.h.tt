<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output encoding="utf-8" extension="" #>
<#
    var items = new[] {
        "uint8_t",
        "uint16_t",
        "uint32_t",
    }.Select(i => new {
        ValueType = i,
        BaseName = i.Replace("_t", string.Empty)
    }).Select(i => new {
        ValueType = i.ValueType,
        BaseName = i.BaseName,
        TypeName = "PRIMITIVE_LIST_TYPE_" + i.BaseName.ToUpperInvariant(),
        AliasList = "PRIMITIVE_LIST_" + i.BaseName.ToUpperInvariant(),
        TypeByteWidth = int.Parse(Regex.Match(i.ValueType, @"(\d+)").Groups[1].Value) / 8,
    });
#>
#pragma once
#include <stdint.h>

#include "res_check.h"

typedef enum tag_PRIMITIVE_LIST_TYPE
{
<# foreach(var item in items) { #>
    <#= item.TypeName #>,
<# } #>
} PRIMITIVE_LIST_TYPE;

typedef struct tag_PRIMITIVE_LIST
{
    /// <summary>
    /// 型に合わせた長さ。
    /// </summary>
    size_t length;
    /// <summary>
    /// 実体。
    /// </summary>
    void* buffer;
    struct
    {
        /// <summary>
        /// 型。
        /// </summary>
        PRIMITIVE_LIST_TYPE type;
        /// <summary>
        /// 確保済みサイズ(バイト幅)。
        /// </summary>
        size_t capacity_bytes;
    } library;

} PRIMITIVE_LIST;

<# foreach(var item in items) { #>
typedef PRIMITIVE_LIST <#= item.AliasList #>;
<# } #>

/// <summary>
/// リストの生成。
/// </summary>
/// <param name="list_type"></param>
/// <param name="capacity"></param>
/// <returns>解放が必要。</returns>
PRIMITIVE_LIST RC_HEAP_FUNC(new_primitive_list, PRIMITIVE_LIST_TYPE list_type, size_t capacity);
#ifdef RES_CHECK
#   define new_primitive_list(list_type, capacity) RC_HEAP_WRAP(new_primitive_list, (list_type), (capacity))
#endif

/// <summary>
/// リストの解放。
/// </summary>
/// <param name="list"></param>
/// <returns></returns>
bool RC_HEAP_FUNC(free_primitive_list, PRIMITIVE_LIST* list);
#ifdef RES_CHECK
#   define free_primitive_list(list) RC_HEAP_WRAP(free_primitive_list, (list))
#endif

<# foreach(var item in items) { #>
bool push_list_<#= item.BaseName #>(<#= item.AliasList #>* list, <#= item.ValueType #> value);
<# } #>

<# foreach(var item in items) { #>
bool pop_list_<#= item.BaseName #>(<#= item.ValueType #>* result, <#= item.AliasList #>* list);
<# } #>

<# foreach(var item in items) { #>
bool get_list_<#= item.BaseName #>(<#= item.ValueType #>* result, <#= item.AliasList #>* list, size_t index);
<# } #>

<# foreach(var item in items) { #>
<#= item.ValueType #>* reference_list_<#= item.BaseName #>(<#= item.AliasList #>* list);
<# } #>
