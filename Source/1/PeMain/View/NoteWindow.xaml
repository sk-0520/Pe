<app_main_view_parts_window:ViewModelCommonDataWindow
  xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
  xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
  xmlns:i="http://schemas.microsoft.com/expression/2010/interactivity"
  xmlns:xctk="http://schemas.xceed.com/wpf/xaml/toolkit"
  xmlns:app_library_sharedlibrary_view_converter="clr-namespace:ContentTypeTextNet.Library.SharedLibrary.View.Converter;assembly=ContentTypeTextNet.SharedLibrary"
  xmlns:app_library_pedata_define="clr-namespace:ContentTypeTextNet.Pe.Library.PeData.Define;assembly=PeData"
  xmlns:app_main="clr-namespace:ContentTypeTextNet.Pe.PeMain"
  xmlns:app_main_viewmodel="clr-namespace:ContentTypeTextNet.Pe.PeMain.ViewModel"
  xmlns:app_main_view_parts_attached="clr-namespace:ContentTypeTextNet.Pe.PeMain.View.Parts.Attached"
  xmlns:app_main_view_parts_control="clr-namespace:ContentTypeTextNet.Pe.PeMain.View.Parts.Control"
  xmlns:app_main_view_parts_converter="clr-namespace:ContentTypeTextNet.Pe.PeMain.View.Parts.Converter"
  xmlns:app_main_view_parts_window="clr-namespace:ContentTypeTextNet.Pe.PeMain.View.Parts.Window"
  x:Class="ContentTypeTextNet.Pe.PeMain.View.NoteWindow"
  x:TypeArguments="app_main_viewmodel:NoteViewModel"
  x:Name="root"
  ShowInTaskbar="False"
  WindowStyle="None"
  ResizeMode="CanResize"
  AllowsTransparency="True"
  WindowStartupLocation="Manual"
  app_main_view_parts_attached:Language.Word="window/note"
  Title="NoteWindow"
  Left="{Binding WindowLeft, Mode=TwoWay}"
  Top="{Binding WindowTop, Mode=TwoWay}"
  Width="{Binding WindowWidth, Mode=TwoWay}"
  Height="{Binding WindowHeight, Mode=TwoWay}"
  Visibility="{Binding Visibility}"
  Topmost="{Binding IsTopmost}"
  BorderThickness="{Binding ResizeThickness}"
  BorderBrush="{Binding BorderBrush}"
  ShowActivated="False"

  xmlns:d="http://schemas.microsoft.com/expression/blend/2008" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" mc:Ignorable="d"
  d:DesignWidth="300" d:DesignHeight="300"
>
  <app_main_view_parts_window:CommonDataWindow.Resources>
    <ResourceDictionary>
      <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="/View/Parts/Resource/ImageDictionary.xaml"/>
        <ResourceDictionary Source="/View/Parts/Resource/ColorPickerDictionary.xaml"/>
        <ResourceDictionary Source="/View/Parts/Resource/LabelDictionary.xaml"/>
        <ResourceDictionary Source="/View/Parts/Resource/FontSelectDictionary.xaml"/>
        <ResourceDictionary Source="/View/Parts/Resource/RadioButtonDictionary.xaml"/>
        <ResourceDictionary Source="/View/Parts/Resource/CheckBoxDictionary.xaml"/>
      </ResourceDictionary.MergedDictionaries>
      <BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter" />
      <app_library_sharedlibrary_view_converter:LogicalNotConverter x:Key="LogicalNotConverter"/>
      <app_library_sharedlibrary_view_converter:BooleanFontWeightConverter x:Key="BooleanFontWeightConverter" />
      <app_library_sharedlibrary_view_converter:BooleanFontStyleConverter x:Key="BooleanFontStyleConverter" />
      <app_library_sharedlibrary_view_converter:EnumToBooleanConverter x:Key="EnumToBooleanConverter" />
      <app_library_sharedlibrary_view_converter:LogicalMultiAndConverter x:Key="LogicalMultiAndConverter" />
      <app_library_sharedlibrary_view_converter:FontFamilyToNameConverter x:Key="FontFamilyToNameConverter" />
      <app_main_view_parts_converter:BooleanToTextWrappingConverter x:Key="BooleanToTextWrappingConverter" />
    </ResourceDictionary>
  </app_main_view_parts_window:CommonDataWindow.Resources>
  <app_main_view_parts_window:CommonDataWindow.Foreground>
    <SolidColorBrush Color="{Binding ForeColor}" />
  </app_main_view_parts_window:CommonDataWindow.Foreground>
  <app_main_view_parts_window:CommonDataWindow.Background>
    <SolidColorBrush Color="{Binding BackColor}" />
  </app_main_view_parts_window:CommonDataWindow.Background>
  <i:Interaction.Triggers>
    <i:EventTrigger EventName="Deactivated">
      <i:InvokeCommandAction Command="{Binding SaveIndexCommnad}"/>
    </i:EventTrigger>
  </i:Interaction.Triggers>
  <Grid>
    <Grid.Background>
      <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
        <GradientStop Color="#A0ffffff" Offset="0" />
        <GradientStop Color="Transparent" Offset="0.4"/>
        <GradientStop Color="Transparent" Offset="0.8"/>
        <GradientStop Color="#20101010" Offset="1"/>
      </LinearGradientBrush>
    </Grid.Background>
    <Grid.RowDefinitions>
      <RowDefinition Height="{Binding TitleHeight, Mode=OneWay}"/>
      <RowDefinition Height="*"/>
    </Grid.RowDefinitions>
    <Grid Grid.Row="0">
      <Grid.Background>
        <SolidColorBrush Color="{Binding BackColor}" />
      </Grid.Background>
      <Grid.Resources>
        <Style x:Key="ButtonBase">
          <Setter Property="Control.Background" Value="Transparent" />
          <Setter Property="Control.BorderBrush" Value="Transparent" />
          <Setter Property="Control.BorderThickness" Value="1" />
          <Setter Property="Control.Focusable" Value="False"/>
        </Style>
        <SolidColorBrush x:Key="ButtonOver" Color="Transparent"  />
        <SolidColorBrush x:Key="ButtonPressed" Color="Transparent"  />
        <SolidColorBrush x:Key="ButtonChecked" Color="#80777777"  />
        <Style TargetType="Button" BasedOn="{StaticResource ButtonBase}">
          <Setter Property="Template">
            <Setter.Value>
              <ControlTemplate TargetType="Button">
                <Border Background="{TemplateBinding Background}" HorizontalAlignment="Center" VerticalAlignment="Stretch">
                  <ContentPresenter VerticalAlignment="Center" />
                </Border>
              </ControlTemplate>
            </Setter.Value>
          </Setter>
          <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
              <Setter Property="Background" Value="{StaticResource ButtonOver}" />
            </Trigger>
            <Trigger Property="IsPressed" Value="True" >
              <Setter Property="Background" Value="{StaticResource ButtonPressed}" />
            </Trigger>
          </Style.Triggers>
        </Style>
        <Style TargetType="ToggleButton" BasedOn="{StaticResource ButtonBase}">
          <Setter Property="Template">
            <Setter.Value>
              <ControlTemplate TargetType="ToggleButton">
                <Border Background="{TemplateBinding Background}" HorizontalAlignment="Center" VerticalAlignment="Stretch">
                  <ContentPresenter VerticalAlignment="Center" />
                </Border>
              </ControlTemplate>
            </Setter.Value>
          </Setter>
          <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
              <Setter Property="Background" Value="{StaticResource ButtonOver}" />
            </Trigger>
            <Trigger Property="IsPressed" Value="True" >
              <Setter Property="Background" Value="{StaticResource ButtonPressed}" />
            </Trigger>
            <Trigger Property="IsChecked" Value="True">
              <Setter Property="Background" Value="{StaticResource ButtonChecked}" />
            </Trigger>
          </Style.Triggers>
        </Style>
        <Style x:Key="CaptionCommand" TargetType="TextBlock">
          <Setter Property="FontFamily" Value="Webdings" />
          <Setter Property="Foreground" Value="{Binding ForeColorBrush}" />
          <!--<Setter Property="VerticalAlignment" Value="Stretch"/>-->
        </Style>
      </Grid.Resources>
      <Grid.ColumnDefinitions>
        <ColumnDefinition Width="*" />
        <ColumnDefinition Width="Auto" />
        <ColumnDefinition Width="Auto" />
        <ColumnDefinition Width="Auto" />
      </Grid.ColumnDefinitions>
      <VirtualizingStackPanel x:Name="caption" Grid.Column="0">
        <TextBlock Text="{Binding Name}" Visibility="{Binding TitleCaptionVisibility}" Padding="{Binding CaptionPadding,Mode=OneTime}" />
        <TextBox x:Name="title" BorderThickness="0" Text="{Binding Name}" Visibility="{Binding TitleEditVisibility}" Padding="{Binding CaptionPadding,Mode=OneTime}" >
          <i:Interaction.Triggers>
            <i:EventTrigger EventName="LostFocus">
              <i:InvokeCommandAction Command="{Binding HideTitleEditCommand}" />
            </i:EventTrigger>
          </i:Interaction.Triggers>
          <TextBox.InputBindings>
            <KeyBinding Command="{Binding Path=ReturnTitleCommand}" Key="Enter" />
          </TextBox.InputBindings>
        </TextBox>
      </VirtualizingStackPanel>
      <ToggleButton Grid.Column="1" Visibility="{Binding CaptionButtonVisibility}" IsChecked="{Binding IsCompacted}" app_main_view_parts_attached:Language.Hint="note/caption/small">
        <TextBlock>
          <TextBlock.Style>
            <Style TargetType="TextBlock" BasedOn="{StaticResource CaptionCommand}">
              <Setter Property="Text" Value="0" />
              <Style.Triggers>
                <DataTrigger Binding="{Binding IsCompacted}" Value="True">
                  <Setter Property="Text" Value="1" />
                </DataTrigger>
              </Style.Triggers>
            </Style>
          </TextBlock.Style>
        </TextBlock>
        <!-- 0 1 -->
      </ToggleButton>
      <ToggleButton Grid.Column="2" Visibility="{Binding CaptionButtonVisibility}" IsChecked="{Binding IsTopmost}" app_main_view_parts_attached:Language.Hint="note/caption/topmost">
        <TextBlock Text="ë" Style="{StaticResource CaptionCommand}" />
      </ToggleButton>
      <Button Grid.Column="3" Visibility="{Binding CaptionButtonVisibility}" Command="{Binding HideCommand}"  app_main_view_parts_attached:Language.Hint="note/caption/hide">
        <TextBlock Text="r" Style="{StaticResource CaptionCommand}" />
      </Button>
    </Grid>
    <ContentControl x:Name="content" Grid.Row="1">
      <ContentControl.Resources>
        <Style x:Key="Editor" TargetType="TextBoxBase">
          <Style.Triggers>
            <MultiDataTrigger>
              <MultiDataTrigger.Conditions>
                <Condition Binding="{Binding IsBodyReadOnly}" Value="True" />
                <Condition Binding="{Binding IsLocked}" Value="True" />
              </MultiDataTrigger.Conditions>
              <Setter Property="Cursor" Value="Arrow" />
            </MultiDataTrigger>
          </Style.Triggers>
          <Setter Property="AcceptsReturn" Value="True" />
          <Setter Property="AcceptsTab" Value="True" />
          <Setter Property="BorderThickness" Value="0" />
          <Setter Property="Padding" Value="2" />
          <Setter Property="Background" Value="Transparent" />
          <Setter Property="IsReadOnly" Value="{Binding IsBodyReadOnly}" />
          <Setter Property="IsEnabled" Value="{Binding IsCompacted, Converter={StaticResource LogicalNotConverter}}" />

          <!--<Setter Property="xctk:RichTextBox.Margin" Value="10" />-->
        </Style>
      </ContentControl.Resources>
      <ContentControl.Style>
        <Style TargetType="ContentControl">
          <Style.Triggers>
            <DataTrigger Binding="{Binding NoteKind}" Value="Text">
              <Setter Property="Content">
                <Setter.Value>
                  <TextBox
                    Style="{StaticResource Editor}" Text="{Binding BodyText}" TextWrapping="{Binding AutoLineFeed, Converter={StaticResource BooleanToTextWrappingConverter}, Mode=OneWay}"
                    FontFamily="{Binding FontFamily, Mode=OneWay}"
                    FontWeight="{Binding FontBold, Converter={StaticResource BooleanFontWeightConverter}, Mode=OneWay}"
                    FontStyle="{Binding FontItalic, Converter={StaticResource BooleanFontStyleConverter}, Mode=OneWay}"
                    FontSize="{Binding FontSize, Mode=OneWay}"
                  >
                    <TextBox.Foreground>
                      <SolidColorBrush Color="{Binding ForeColor}" />
                    </TextBox.Foreground>
                  </TextBox>
                </Setter.Value>
              </Setter>
            </DataTrigger>
            <DataTrigger Binding="{Binding NoteKind}" Value="Rtf">
              <Setter Property="Content">
                <Setter.Value>
                  <xctk:RichTextBox Style="{StaticResource Editor}" Text="{Binding BodyRtf}" >
                    <xctk:RichTextBox.TextFormatter>
                      <xctk:RtfFormatter />
                    </xctk:RichTextBox.TextFormatter>
                    <!--<xctk:RichTextBoxFormatBarManager.FormatBar>
                      <xctk:RichTextBoxFormatBar />
                    </xctk:RichTextBoxFormatBarManager.FormatBar>-->
                  </xctk:RichTextBox>
                </Setter.Value>
              </Setter>
            </DataTrigger>
          </Style.Triggers>
        </Style>
      </ContentControl.Style>
    </ContentControl>

    <Popup x:Name="popup" PlacementTarget="{Binding ElementName=root}" Placement="Left" IsOpen="{Binding IsActive, ElementName=root, Mode=OneWay}">
      <Popup.Resources>
        <Style TargetType="TextBlock">
          <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
        </Style>
        <Style TargetType="Button">
          <Setter Property="Focusable" Value="False" />
        </Style>
        <!--<Style TargetType="xctk:ColorPicker">
          <Setter Property="Focusable" Value="False" />
          <Setter Property="UsingAlphaChannel" Value="False" />
          <Setter Property="ColorMode" Value="ColorCanvas" />
          <Setter Property="ShowAdvancedButton" Value="False" />
          <Setter Property="DisplayColorAndName" Value="False" />
        </Style>-->
        <Style x:Key="Group" TargetType="Grid">
          <Setter Property="Margin" Value="0,0,0,8" />
        </Style>
        <Style x:Key="TitleLabel" TargetType="Label" BasedOn="{StaticResource TitleLabel}">
          <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
        </Style>
      </Popup.Resources>
      <Border
        Padding="4"
        BorderThickness="2"
        BorderBrush="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}"
        Background="{DynamicResource {x:Static SystemColors.ControlBrushKey}}"
      >
        <StackPanel>
          <Grid Style="{StaticResource Group}">
            <Grid.RowDefinitions>
              <RowDefinition />
              <RowDefinition />
            </Grid.RowDefinitions>
            <Grid.ColumnDefinitions>
              <ColumnDefinition />
              <ColumnDefinition />
            </Grid.ColumnDefinitions>
            <Label Grid.Row="0" Grid.Column="0" Grid.ColumnSpan="2" Content="input" app_main_view_parts_attached:Language.Word="note/input" Style="{StaticResource TitleLabel}" />
            <Button Grid.Row="1" Grid.Column="0" Content="title" app_main_view_parts_attached:Language.Word="note/input/title" Command="{Binding EditTitleCommand}" />
            <Button Grid.Row="1" Grid.Column="1" Content="body" app_main_view_parts_attached:Language.Word="note/input/body"  Command="{Binding EditBodyCommand}" IsEnabled="{Binding IsCompacted, Converter={StaticResource LogicalNotConverter}}" />
          </Grid>
          <Grid Style="{StaticResource Group}">
            <Grid.RowDefinitions>
              <RowDefinition />
              <RowDefinition />
              <RowDefinition />
              <RowDefinition />
              <RowDefinition />
              <RowDefinition />
            </Grid.RowDefinitions>
            <Grid.ColumnDefinitions>
              <ColumnDefinition Width="3*" />
              <ColumnDefinition Width="7*" />
            </Grid.ColumnDefinitions>

            <Label Grid.Row="0" Grid.Column="0" Grid.ColumnSpan="2" Content="style" app_main_view_parts_attached:Language.Word="note/style" Style="{StaticResource TitleLabel}" />

            <Label Grid.Row="1" Grid.Column="0"  Content="kind" app_main_view_parts_attached:Language.Word="note/style/kind" />
            <Grid Grid.Row="1" Grid.Column="1">
              <Grid.ColumnDefinitions>
                <ColumnDefinition Width="1*" />
                <ColumnDefinition Width="1*" />
              </Grid.ColumnDefinitions>

              <RadioButton x:Name="selectText" Grid.Column="0" Content="text" app_main_view_parts_attached:Language.Word="note/style/kind/text" Style="{StaticResource DefaultHorizontalRadioButton}" IsChecked="{Binding NoteKind, Converter={StaticResource EnumToBooleanConverter}, ConverterParameter={x:Static app_library_pedata_define:NoteKind.Text}}" />
              <Button
                Grid.Column="0" Content="warning" app_main_view_parts_attached:Language.Word="note/style/kind/text-warning" app_main_view_parts_attached:Language.Hint="note/style/kind/text-warning:hint"
                Width="{Binding ActualWidth, ElementName=selectText}"
                Visibility="{Binding FormatWarning, Converter={StaticResource BooleanToVisibilityConverter}}"
                Command="{Binding AcceptFormatWarningCommand}"
              >
              </Button>
              <RadioButton Grid.Column="1" Content="rtf" app_main_view_parts_attached:Language.Word="note/style/kind/rtf"  Style="{StaticResource DefaultHorizontalRadioButton}" IsChecked="{Binding NoteKind, Converter={StaticResource EnumToBooleanConverter}, ConverterParameter={x:Static app_library_pedata_define:NoteKind.Rtf}}" />
            </Grid>

            <Label Grid.Row="2" Grid.Column="0" Target="{Binding ElementName=selectForeground}" Content="fore" app_main_view_parts_attached:Language.Word="note/style/fore-color" />
            <xctk:ColorPicker x:Name="selectForeground" Grid.Row="2" Grid.Column="1" Style="{StaticResource DefaultColorPicker}" SelectedColor="{Binding ForeColor}" />

            <Label Grid.Row="3" Grid.Column="0" Target="{Binding ElementName=selectBackground}" Content="back" app_main_view_parts_attached:Language.Word="note/style/back-color" Style="{StaticResource HeaderLabel}"/>
            <xctk:ColorPicker x:Name="selectBackground" Grid.Row="3" Grid.Column="1" SelectedColor="{Binding BackColor}" >
              <xctk:ColorPicker.Style>
                <Style TargetType="xctk:ColorPicker" BasedOn="{StaticResource DefaultColorPicker}">
                  <Style.Triggers>
                    <DataTrigger Binding="{Binding NoteKind}" Value="Rtf">
                      <Setter Property="UsingAlphaChannel" Value="True" />
                    </DataTrigger>
                  </Style.Triggers>
                </Style>
              </xctk:ColorPicker.Style>
            </xctk:ColorPicker>

            <Label Grid.Row="4" Grid.Column="0" Target="{Binding ElementName=selectFont}" Content="font" app_main_view_parts_attached:Language.Word="note/style/font" Style="{StaticResource HeaderLabel}" />
            <StackPanel Grid.Row="4" Grid.Column="1">
              <app_main_view_parts_control:FontSelectControl
                x:Name="selectFont"
                Grid.Row="0" Grid.Column="0" Grid.ColumnSpan="3"
                FamilyName="{Binding FontFamily}"
                IsBold="{Binding FontBold}"
                IsItalic="{Binding FontItalic}"
                Size="{Binding FontSize}"
                SizeMinimum="{x:Static app_main:Constants.NoteFontMinimumSize}"
                SizeMaximum="{x:Static app_main:Constants.NoteFontMaximumSize}"
                MinWidth="{StaticResource FontSelectWidth}"
              >
                <app_main_view_parts_control:FontSelectControl.Style>
                  <Style TargetType="app_main_view_parts_control:FontSelectControl">
                    <Setter Property="IsEnabledBold" Value="True" />
                    <Setter Property="IsEnabledItalic" Value="True" />
                  </Style>
                </app_main_view_parts_control:FontSelectControl.Style>
                <app_main_view_parts_control:FontSelectControl.AdditionalContent>
                  <ContentControl>
                    <ContentControl.Style>
                      <Style TargetType="ContentControl">
                        <Style.Triggers>
                          <DataTrigger Binding="{Binding NoteKind}" Value="Rtf">
                            <Setter Property="Content">
                              <Setter.Value>
                                <WrapPanel Orientation="Horizontal">
                                  <ToggleButton IsChecked="{Binding TextUnderline}" app_main_view_parts_attached:Language.Hint="note/style/font/underline:hint">
                                    <Image Style="{StaticResource DefaultImage}" Source="{x:Static app_main:AppResource.NoteFormatUnderlineImage}" />
                                  </ToggleButton>
                                  <ToggleButton IsChecked="{Binding TextStrikethrough}" app_main_view_parts_attached:Language.Hint="note/style/font/strikethrough:hint">
                                    <Image Style="{StaticResource DefaultImage}" Source="{x:Static app_main:AppResource.NoteFormatStrikethroughImage}" />
                                  </ToggleButton>
                                </WrapPanel>
                              </Setter.Value>
                            </Setter>
                          </DataTrigger>
                        </Style.Triggers>
                      </Style>
                    </ContentControl.Style>
                  </ContentControl>
                </app_main_view_parts_control:FontSelectControl.AdditionalContent>
              </app_main_view_parts_control:FontSelectControl>
            </StackPanel>
          </Grid>
          <Grid Style="{StaticResource Group}">
            <Grid.RowDefinitions>
              <RowDefinition />
              <RowDefinition />
              <RowDefinition />
            </Grid.RowDefinitions>
            <Grid.ColumnDefinitions>
              <ColumnDefinition Width="33*" />
              <ColumnDefinition Width="33*" />
              <ColumnDefinition Width="33*" />
            </Grid.ColumnDefinitions>
            <Label Grid.Row="0" Grid.Column="0" Grid.ColumnSpan="2" Content="state" app_main_view_parts_attached:Language.Word="note/state"  Style="{StaticResource TitleLabel}" />

            <CheckBox Grid.Row="1" Grid.Column="0" IsChecked="{Binding IsLocked}" Content="lock" app_main_view_parts_attached:Language.Word="note/state/lock" Style="{StaticResource DefaultHorizontalCheckBox}" />
            <CheckBox Grid.Row="1" Grid.Column="1" IsChecked="{Binding IsCompacted}" Content="compact" app_main_view_parts_attached:Language.Word="note/state/compact" Style="{StaticResource DefaultHorizontalCheckBox}" />
            <CheckBox Grid.Row="1" Grid.Column="2" IsChecked="{Binding IsTopmost}" Content="topmost" app_main_view_parts_attached:Language.Word="note/state/topmost" Style="{StaticResource DefaultHorizontalCheckBox}" />

            <CheckBox Grid.Row="2" Grid.Column="0" Grid.ColumnSpan="3" Content="autolinefeed" app_main_view_parts_attached:Language.Word="note/state/autolinefeed" IsChecked="{Binding AutoLineFeed}" IsEnabled="{Binding NoteKind, Converter={StaticResource EnumToBooleanConverter}, ConverterParameter={x:Static app_library_pedata_define:NoteKind.Text}}"  Style="{StaticResource DefaultHorizontalCheckBox}"/>
          </Grid>
          <Grid Style="{StaticResource Group}">
            <Grid.RowDefinitions>
              <RowDefinition />
              <RowDefinition />
            </Grid.RowDefinitions>
            <Grid.ColumnDefinitions>
              <ColumnDefinition Width="33*" />
              <ColumnDefinition Width="33*" />
              <ColumnDefinition Width="33*" />
            </Grid.ColumnDefinitions>
            <Label Grid.Row="0" Grid.Column="0" Grid.ColumnSpan="2" Content="operation" app_main_view_parts_attached:Language.Word="note/operation" Style="{StaticResource TitleLabel}" />
            <Button Grid.Row="1" Grid.Column="0"  Content="copy" app_main_view_parts_attached:Language.Word="note/operation/copy" Command="{Binding CopyBodyCommand}" />
            <Button Grid.Row="1" Grid.Column="1"  Content="hide" app_main_view_parts_attached:Language.Word="note/operation/hide" Command="{Binding HideCommand}" />
            <!--<Button Grid.Row="1" Grid.Column="2"  Content="remove" app_main_view_parts_attached:Language.Word="note/operation/remove" Command="{Binding RemoveCommand}" />-->
            <app_main_view_parts_control:LockedButton  Grid.Row="1" Grid.Column="2" Content="remove" app_main_view_parts_attached:Language.Word="note/operation/remove" Command="{Binding RemoveCommand}" />
          </Grid>
        </StackPanel>
      </Border>
    </Popup>
  </Grid>
</app_main_view_parts_window:ViewModelCommonDataWindow>
