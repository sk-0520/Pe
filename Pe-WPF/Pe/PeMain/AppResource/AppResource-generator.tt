<#@ template debug="true" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Reflection" #>
<#@ assembly name="$(TargetPath)" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="ContentTypeTextNet.Pe.PeMain" #>
<#@ output extension=".cs" #>

namespace ContentTypeTextNet.Pe.PeMain
{
	using System;
	using System.Collections.Generic;
	using System.Linq;
	using System.Text;
	using System.Threading.Tasks;
	using System.Windows.Media.Imaging;
	using ContentTypeTextNet.Library.SharedLibrary.CompatibleForms.Utility;
	using ContentTypeTextNet.Library.SharedLibrary.CompatibleWindows;
	using ContentTypeTextNet.Library.SharedLibrary.Define;
	using ContentTypeTextNet.Library.SharedLibrary.IF;
	using ContentTypeTextNet.Library.SharedLibrary.Logic;
	using ContentTypeTextNet.Library.SharedLibrary.Logic.Extension;
	using ContentTypeTextNet.Library.SharedLibrary.Model;
	using ContentTypeTextNet.Pe.PeMain.Logic;
	using ContentTypeTextNet.Pe.PeMain.Logic.Utility;

	partial class AppResource
	{
<#
var type = typeof(AppResource);
var fieldInfos = type.GetFields(BindingFlags.Static | BindingFlags.NonPublic | BindingFlags.Public);
var usingFieldInfos = fieldInfos
	.Where(fi => fi.GetCustomAttribute(typeof(AppResourceAttribute), true) != null)
	.ToArray()
;
#>
		/*
		このソースは自動生成のため AppResource-generator.tt を編集すること。

		生成元フィールド数: <#= usingFieldInfos.Length #>
		*/
<#
foreach(var fieldInfo in usingFieldInfos) {
	var attribute = fieldInfo.GetCustomAttribute(typeof(AppResourceAttribute), true) as AppResourceAttribute;
	if(attribute == null) {
		continue;
	}

	var baseName = fieldInfo.Name.ToUpperInvariant()[0] + fieldInfo.Name.Substring(1);
	var pathName = baseName + "Path";
#>
		#region <#= attribute.AppResourceType #>: <#= baseName #>

		/// <summary>
		/// [<#= attribute.AppResourceType #>] <#= baseName #>のリソースパス。
		/// <para><#= fieldInfo.GetValue(null) #></para>
		/// </summary>
		public static string <#= pathName #>
		{
			get { return <#= fieldInfo.Name #>; }
		}

<# 
	switch(attribute.AppResourceType) {
		case AppResourceType.Image:
#>
		/// <summary>
		/// [<#= attribute.AppResourceType #>] <#= baseName #>のイメージソース。
		/// <para>初回のみ生成を行う。</para>
		/// </summary>
		/// <returns>イメージソース。AppResourceで管理されるためユーザーコードで操作はしないこと。</returns>
		public static BitmapSource <#= baseName #>Image
		{
			get { return GetImage(<#= pathName #>); }
		}
<#
			break;
				
		case AppResourceType.Icon:
			var getIconMethodName = "Get" + baseName + "Icon";
#>
		/// <summary>
		/// [<#= attribute.AppResourceType #>] <#= baseName #>のイメージソース。
		/// <para>初回のみ生成を行う。</para>
		/// </summary>
		/// <param name="iconScale">アイコンサイズ</param>
		/// <param name="logger">ログ。不要であれば null を指定(するか引数を与えない)。</param>
		/// <returns>イメージソース。AppResourceで管理されるためユーザーコードで操作はしないこと。</returns>
		public static BitmapSource <#= getIconMethodName #>(IconScale iconScale, ILogger logger = null)
		{
			return GetIcon(<#= pathName #>, iconScale, logger);
		}

		#region IconScale

<#
			var iconScaleList = new [] { "Small", "Normal", "Big", "Large", };
			foreach(var iconScale in iconScaleList) {
#>
		/// <summary>
		/// [<#= attribute.AppResourceType #>] <#= baseName #>のイメージソース(IconScale.<#= iconScale #>)。
		/// </summary>
		/// <returns>イメージソース。AppResourceで管理されるためユーザーコードで操作はしないこと。</returns>
		public static BitmapSource <#= baseName #>Icon<#= iconScale #>
		{
			get
			{
				return <#= getIconMethodName #>(IconScale.<#= iconScale #>);
			}
		}
<#
			}
#>

		#endregion IconScale

<#
			break;

		default:
			throw new NotImplementedException();
	}
#>
		#endregion <#= fieldInfo.Name #>
<#
}
#>
	}
}

